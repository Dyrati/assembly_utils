A Hacker’s Map of Golden Sun 2
by Teawater and Salanewt


With thanks to Atrius for some information that went into the making of this guide.


Introduction


Thank you for taking the time to look at this guide. Currently, most of the contents in here are meant to list functions and data banks in general, but many areas of this document might describe them in more detail. Please excuse the mess. Also, if you’re using Firefox to view this document, consider using Chrome. Or nevermind? This thing can take far too long to load at times! So I will probably make a .txt version. (While this one still remains the most up-to-date?)


May 30, 2020 = If you are viewing this guide, please be careful about editing. Version History is slow to use. (I assume it tries to load all versions?) So if I have any major issues with that, I will not use it, and may begin making manual backups. (Considering monthly ones.)


“-->” is intended to represent a link when converted to an HTML document, but this is WIP.


Have a nice day!


See Also:
Golden Sun 1: The Broken Seal
https://docs.google.com/document/d/1CiioR7fp-E1kbTCK0QaJ_Yv93o-zQk4XWUpA0aV9Kxk/edit


Golden Sun 3: Dark Dawn
https://docs.google.com/document/d/1p5OMFJ6wOvMTNfZg2ReOMXjP0e4s9IXNb8R7D01td0A/edit


Contents
Golden Sun 2: The Lost Age


ROM Map
--> 08000000 ROM and General Use code
--> 08020000 Map Mechanics? (NPC scripts, height/maps, etc.) (Not sure if this is the only /real/ place to show difference between Regular and World maps.)
--> 08038000 Dialogue/Menus
--> 080AD000 Party Mechanics
--> 080C8000 Event Mechanics? (Events, Treasures, Utilities, etc.)
--> 080F8000 Party Menus (Psynergy/Item/Djinn/Status/etc. - Basically full-screen menus.)
--> 08108000 Shop Mechanics
--> 08118000 Battle Mechanics
--> 08138000 Ability Mechanics
--> 081A0000 Credits
--> 081A6000 Title Mechanics
--> 081AC000 Lucky Dice (238:9/19)
 081AC012 = Song
 081AC1E8 = Read MTF ID for Lucky Dice table (file 132, width 240)
 081AC232 = Read MTF ID for Lucky Dice dice (file 134, width 32)
--> 081B2000 Lucky Wheels (238:10/20)
--> 081B8000 Super Lucky Dice (238:8/18)
--> 081C0000 Audio
  081C4530 = Songs
--> 08300000 Sprite data
--> 08680000 Master File Table


RAM Map
Map Code Files (Temporarily(?) documented in a separate file?)


…and what not.


Not sure if I should include an item/ability/etc list or not…  (For those not using the Editor) Probably could document all the code in map code files, though.






08000000 = b Setup_Interrupt_Handler_And_Stacks()
08000004 = Rest of cartridge header
080000C0 = sleep(frames)
080000C8 = 02003610 (Reset/clear)
080000D0 = 02003610 (add if not in list ; args(pointer, priority) & sort ; Return index)
080000D8 = 02003610 (remove in list ; args(pointer) ; Return index)
080000E0 = 02003610 (priority Or x0100 (all if arg is 0) ; args(pointer) ; Return index of last match) Unknown purpose.
080000E8 = 02003610 (priority And xFEFF (all if arg is 0) ; args(pointer) ; Return index of last match) Unknown purpose.
080000F0 = 02003610 (Execute all processes where (priority And xFF00) is arg ; arg(priority_req)
080000F8 = RNG ; Random Number Generator ; Return 16-bit random number
08000100 = 
08000108 = 
08000110 = 
08000118 = 
08000120 = 
08000128 =
08000130 = register_irq_handler(irq_id, vcount_value, p_handler)
            vcount_value ignored if irq_id != 2.  if p_handler null, handler set to THUMB 080133C0 (do nothing)


08000428 = Setup_Interrupt_Handler_And_Stacks() ; Boot (Pointer to 0801319C; or 08F9EE50 if MEGAROMS credit.)


080006B8 = Placed at 03000100 until 080016B8.


0200088C = squareroot(number)
020008CC = 
0200090C = 
02000980 = 
08000A60 /08000AC0/08000ACC/08000AE0/08000AEC/08000AFC = 


08000AE0 = 


08001448 = some r12 prep for tile animations?


080014A4 / 08001570 / 080015FC = Tile animations?


08001658 = Decompress(in,out) ; Best for Distance Length?
00 = Copy eight bytes
*More research needed on below*
If MSB are on, Distance-Length for each bit. (F0 FF) ; If 00 00, end. ; If Length is 0, gets next byte, adds x10…
Length are bits after a bit of “0”, I think.
Return decompressed size


(080016B8+ is not transferred to IRAM.)


ARM:
080018B4 = Data transfer to OAM
 08001998 = Transfer rot/scaling numbers to OAM.


Thumb:
080019B4 = Data transfer to OAM
 ARM function transfer to stack and call.


ARM:
08001A14 = (src, des, size)
 Ability animation - transfer pixels and 3/4ths their values. 
08001AD4 = (src, des, size)
 Ability animation - transfer pixels and 1/2ths their values. 
08001B54 = 
08001C08 = 


Thumb:
08001C90 = (src, des, size)
 Ability animation - ARM function transfer to stack and call. - transfer pixels and 3/4ths their values. 
08001CB0 = (src, des, size)
 Ability animation - ARM function transfer to stack and call. - transfer pixels and 1/2ths their values. 
08001CD0 = (src, , des, size)
08001CF0 = (src, , des, size)


ARM:
08001D10 =
08001D70 = 
08001DD0 = 
08001EA4 = 


Thumb:
08001F7C = 
08001F9C = 
08001FBC = 
08001FDC = 


ARM:
08001FFC = decompress(from,to) - Distance-Length - Data is in 16-bits.
08002054 = Division(numerator,denominator) (Signed?)
0800205C = Division(numerator,denominator) (Unsigned?)
08002064 = Division(numerator,denominator) (Signed. return remainder?)
0800206C = Division(numerator,denominator) (Unsigned, return remainder?)
08002074 = multiplication(FP1616?, FP1616?) (Returns int if FP1616.)
08002080 = (FP1616?, FP1616?, ?)
08002090 = cos(pi)     [FP1616 format]
08002096 = sin(pi*n)   [FP1616 format]
Pending Edit: (WIP)
sin/cos:
-angles and returns in FP1616 format (That is 0xXXXXYYYY = X is integer portion, Y is decimal portion.)
 -As angle here is not expressed in degrees or radians, but by percent of a circle, multiply it by pi radians or 360 degrees when using a calculator.
08002090 = cos(angle)
08002096 = sin(angle) 
080020A8 = sin/cos table *Extended and modded version from GS1
080028A8 = Quick Division Table (Only applies to divisors of 0x0-0x3FFF) *Absent from GS1
080128A8 = Decompress(in,out) Format 0 (And Format 1 is at 08012AF0.) ; (Note: Found used in decompressing tilemap data.)
08012B70 = Decompress(in,out) Format 2


^Above decompress functions put in RAM, then called. 


08013060 = Copy data.  arg0 = pointer to struct containing copy info.  arg1 = number of copies queued, should be
          same as first field of struct argument.  Used to execute copies queued to happen at a later date (in
          VBlank/HBlank?)  Put into RAM then called by 08013D86 (thumb)
080130CC = Convert Map Code BL calling from absolute to relative. Args(address, 16-bits)freend


Thumb:


0801314C = Set free space to address & 0 out a link. (Used for adding free space when last bank is done.)(Both for 02 and 03 RAM.)
08013164 = Set free space to address. (Used for adding free space when last bank is done.)(Both for 02 and 03 RAM.)


0801319C = Boot / initialize
 0801319E = DM0CNT_H
 080131C0 = WAITCNT=4014 (gba, prefetch enabled, sram:4, ws0:3/1, ws1:4/4, ws2:4/8)
 080131CA = 00-fill 03000000-03007800
 Call 08014C6C (reset_space())
 Call 080133C4 (Arm block to 03000100, set up IRQ handlers)
 020038E0:0 Number of copies queued for 08013060?
 03001110:0
 03001238:0 Debug mode off.
 0300123C:0 (Unknown, related to sleep function.  Set to 1 at 080E8852)
 Call 080132D0 (03007804:Build date)
 Call 08014BAC (Load font file, panel border palette, sprite palette, etc.)
 Call 08014B70 (Map Base BG0 fill all F000 (06002000-06002500))
 08013204 = DISPCNT=0140 (BG0, OBJ Char Mapping)
 …etc.


0801314C = removeRamEntry(offset) (03000000 table)
08013164 = setFreeSpace(address) (03000000 table)


 08013288 = Load Nintendo screen.


080132A4 =  
080132B8 = Return nothing (5 functions), 6th one returns 0.
080132D0 = 03007804:Build date
080132FC = Return nothing.
08013300 = get_mft_file(file_num) //Returns address of file.
0801330C = Convert Map Code BL calling from absolute to relative. Args(address, 16-bits)
0801336C = Decompress Map Code
080133C0 = Default IRQ handler - immediately return
080133C4 = Arm block to 03000100.
08013438 = setInterrupt(type, dma flags, function pointer)
080134B0 =
08013560 = sleep(frames)
080138A8 = 03001170:13 (It is this number when not pressing buttons.)
080138B4 = Controls…(Keypad?)
0801399C = Interrupt for VBlank - Controls (RAM setup?) Also has a call that executes functions in 02003610 table (exclude 04 in  byte [5].) Priority 0x0C80 might be used for refreshing/updating the map each frame. (Copy RAM to VRAM mapbase.)
 08013A22 = Call to transfer RAM to PALETTE
08013B30 = Return 0
08013B38 = Return nothing.
08013B3C = Return nothing.
08013B40 = IRQ handler for keypad interrupts
08013B68 = 08013D48 = some functions that relate to battle sprite animations (only 3 are actually used, however)
08013BA4 = 
Handles interrupts (4000208h  2    R/W  IME       Interrupt Master Enable Register)


08013BE0 = 
08013C1C = 
08013C58 = 
08013C94 = 
08013CD0 = 
08013D0C = 
08013D48 = 
08013D84 = Transfer of Palette from RAM to PALETTE. (Useful for applying color filters like the utilities.)

Fade Blending
08013DE4 = Blending - Appears to allow for fade-in/fade-out blending. Max 256 frames?
08013E70 = Fade-out(frames) Brightness Decrease
08013EB4 = Fade-in(frames) Brightness Decrease
08013EF8 = Fade-out(frames) Alpha Blending
08013F3C = Fade-in(frames) Alpha Blending
08013F80 = (Blend Type (0=Brightness Decrease, 1=Alpha Blending), 1st target,startBlend,endBlend,frames) ; startBlend may be ignored if invalid, and use previous endBlend (may be current blending) instead
08013FDC = Process blending until complete. (Calls sleep/frameAdvance function)


OAM-related?
08013FFC = clear? / init?
0801401C = Rotation/Scaling(Pointer to [scaleWidth, scaleHeight, rotation])
called by 080450FC (which deals with framecounter, perhaps init next_frame()?) Also called by 08022318.
* Seems related to sprite scaling; overworld usage confirmed
080140D8 = addSprite?(address,slot(0x00-0xEF))
08014128 = addSprite?(address,slot(0x00-0xFF)) Probably a sprite toggle / add/remove from bank(ram address, index of bank (0-255))
08014174 = claimSpriteSpace(slot, size in bytes) Returns 06010000 offset in bytes.
080141F4 = return largest number of consecutive empty (FF) slots.
08014220 = return number of empty (FF) slots.
08014240 = freeSpriteSpace(slot)
08014274 = freeSpriteSlot(slot) (and space)
080142AC = reduceSpriteSlot(slot) (and free space) ??? Reserves slot at size of 1 byte?
080142D4 = reclaimSpriteSlot(slot, size, pixel graphics pointer (if 0, skip; if -1, 00 out VRAM bytes)) (and claim space)
Returns 16 color tile offset. (Byte offset/0x20)
- animation/tile related  [called from Magnet utility + 080143E0, which is used in Battle for animations]
08014368 = clear? / init?
080143AC = 020036E0 get_empty_slot() Return index.
 -Just searches for FFFFxxxx entry.
080143E0 = claimFreeSpace(size) Return index - get_empty_slot() then 080142D4 for loading tiles into RAM?
080143F8 = reclaimSpace(slot, pixel graphics pointer)
0801440C = Rotation/Scaling(rotation, scaleWidth, scaleHeight)
See also 0801401C (Same function, but argument is pointer.)
Sprite stretching stuff? (r0 = Rotation, r1 = horizontal scale, r2 = vertical); may assign entity IDs
 08014444 = Base scale value (x10000)
 08014464 = Store values to #020054D0 section


Below stuff is the per-frame function list
080144C0 = 02003610 Disables entire list. (FFFF for all entries.)
08014504 = copy(des,src,size/number of 32-bits) - not sure where used.
0801451C = 02003610 Sort list
0801456C = 02003610 get_entry(function)
080145A8 = 02003610 add_entry(function, priority) If function is already listed, changes its priority. (Returns entry or number of entries?)
0801463C = Return
08014640 = Return
08014644 = 02003610 remove_entry(function) Sets priority to 7FFF. Returns entry.
08014694 = 02003610 ?(function) ([5] Or 1) Return last matched entry.
080146D4 = 02003610 if function is 02****** and if ([6]&1)=0, then ([5] Or 1). Return last matched entry.
0801471C = 02003610 set(function,[+6]) Return entry.
0801475C = 02003610 Return entry.
0801479C = 02003610 Ram functions set to even # priority ([5])
080147D8 = 02003610 Execute_functions(priority) ([5])
0801480C = 02003610 Count_functions(priority) ([5]) *GS2-exclusive
08014840 = 02003610 Execute_functions(priority) ([5], excludes value 4) *GS2-exclusive
08014878 = rand() as Int16 //Returns a 16-bit random number.
0801489C = rotated coords(distance, angle, sp) sp has x, z, y. ; Calculates coords to a distance in a defined direction. Facing right is angle 0.
Equivalent to:
x += distance * cos(angle)
y += distance * sin(angle)
080148E8 = getDirection(y>>3,x) (Might be used to face an object.)
080149B4 = 
080149E0 = sqrt(number) << 8
080149F0 = get_sprite_palette_bank()
080149F8 = 03001250 String data: 0123456789ABCDEF (8 characters.)
08014A24 = 03001250 String data: Numeral integer (+/-) (11 chars.)
08014AA8 = Map Base fill F000 by size (arg0)
08014AE0 = Map base related…
08014B30 = (Minimum 8)
08014B50 = (Minimum 10)
08014B70 = Map Base BG0 fill all F000 (06002000-06002500)
08014BAC = Load font file, panel border palette, sprite palette, etc.
08014C4C = Load sprite palette
08014C6C = reset_space() 00-fills 03000000-03000100 section, and sets free space to 03001300 & 02030000.
08014CA0 = get_free_size() Check 03 RAM.
08014CB0 = get_free_size() Check 02 RAM.
08014CC0 = get_free_space(rel_addr,size) Check 03 RAM first, then 02 RAM, if failed, return 0.[a]
08014D00 = get_free_space(rel_addr,size) Check 02 RAM first, then 03 RAM, if failed, return 0.
08014D40 = fill_free_space(fill_val) *GS2-exclusive
08014D78 = get_free_space(size) Check 03 RAM first, then 02 RAM, if failed, return 0.
08014DAC = get_free_space(size) Check 02 RAM first, then 03 RAM, if failed, return 0.
Note: Free space limits are at 02030000-02040000 and 03001300-03006FC0.
08014DE0 = Return


Angles stuff below: LIST IS TENTATIVE AND BASED ON DECOMPILED GS1 CODE, SO SOME THINGS MAY BE DIFFERENT
08014DE4 = matrix_stack_init
08014E1C = matrix_push
08014E38 = matrix_store
08014E74 =     *GS2-exclusive
08014E90 = matrix_load
08014EA8 = matrix_pop
08014EE0 = matrix_cache_init
08014EFC = matrix_transform_rotate
08015024 = matrix_transform_rotate_roll (rotate battle camera up/down)
08015068 = matrix_transform_rotate_pitch (rotate battle camera left/right)
080150AC = matrix_transform_rotate_yaw
080150E4 = matrix_transform_scale
08015128 = matrix_transform_translate
08015160 = Note: Angling/positioning of 3D object (i.e. Doom Dragon transformation light beam coordinates)
08015198
080151AC
080151E4 = Angle/length of 3D light beams (especially battle; i.e. beams of light in Doom Dragon’s transformation)
0801521C
0801524C = matrix_transform_rotate_translate
08015384 = matrix_transform_rotate_translate_scale
08015510 = matrix_lookat_rh
080156E8 = matrix_cache_lookat_rh
080156F8 = matrix_transform_lookat_rh
08015714 = ?(angle,angle,angle) Only first angle is operated on, but all angles saved to 030011E0.
08015768
08015778 = Sprite scaling/pseudo-camera positioning?
 080157EC = Plane angling? Higher values raise PCs, seems to not affect enemies
 080157FE = Relative X coordinate
 08015800 = Relative Z coordinate
 08015802 =  End scale value
 08015828 = Global zoom variable (idle)


08015830 = decompress(from,to) - Distance-Length - Data is in 16-bits.
0801587C = decompress(from_address, to_address) //I think? (& misc?) ; Format 0 and 1.
080158CC = decompress_image(from_address, to_address)? (Tileset image) ; Format 2.
0801591C = decompress(from,to) - Distance-Length 
^Puts actual decompression routine into RAM, and calls it.


Save Management
SRAM (save RAM) = 0x0E000000-0x0E00FFFF
 -battery files (.sav) are copies of SRAM
file = in-game slot (0-2)
savslot = SRAM section (0x0-0xE, 0xF/0x10 if invalid.) Corresponds to SRAM address: 0x0E000000 + 0x1000*savslot
section headers: CAMELOT: 7 bytes; in-game slot: 1 byte; checksum: 2 bytes; priority: 2 bytes; garbage: 4 bytes
sav table (60 bytes) = [030000CC]
  15 bytes - 1 byte per SRAM section: 01 if header is valid, and has the highest priority for its slot, otherwise 00
  15 bytes - 1 byte per SRAM section: the in-game slot of the SRAM section
  30 bytes - 2 bytes per SRAM section: the priority of the SRAM section
localsave (0x3000 bytes) = [030000CC] + 0x3C
savepreview (0x40 bytes per in-game-slot) = [030000CC] + 0x303C
0801596C = Reads the header of each SRAM section, and sets up sav table.
08015AD0 = getRndFreeSlot(file) - checks sav table, returns a random available savslot: grn() % freeslots
 Returns 0xF if no slots available, or if it could result in no slots being available. (Always ensure a backup slot?)
08015B24 = save(savslot) - transfer to SRAM with progress bar (if used)
08015C08 = loadSlot(savslot)
 -Loads three SRAM sections (0x1000 * 3 sections) to localsave, calls checksum.
 -Returns difference of (savChecksum() & 0xFFFF) and header checksum. (0=valid file, non-zero=corrupted file.)
08015CA4 = save(file, srcAddress) - saves the game
 Returns:
 0 = Successfully saved
 1 = No empty savslot to save at.
 2 = Failed to save at empty savslot.
 3 = Failed to delete/invalidate old savslot. (Skipped if none.)
 4 = Priority number loopback - Failed to save back to old slot.
 5 = Priority number loopback - Failed to delete/invalidate previous slot.
08015E44 = loadFile(file, desAddress) Returns 0 for success, 1 for failure. (Depends on if file is in sav file.)
08015E8C = delete/invalidate(file)
08015EC8 = savChecksum() - returns sum of bytes in localsave (skipping header)
08015F0C = getSavSlot(file) - returns the savslot of file, or 0xF if file is unused
08015F48 = delete/invalidate(savslot)
08015FFC = compareBytes(pointer1, pointer2, bytecount) - returns the difference of first mismatch, or 0 if no mismatches
0801601C = getlowestpriority(savslot)
08016054 = getSavePreview() - loads first 0x40 bytes from each in-use-save to savepreview
 - bytes 0x38-0x3B are replaced with savedata[0x1010:0x1014]
080160D4 = GS2-only?:
0801613C = Set interrupt and de-init 030000CC.
08016150 = GS2-only?: ?, called from #08042F10 (stores r0 value of #08042DC5 somewhere; data/address positioning for next function?)


Link Cable (0x08016180)
Serial Communication (There may be code for incoming/outgoing functionality with second GBA here?)
08016180 = Initialize sending/receiving
080162DC = 
080162F0 = 
08016348 = 
08016430 = 
080164E8 = 
08016544 = 
080165B4 = 
08016694 = Serial Interrupt - I/O Sending and Receiving. (Whenever data is transferred, this code is executed.)
080167AC = (Turns off serial communication interrupt???)
080167D8 = 
0801680C = setupOutgoingTransfer(address, size) Return -1 for “busy”, else 0.
08016854 = setupIncomingTransfer(address, size) Return -1 for “busy”, else 0.
080168A0 = Frame advance until outgoing transfer is complete?() Max 600k frames.
080168CC = Frame advance until incoming transfer is complete?() Max 600k frames.
080168F8 = Frame advance until outgoing/incoming transfers are complete?() Max 600k frames.
0801692C = Outgoing(1)/Incoming(2) “busy” flags?()
08016950 = init/clear/reset incoming/outgoing()
08016990 = 
08016BD8 = Return (Called 10000 times by Start button in Transfer Test.)
08016BDC = Transfer Test


08016CA4 = locate_char_data(character_id) as Int32 //Returns pointer to character's data (Party Member or Enemy)
08016CE4 = read_flag(flag_number) as Boolean
08016CFC = write_flag(flag_number)
08016D18 = clear_flag(flag_number)
08016D34 = toggle_flag(flag_number) as Boolean //Returns 1 if toggled on, else 0 if toggled off.
08016D5C = read_flag_byte(flag_number) as Byte
08016D6C = write_flag_byte(flag_number, value)
08016D7C = increment_flag_byte(flag_number) as Byte //Returns incremented byte. (Increments by 1.)
08016D98 = decrement_flag_byte(flag_number) as Byte //Returns decremented byte. (Decrements by 1.)
08016DB4 = read_4bit(flag_number) as Int32 //Returns 4-bit value.
08016DD0 = write_4bit(flag_number)
08016DF8 = BIOS call swi $0B - (For copying data.)
08016DFC = swi $19 (0)
08016E04 = swi $19 (1)


Save Management 2 (SRAM management?) - (Random hunch based on r4 push/pop - Could be a library they used from some other source. Section barely researched, so who knows.)
08016E0C = 


08017118 = bytetransfer(src, des, size)
0801713C = load(savslot, srcoffset, des, size)
080171B8 = validitycheck(src1, src2, size) - Returns number of bytes corrupted.
080171FC = validitycheck(savslot, src1) - Returns number of bytes corrupted.


08017518 = (savslot, )


080178B4 = Pointers placed at 030001E4.
080178EC = 


080179EA - Used in direction calculations (Sine, Cosine lookup table?)


08017AF0 - Panel Border Palette


08017B10 - Sprite Palette


08017CD0 = 0123456789ABCDEF


08017CE8 = getLength(x,x,y,y,z,z) Basically get line length using pythagorean theorem. (Function stored to stack; Second x/y/z are duplicates of the first. squareroot omitted.)


08020000
080203A8 = Alternate sprite palettes (12 entries of x100 bytes)
08020DA8 = Sprite Conversion (src, des, paletteSwap) - “Decompresses” run length transparent pixels (E0-FF; E0=1px FF=32px), and do palette swap.
-Used by Format 0 and 3.
08021704 = Tilemap conversion. Args(from:02018000,to:02010000,from2:02030F00)
080217A4 = 


Thumb:
08021918 = get_sprite_address(sprite_index)
08021940 = Decompresses sprite’s graphics (Compression Type 0x3, it seems.) - Distance-Length
080219CC = (Only called from battle mechanics.)
08021A84 = loadSpriteFrame?(address, direction (0000-FFFF)) - Sprite render stuff; seems to deal with properties for sprites, like position and animation (sprite/entity RAM address, sprite rotation)
 r5 = 
 r6 = 
 r7 = r0
 r8 = 0
 r9 = ram address to hold decompressed sprite data
 r10 = r1 - direction facing (0000-FFFF)
 r11 = 
 sp,08 = (0=Loaded asm code, 1=Asm code already loaded)
 sp,0C = 
 sp,10 = 02032290
 sp,14 = Decompressed size for sprite data (w*h) (iram alloc’d)
 sp,18 = 1=flip sprite
 sp,1C = 
08021B24 = Animation control code switch statement
  Animation commands:
 EF = 
  F0 = Direction Type
  F1 = End (Indefinite delay)
  F2 = Y coord offset
  F3 = X coord offset
  F4 = Unused?
  F5 = Delay
  F6 = Unused?
  F7 = Unused?
  F8 = Unused?
  F9 = Unused?
  FA = Unused?
  FB = 
  FC = Music
  FD = Animation Position/Offset
  FE = Set Animation (0x80 flag may be incomplete?)
  FF = Delay (With subsprite set to 0xFF)
 08021BD6 = Direction Type - Calculate sprite to use from direction. This type is roughly the number of sprites used.
 Supported Direction Types: 1, 2, 3, 5, 8, 20, 22 ; 20/22 only have 2 different sprites used.
 08021CB4 = Sprite freeze flag check
 08021CD4 = ??? Sprite value check (set when using any action type other than x09)


08022010 = 
080220F0 = Field sprite properties stuff? Deals with shadows and sprite rotation for sure
 08022196 = Sprite size check?
 080221BA = Check object shadow flag
08022318 = called by 08105CC (digit missing?)


0802254C = Battle Settings Stuff (including sprite scaling possibly) (,current coords pointer,scaling pointer,direction,)
sp x00 = 
sp x04 = Scale Status: 0 = unscaled, 1 = smaller than normal, 3 = bigger than normal
sp x08 = Sprite Rotation?


 080225B0 = Load scale value
 080225BA = Sprite rotation
 080225BC = Sprite scale
 080225BE = Sprite address (#0203136C section)
 …
 020225D0 = Load horizontal stretch value from table entry in #020327C8 (battle address)
 020225DC = Load vertical stretch value from table entry in #020327C8 (battle address)
 080225E4 = End sprite scaling cap
 … 
 080225F6 = Load sprite height
 080225FA = Load sprite Z coordinate (relative to position???)
 0802260A = Load sprite width
 08022610 = Base sprite size; used for comparisons
 08022622 = Adjusted sprite positioning (applied to sprites that are scaled up)
 … 
 0802262E = ??? Value (is used later on; can change positioning, shadow status, entity transparency; unsure what else)
 0802264C = Sprite Scaling (entity ID control stuff)
  08022658 = Stretch control (r1 = horizontal, r2 = vertical)
 08022674 = Load sprite X coordinate (relative to position???)
 … 
 080226E8 = Innate shadow flag check (from visual table at #02031364 + x1A)
 080226EE = Load character Y coordinate (forward distance)
 080226F2 = Character Y coordinate applied to innate shadow
 080226F8 = Load character X coordinate (side distance)
 080226FA = Character X coordinate applied to innate shadow
 08022702 = Innate shadow Y coordinate offset (when idle; lower numbers move it forward)
 08022708 = Innate shadow followup speed (low numbers make the shadow move forward more when character attacks)
 0802272A = Floor depth/Z coordinate offset (allows for all innate shadows to be placed at a certain Z coordinate)
 0802279C = END
080227A0
080227B0
080227E0 = (slot/index?,dest address,,); (format x2 compression); returns decompressed sprite size in bytes
080228BC = ?(sprite_index) (Func 08022C98’s usage-when graphic sprite data pointer is 0x00000000.)
080228E0
0802296C
080229AC = add_battle_sprite_layer (sprite_dynamics_address, sprite_ID); returns objSprite_render_props_address
08022A24
08022A84 = 
08022ACC = set_layer_sprite_animation (objSprite_render_props_address, anim_ID) [is this only for layer sprites?]
08022B04 = Could be setAnimation(03ramSprAddr,value) Called from 080233D0. Also called from 08043A64 during load-in
08022B80
08022BAC = Check sprite display/overlay in battle (related to object shadows in battle?)
08022BD8 = Object shadow application
 08022BDC = Game Mode check (x03 = Overworld)
 08022C38 = Number of bytes to grab from uncompressed sprite location
08022C78 = Unused?
08022C84 = ??? (Uses object shadow graphic, called in two battle animation-related things?)
08022C98 = addSprEntry(sprite_index) Returns 0 if width is 0.
Inserts an entry in the table located at 0300000C/03002100, and returns the address of inserted entry.
 08022D04 = Palette Swap
08022D1C = clear sprite info 2 slot(sprite info 2 address) ; Copy zeros to location in arg.
08022D40 = Init/setup animations(sprite_index) [called for both battle and field animations]
08022E90 = clear_sprite(sprite info 1 address) ; called by 0810526C
 -clear vram slot
- clear sprite info 2 slot(s)
 -clear sprite info 1 slot
08022ED8 = ?(sprite_index,animation,)
08022F24 = NPC/PC idle animations? (contains a possible call to 08013560)
08022F64 = unknown_disintegration? (full purpose not fully known, but related to disintegration deaths in battle; r0 = sprite_dynamics address, r1 = a random value; loads 0802EB4C to r3 during function?)


08022FE8 = proto_death_effect (calls 08022F64 and 08013560 idle function?); this was the early effect for formula damage deaths, and is called only by the likewise unused proto_defeat_anim function (which itself is called in proto_deal_damage_test and nothing else, and that isn’t called by anything)


0802301C = disintegration_death_effect (similar to 08022FE8)    NOTE: Only used via text command x09 (curse, poison, haunt); deaths caused by actual damage do not use this and are part of the anim_control effect set, and the same seems to apply to condemn
08023088
080230E0 = Init 03000014 and 03000018, otherwise unknown… = Might set how NPCs work every frame loop?
 Arg0 = Type? (I am skeptical if Golf game’s map type value matches this exactly.)
 0 = Unused?
 1 = Unused?
 2 = Used in Sprite Viewer. , and Field. (Is this normal maps?)
 3 = Used in Field. (Is this World Map?)
 4 = Used in Battle.
0802319C = Return
080231A0 = Return
080231A4 = Return address of npc ram object that doesn’t have a script pointer (=00000000) ; May return 0 if none are available. (0x40 objects)
080231C8 = clearObject(obj pointer) ; Previously: removeSprite(sprite)
 -clears obj and all its sprite assets.
08023220 = setSprite (sprite,x?,z?,y?) [similar to the one used for utilities, but more related to field stuff (i.e. chests)]
080233A8 = setScript(npcAddr,scriptAddr)
080233D0 = setAnimation(address,number) (used in battle, possibly elsewhere?)
08023410 = setAnimationSpeed(address,speed)
08023450
080234B0
080234CC
080234F0
08023510
08023524 = Sets script based on movement mode(npcAddr) = For PC?
080235F8 = Set script to 0802F200. (Command 11, end script.) = For normal NPCs?
08023608 = setCamFollow(cam obj address, obj address (to follow/can be 0))
 - Set script to 0802F1D0. + ? (Repeats command C.) = For Camera object?
08023634 = Data Scripts related = Wait 599/x257 frames?
08023664 = called by 080CBB82 (something for init upon loading a room?)
08023680 = 
080236A8
080236D0 = Field sprite palette swap code (not battle)
080236E8
0802372C
080237C8
080237E8
080237F8
08023840
08023868 = Return 1
0802386C = Field sprite rendering (?) (Guessing(?) this is only for normal maps, not World Map nor Battle.) (Frame loop)
 r5 = x
 r6 = Early: NPC RAM data’s sprite on value
 r6 = Later: x - 0xFFF90000
r7 = y
 r8 = y
 r9 = Address of RAM NPC data ([0x03000014])
 r10 = y (tile)
 r11 = 
 sp 0x14 = 2 priority bits from tilemap. (0x0000C000 bits)
 sp 0x18 = 2 priority bits from tilemap. (0x0000C000 bits)
 sp 0x20 = Tilemap RAM address (Probably of the layer)
 sp 0x28 = layer
 020239EE = Some stuff on priority. (Tilemap is checked.)
08023D7C
08023D80 = Render for individual sprite(NPC Ram data address, direction?) (Called by below function.)
-Mostly just type checking? 2 types - Might be whether it is single or multi sprite? - And the 0x16B flag check for scaling. and a check for enabled or not.
08023E18 = World Map/Battle sprite rendering (?) (Only checked based on parent function.) (Frame loop)
 08023E7E = 0x16B flag check (Battle sprites rotated/sprites mirrored)
08023EB2 = Loop to render for individual sprites (Calls above)
08023ED6 = De-allocate 0x50 bytes.
08023EFC = Data Script 2B - setScript(npcAddr) ; [0] is script address.
08023F14 = Data Script 2C - sprite off
08023F28 = Data Script 2D - sprite on
08023F3C = For 600 frames, call (below), until True.
08023F64 = ? Wait till destination??
08023F94 = Call above.
08023F9C = Data scripts related. (May animate sprites? Ex: Gravity mode.) May process movement? (Field-only (Regular & World Map)) (Frame loop)
 r7 = NPC data address [03000014]
 r8 = 
 r9 = Distance Y
 r10 = Distance X
 r11 = Distance Z
 sp, 0x00 = npcAddr+0x55
 sp, 0x04 = 
 sp, 0x08 = 0
 sp, 0x0C = 
 sp, 0x10 = Y
 sp, 0x14 = Z
 sp, 0x18 = X
 sp, 0x1C = 0x3F = Number of NPC enties to scan (0x40)
 sp, 0x20 = 
 sp, 0x24 = 
 sp, 0x28 = 
 08023FC0 = Check if no NPC script to skip empty slots.
 08023FC8 = Execute NPC’s assign thumb code if it has one. (non-0)
 08023FD4 = Check if no NPC script to skip empty slot again. (Possibly linked thumb code can “delete” the object?)
 08023FDC = Check if NPC enabled (0) or disabled (1+)
 08023FEE = Delay in frames until idle script execution. Idle script execution. Go to next npc slot if pointer clears.
 08024030 = 
 08024046 = 3D npc movement
 080241C2 = 2D npc movement
 0802431C = 
 … (very long function, but only focuses on movement.)
 (Note: 08024556 accesses the “solid NPC” byte / Checks 0x80 flag.)
080246B8 = Collision scripts? - Relating to standing on objects. (Frame loop)
0802471C = setPosition(npcAddr,x,z,y)
08024738 = setDest(npcAddr,x,z,y)
08024920 = (Lists the npc ram addresses that have scripts.)
0802493C = (Battle-only: May process moving to destination. / Frame loop)
08024C50 = Data Script 00 - Wait [0] frames
08024C70 = Data Script 01 - Wait until finished
08024CAC = Data Script 2E - Function call
08024CDC = Finds value in script(npcAddr,value) if value=0, returns 0, otherwise index location +1 in script.
08024D14 = Data Script 0D - Jump [0x0] to [0x1] (Finds [1])
08024D60 = Data Script 0E - Jump (Finds [0])
08024D7C = Data Script 0F - Jump if [npc+0x57]!=0 (Finds [0])
08024DAC = Data Script 10 - Jump if [npc+0x57]=0 (Finds [0])
08024DDC = Data Script 11,31-35 - End Script (17), End (49)
08024DEC = Data Script 12 - [npc+0x57]=read_flag([0])
08024E10 = Data Script 13 - [npc+0x57]=read_flag([0]) , and sets the flag.
08024E3C = Data Script 14 - [npc+0x57]=read_flag([0]) , and clears the flag.
08024E68 = Data Script 15 - [npc+0x57]=read_flag([0]) , and toggles the flag.
08024EA8 = Data Script 27 - Sets animation to [0] (I think.)
08024EC8 = Data Script 26
08024ED4 = Data Script 28 - Adds 2 to index in script. (Pointless?)
08024EE0 = Data Script 29 - Play audio [0] (Without condition.)
08024F00 = Data Script 2A - Plays audio. (Condition may be based on if two objects are near?)
08024F20 = ?(address of an object,sp for more coord data...) (I assume first arg is compared to the other objects somehow?) - Calls 08026F80 (Collision detection.)
 (Note: 08024F3E accesses the “solid NPC” byte.)
Returns -1 or 0.
08024F80 = Same as above function, but will return an object’s address or 0.
08024FE0 = Data Script 02 - Set position to [X],[Z],[Y] ; If [Z]=-1, set to ground level.
08025038 = Data Script 03 - Set position to 0,0,0 (Or X=0, Z=Z, Y=0 ?) Set to ground level.
08025078 = Data Script 04 - Set destination to [X],[Z],[Y]
0802509C = Data Script 30 - Set destination to [X],Z,[Y]
080250C0 = Data Script 05 - Set relative destination to [X],[Z],[Y]
080250F4 = Data Script 06 - Set direction to face object at [+0x68]. / Set direction. (To 080148E8’s return)
08025118 = Data Script 07 - Unknown
08025134 = Data Script 08 - setDest relative to stack values. ([0],[1] unknown.)
08025160 = Data Script 0C - Unknown - Positioning? Maybe camera? - Should help camera to follow NPCs - research this.
08025428 = Data Script 2F - Positioning?
08025608 = Data Script 0B - Unknown - Positioning?
08025698 = Data Script 09 - Set random relative destination at a distance from [0] to +[1], and at max distance from starting location of [2].
Args: r0=npc ram address
Returns: ?
r6 = npc ram address
r7 = sp, 0x14 ; Destination coords address
r8 = Distance (minimum distance + random)
r9 = Attempt # to generate a direction to go in.
r10 = Random direction ; direction + (rng() >> 2) - (rng() >> 2)
r11 = Random variance of distance (from script)
sp,0x00 = boundary^2
sp,0x04 = Minimum distance to move (from script)
sp,0x08 = X ; For offseted direction heightmap checking
sp,0x0C = Z
sp,0x10 = Y
sp,0x14 = X ; For destination
sp,0x18 = Z
sp,0x1C = Y


int cmd9(object obj)
{
    int tries = 0
    while (true)
    {
        if (++tries > 7) break;
        int[] desCoords = {obj.x, obj.z, obj.y}
        int desDistance = scriptArg1 + bigmul(rng(), scriptArg2);
        desDirection = obj.direction + (rng() >> 2) - (rng() >> 2);
        calcCoords(desDistance, desDirection, desCoords);
        if (objCollision(obj, desCoords) != 0) continue;
        if (hmapCollision(obj, desCoords) != 0) continue;
        
        int[] tempCoords = {obj.x, obj.z, obj.y}
        calcCoords(0x0008.0000, desDirection, tempCoords); //Useless, no collision check after.
        
        tempCoords = {obj.x, obj.z, obj.y}
        calcCoords(0x0008.0000, desDirection + 0x2000, tempCoords); //Invisible dot (Left=Distance in pixels, Right=In sub-pixels)
        if (hmapCollision(obj, tempCoords) != 0) continue;
        
        tempCoords = {obj.x, obj.z, obj.y}
        calcCoords(0x0008.0000, desDirection - 0x2000, tempCoords);
        if (hmapCollision(obj, tempCoords) != 0) continue;
        
        //Have we went beyond the max distance?
        if ((desCoords[0] - startx)^2 + (desCoords(2) - starty)^2 > scriptArg3^2) continue;
        
        //It branches to the bottom of the function here.
        //But for the case of this pseudo-code, assume this is a good direction:
        setDestination(obj, desCoords[0], desCoords[1], desCoords[2]);
        [obj+4] += 4; //Increment position in script.
        return 1;
    }
    //Failed to find valid direction; flip direction
    obj.direction += 0x8000 //Because Direction is 16-bit, overflow bits are cut.
    [obj+0x5E] = 1; //Set some other variable I'm not sure of.
    return 0;
}


08025830 = Data Script 0A - Set random relative destination at a distance from [0] to +[1], and at max distance from starting location of [2].
Args: r0=npc ram address
Returns: ?
r6 = npc ram address
r7 = sp, 0x28 ; Destination coords address
r8 = Distance (minimum distance + random)
r9 = y - homeY
r10 = Attempt # to generate a direction to go in.
r11 = x - homeX
sp,0x00 = Random direction ; direction + (rng() >> 2) - (rng() >> 2)
sp,0x04 = Home Y address
sp,0x08 = Home X address
sp,0x0C = Direction
sp,0x10 = boundary^2
sp,0x14 = Random variance of distance (from script)
sp,0x18 = Minimum distance to move (from script)
sp,0x1C = X ; For offseted direction heightmap checking
sp,0x20 = Z
sp,0x24 = Y
sp,0x28 = X ; For destination
sp,0x2C = Z
sp,0x30 = Y
Below functions used with DS 0x16-0x18.
08025B58 = 00 - changeScript(npcRamAddr,absolute(set)/relative(add)/?,value) Does “?” mean “if equal”?
08025B84 = 01 - changePosInScript(npcAddr,rel,val)
08025BB4 = 02-04 - direction(npcAddr,rel,val)
08025BE4 = 05 - x(npcAddr,rel,val)
08025C0C = 06 - z(npcAddr,rel,val)
08025C34 = 07 - y(npcAddr,rel,val)
08025C5C = 08 - Sprite X Scale “
08025C8C = 09 - Sprite Y Scale “
08025CB4 = 0A-0B
08025CDC = 0C - Relative x destination
08025D04 = 0D - Relative z destination
08025D2C = 0E - Relative y destination
08025D54 = 0F - Movement[speed] a
08025D7C = 10 - Movement[speed] b
08025DA4 = 11
08025DCC = 12
08025DF4 = 13
08025E1C = 14
08025E44 = 15
08025E6C = 16
08025E94 = 17
08025EBC = 18
08025EE8 = 19ship
08025F24 = 1A
08025F60 = 1B
08025F9C = 1C
08025FD0 = 1D
0802600C = 1E
08026048 = 1F
08026084 = 20
080260C0 = 21
080260FC = 22
08026138 = 23
08026174 = 24
080261B0 = 25
080261D8 = 26
08026200 = 27
0802623C = 28
08026278 = Data Script 16 - Variable Set. [0] = [1]
080262B0 = Data Script 17 - Variable Add. [0] += [1]
080262E8 = Data Script 18 - Variable If Equal?
08026320 = Unused?
0802632C = Data Script 23 - Hover
 08026362 = Hover running speed
 08026368 = Hover initial running speed/end traction 
 0802636E = Hover running animation
 08026374 = Hover walking speed
 0802637A = Hover initial walking speed
080267BC = Data Script 24 - Slippery Ground
 080267EC = Slippery running speed
 080267F4 = Slippery initial running speed (lower traction means that it takes longer to reach full speed)
 080267FA = Slippery running animation
 08026802 = Slippery walking speed
 0802680A = Slippery initial walking speed (lower traction means that it takes longer to reach full speed)
08026DD0 = Sets psynergy to use on map. (At least for shortcuts.)
08026E60 = Related to button controls and menus?
08026F80 = Collision detection? Removing the code makes it so you can’t move without holding L in debug mode
 ?(first obj’s coords address, first obj’s collision radius, second obj’s coords address, second obj’s collision radius)
 coords address=NPC’s RAM address + 8
 Returns 0 or -1 (Probably for whether movement should take place or not?)
 x^2 + y^2 + z^2 < radius^2 should return 0. (Overlapping)
Arg r2 may be sp address. containing coord data for destination? (Distance of 4) ; More research needed.
I might have arg r1 and arg r3 surprisingly reversed?? (Or do those just not matter?)
08026FC8 = (BL in Data Script 19)? (Walking in water? - Definitely for sound effect, at least.)
08027064 = Data Script 19 - Normal movement - Gives you the ability to move your character.
 0802707A = Walking animation
 080270A6 = Running speed
 080270AE = Initial running speed (starts at this before changing to normal value)
 080270B2 = Running animation
 080270BA = Walking speed
 080270C2 = Initial walking speed (starts at this before changing to normal value)
 0802724E = Heightmap check 1.
 0802726E = Debug mode: Walk through walls
 080274FE = Object collision (Perhaps ability to push NPCs?)
 0802767C = Increment value at #02030184 (time walking into something)
 080276A2 = Pushing NPCs animation (not used in all instances, such as with pushing psynergy obstacles)
 080276C2 = Idle animation (not moving)
 080276C8 = Idle animation when party leader has 0 HP
 080277A8 = Walking in water checks… (For graphic/sound effect.)
080279B0 = Data Script 1A - Overworld movement
 080279C6 = Walking animation
 080279DE = Running speed
 080279E4 = Initial running speed
 080279EA = Running animation
 080279F0 = Walking speed
 080279F6 = Initial walking speed
 08027A50 = Debug mode: Walk through walls (There’s also a Flag 0x163 check. (Can be used instead of the L button, if necessary.)
 08027AB6 = Collision detection (6 of these calls here.)
08027E0C = Data Script 25 - Calls 08026E60 - No movement. Access to menus/psynergy shortcuts.
08027E20 = Data Script 1F - Ship mode (in maps, so Northern Reaches, Sea of Time, and Lemuria mainly)
 08027E6E = Max speed
 08027E70 = Acceleration
 08027E38 = Debug mode: L button check that doesn’t seem to do anything special?
 08027FAA = Debug mode: Walk through walls
 080284E0 = ?
08028534 = Data Script 20 - Overworld Ship mode
 080285A4 = Ship Speed
 08028608 = Debug mode: L button check
 08028622 = Collision detection (10 of these calls here.)
08028AAC = Data Script 21 - Overworld Hover Ship mode
 08028B96 = Debug mode: L button check
 08028BB0 = Collision detection (10 of these calls here.)
080290F4 = Data Script 1B - Climbing wall
 0802910A = Debug mode (Nothing special?)
 08029110 = Idle climbing animation (when not moving)
 0802914C = Climbing right animation
 08029156 = Climbing left animation
 0802915E = Climbing up/down animation
 0802920E = Hitting wall/dead end animation
 08029262 = Animation before climbing up/hitting ground
080292FC = Data Script 1C - Climbing rope
08029570 = Data Script 1D - Walking rope
08029810 = Unused? Loads a value from 02000474
08029838
080298C0 = Data Script 1E - Sand
 080299AE = Movement speed (full)
 080299A2 = Debug mode (Nothing special?)
 08029C94 = Debug mode: L button check
0802A124 = Data Script 22 - Sand (World Map)
 0802A150 = Movement speed (full)
 0802A1BC = Debug mode: L button check
 0802A212 = Collision detection (6 of these calls here.)
0802A52C = ?(pixelDataAddr,length) - Apply palette swap on pixel data/not palette itself. (From data at 080208A8/6th entry/Grayscale.)
0802A550 = ?(size in bytes) Mini-tiles conversion
0802A5E4 = Tilemap conversion ; (Note: Place 08021704 in RAM, call it.)
0802A650 = ?(room, ?) //Decompress palette data? (I think? And misc?)
0802A6B8 = ?(room) //Decompress map/palette/tileset data? (I think? And misc?)
0802AA74 = ?() - Fixes camera to character/previous position post-battle?
0802ABBC = ?(,,) = Likely copies row of tiles to VRAM.
0802AC90 = ?(,,) = Likely copies column of tiles to VRAM.
0802AD84 = makes camera follow PC somehow
0802AF9C
0802B1A0 = Copy_tiles_graphics(from_x,from_y, to_x,to_y,width,height) //Must research ; Only copies 12-bits of graphic inds.
0802B2D4 = copy_tiles_graphics_animate(address of sequence, to_x, to_y) //Calls 0802B1A0, but advances the tile.
0802B344 = Copy_tiles_g_h(from_x,from_y,width,height,to_x,to_y) //Calls 0802B1A0
(080201E8) 0802B38C = Copy_tiles_height(from_x,from_y,width,height,to_x,to_y) //Copies everything but 12-bit graphic id.
(080201F0) 0802B450 = Copy_tiles_graphics_relative(from_x,from_y,width,height,to_x,to_y) ; Only copies 11-bits of graphic inds.
0802B590 = copy_tiles_all_relative(from_x,_from_y,width,height,to_x,to_y) (Copies all data of tiles from tilemap & height map.)
0802B620 = Sets bits at 02030D64:0E00 to arg. (Unknown)
0802B63C = Coord. File: Copy tile.
0802B6E8 = u16-bit reader(address ref) ; (Arg should be the address of an address that points to value; Value read in bytes.)
0802B700 = Coord. File: Copy tile(storyflag) //Copies Height
0802B71C = Coord. File: Copy tile(storyflag) //Copies Graphics
0802B738 = Coord. File: Copy tile(storyflag, graphic or height flag) //Only does entry for matching flag.
0802B7E0 = Get_map_coords(gmap_num, address) Gets x,y,w,h (all bytes), puts it at address. In 32-bits. If w/h are 0, its x100.
0802B828 = Decompress tilemap/heightmap data
0802B878 = Load world map tilemap section(layer,slotx(1-bit),sloty(1-bit),wtilemapfile,forceLoad)
 If worldmap tilemap already loaded, skips reload unless forceLoad!=0.
 forceLoad also loads map into VRAM, so used when World Map is entered.
0802B998 = World Map (file x197=Map List; 0x088F1748) = Load World Map?
0802BD08 = Copies map section. (srcx, srcy, desx, desy) and updates. (Updates if in area.)
0802BDD0 = Copies map section. (srcx, srcy, desx, desy) and updates. (Updates unconditionally.)
0802BE4C = World Map (0802ED34 = World Map File Indexes : Tilesets, etc.) = Might load tileset data when you first load the map?
0802C088 = I/O = Might apply the tilted shake… Also applies BG Mode.
0802C174 = Loads next horrizontal line of tiles into VRAM. (Should be called when moving north or south.)
0802C1F4 = Loads next vertical line of tiles into VRAM. (Should be called when moving east or west.)
0802C240 = Calls both functions above… 
0802C4D8 = 
0802C58C = World Map (0802ED34 = World Map File Indexes : Tilesets, etc.) - Might update tileset data as you move around the map?
0802C864 = 
0802C8A0 = World Map VRAM stuff to RAM. (For when entering menus?)
0802C98C = World Map (Tilesets in RAM to VRAM) (Also updates BG1-3 CNT)
0802C9C8 = 
0802CB08 = 
0802CB64 = 0201C000 or 02020000 to Char Base. (Function listed at 02003610.)
0802CC74 = 
0802CC88 = 
0802CC9C = Tile animation data (Stuff like water) conversion?
0802CD4C =
0802CD70 = 
0802CD94 = Scan visual effects data (Blend data/blend animation)
0802CE4C = Tile layer visual effects (Sun rays in Madra) conversion?
0802CEA0
0802CEB0
0802CEC0
0802CF10
0802CF7C
0802CF90
0802CFA4
0802D088 = World Map Lighting (Sea of Time / Gambomba Statue) arg=4th byte in map data (6-bit) *GS2-exclusive
0802D23C = Height Map 0 - Flat ground (heightDataPointer+1,x,y)
0802D248 = Height Map 1 - Left/Right stairs
0802D268 = Height Map 2 - Up/Down stairs
0802D288 = Height Map 3 - / (Corner tile)
0802D2B0 = Height Map 4 - \ (Corner tile)
0802D2E0 = Height Map 5
0802D324 = Height Map 6
0802D370 = Height Map 7 - Pillar? (Based on data at 0802EDC4) (Not an index to Arg 1/Arg2/Arg3, but... (value * (Arg 2 - Arg 1))
0802D394 = Height Map 8 - Left half of tile's height is Arg 1, right half is Arg 2.
0802D3AC = Height Map 9 - Top half of tile's height is Arg 1, bottom half is Arg 2.
Below: Both X and Y should be 0x0 to 0xF of tile. ; And table is index to which of Arg 1, Arg 2, or Arg 3. ; A to D may be for slanted walls.... Basically where the slant could fit in a rectangular 8x16 box or something... Interesting way of doing it, I must say…
0802D3C4 = Height Map A - Based on data at 0802EEC4 [X<<4 + Y]
0802D3D8 = Height Map B - Based on data at 0802EEC4 [X<<4 - Y + 0xF]
0802D3EC = Height Map C - Based on data at 0802EEC4 [Y<<4 + X]
0802D400 = Height Map D - Based on data at 0802EEC4 [Y<<4 - X + 0xF]
0802D414 = Height Map E - Bottom half = Arg 3 ; Top left corner = Arg 1 ; Top right corner = Arg 2
0802D438 = Height Map F - Top half = Arg 1 ; Bottom left corner = Arg 2 ; Bottom right corner = Arg 3
0802D45C = Get height function(layer,x,y)
-GS2 Exclusive:
0802D4D8 = Height related.(layer,x,y) Returns tile type (0-15)
0802D530 = Height related.(layer,x,y) Returns tile type (0-15) Returns 0x63 if tile type is 7, and first and second height values are not the same. (Perhaps 0x63 is special meaning for pillar?)
0802D594 = Height related.(layer,x,y,radius) Returns highest height from 5 numbers: Current location, Up/Down/Left/Right by radius.
0802D600 = Height related. setHeight(x,y,layer,height by tile) Makes sure the x/y location is of height by editing heightmap/ ensuring there’s an entry in height table.
0802D644 = Height related. Get height function(layer,x,y) (Returns 8x8 tile number?)
-end of GS2 Exclusive
0802D658 = Height related. Get height type(layer,x,y)
0802D6B0 = Tilemap related. Get event id(layer,x,y)
0802D6E8 = set event id(layer,x,y,value)
0802D71C = Height related. - For pillars? *GS2-exclusive? (x,y,layer,pillar height?)
0802D7B0 = Height related. - For 8x16 slanted walls. *GS2-exclusive? (x,y,layer,pillar height?)
0802D87C = Player's check height function? (npc ram address, coords address)
 Probably not player specific, but just a check for if movement can take place.
 0802D91E = Load ground elevation
 0802D954 = Maximum fall distance
 Returns:
 -1 = Destination too low.
 0 = Do move.
 1 = Destination too high.
 2 = Event FF / No movement
0802D958 = Height related. (npc ram address, coords address) (Exactly like the above, but without fall limit.)
 This is for Hover *GS2-exclusive.
 Returns:
 0 = Do move.
 1 = Destination too high.
 2 = Event FF / No movement
0802DA24 = ? (Probably height related?) (coords address) (For wall climbing ; Does y-z in lookup.)
Returns:
 -1 = Event FF / No movement.
 0 = Do move.
0802DA88 = World map stuff…. (coords address) Returns event id from World Map tilemap. *GS2-exclusive; just for detecting FF?
0802DAC0 = (coords address) Might return terrain type for pixel. (Used for determining battles? And maybe collision?)
0802DB64 = (unused, coords address) Returns -1 for solid, 0 for not solid. (Normal walking and sand, collision detection.)
0802DB88 = Collision detection for ship. *GS2-exclusive
0802DBD0 = Collision detection for hover ship. *GS2-exclusive
0802DC48 = Get World Map Battle Background
0802DCBC = write(r0,r1,r2) , [[03000020]+4,8,C] Related to camera?
0802DCD8 = (Not sure if used?)
0802DD08
0802DD70 = May make table for tilting data. (?,pointer to [03000030]+C/data on current position,pointer to where to write data)
0802DE8C = Sprite Viewer
 0802E0C8 = Keypad 4x4 grid, and panning when Start is held.
 0802E126 = Start - NPC’s shadow
 0202E14E = Which column in grid is selected.
 0202E168 = Animation (First column, L/R next animation from 0-99)
 0802E1E0 = Sprite (Second column, Start+L/R=next sprite section, L/R=Next sprite)
 0802E28C = Priority (Third column, L/R changes priority from 0-3)
 0802E2FE = Palette (Fourth column, L/R changes palette from 0x0-0xF)
 0802E376 = Interact - A button can activate animations for layers 1, 3 and 4, as well as turn on/off layers 2, 3, and 4.
 0802E3EA = Select=Reset animation
 0802E402 = B=Background color
0802E444 = getNextSpriteIndex(currentValue,op) Used in Sprite Viewer.
 if op=0, return currentValue, if op=-1 or 1, add this value else op gets nearest index in table: 0802F064
0802E4C8 = Sprite Viewer: Sprite Rotation?
0802E6B4
0802E6D8
0802E6FC
0802E76C
0802E7A8


Data:
0802E89C = Object shadow graphic (uncompressed)
0802E91C = Enemy sprite reference table


0802EADC = 


0802EB4C = 


0802EB90 = Battle Positioning Variables (sprite stretching, party spacing, relative positioning, camera rotation)


0802EBC8 = Y cordinates used to animate sprite position when above ground. (Float effect)
0802EC48 = ? “11” could stand for End Script? (Or something else?)
0802EC4C = Might be directions, but don’t know.


0802ED34 = World Map File Indexes (Grassland, Snow, Waterfall, Snowstorm (Prox area))
 0000019A = Palette
 0000019B = Animation data
 0000019C = Terrain Tileset
 0000019D = Tileset 1
 0000019E = Tileset 2
 0000019F = Tileset 3
 000001A0 = Tileset 4
 000001A1 = Animation Tileset 1
 000001A2 = Animation Tileset 2
0802EDC4 = Height map data - Represents solidity of O.
0802EEC4 = Height map data - Represents various diagonal solidity.
0802EFC4 = Height map code pointers
0802F004 = World Map Battle Background Editing!




0802F054 = Sprite Viewer: Background colors
0802F064 = Sprite Viewer: Sprite sections (Start+L/R)


0802F098 = Movement scripts. (Repeating) Commands 0x1A-0x25, and 0x11.
 0802F140 = Gives you the ability to move your character. (Normal)
 0802F1D0 =


0802F204 - Actor script functions
0802F2DC = NPC functions for setting, adding, and test checks… Used with commands 0x16, 0x17, and 0x18.
0802F380 = Room Data reference table (12 bytes per entry) (Just indexes to MFT map data, palette, and tilesets.)
08030310 = ?
08030320 = Free?


 
08038000 = Menu/text stuff


08038258 = called by 080CF8A8…


ARM:
08038438 = text_getNextChar(sp) ; navigates through last decompressed char's tree for the next char. ; Returns next char.
0803857C = init_text(sp?, textIndex) ; This navigates to the address of the text string.
080385E0 = Reads font graphics, places in VRAM, probably text char based.
 (either panel or text scroll pointer?,
  text character,
  x pix,
  y pix (0x0-0x1F),
  font pointer)
 Return: character width
          Called to render text in battle  r1=text character, [sp]=font tileset?
          r2 increments by 5 or 6 each successive call - xpos?  if so, r3=ypos?
 - transfers text graphics to 06002500 section only.
 - bugged for italics in English version (font pointer=0)  Bug is wrong entry length. (see Japanese version.)
 - only used with non-italic font.
080388FC = Used by Reveal… possibly to label tiles to not render on. ???
08038B14 = Icon decompressor - Only for 00-0F values.
08038D90 = Similar to below, but more complex?
08038E30 = Converts icons from byte array to 4-bit array (16-colors) ?


Thumb functions:
FIFO resource table management.
08038EB0 = getNewEmptyResourceSpace() ; returns pointer (get from end of list)
08038EDC = freeResourceSpace(pointer) (remove from beginning of list - could also free from middle of a list, but only that slot would get freed.  - Just changes space pointers.)
08038F08 = resetResourceSpace() - Frees all resource slots.
08038F40 = init for Field()
08038FA8 = (srcTile (10-bit), destTile (10-bit))
 -Copies bottom of srcTile to top of destTile. Clears bottom 5 rows of destTile.
 -Used for bottom of party panel in battle.
 -srcTile called with 0xFxxx, but the F bits are unused.
 -r9 (=sp) is also an unused parameter.
08039004 = init for Battle(djinniTutorial)
080390B8 = Copies map to mapbase in VRAM. (This function is added to 02003610 list with priority 0xC80.)
0803911C = clearBox(x, y, width, height)
 -Calls function that unflags text used in area. (Freeing text vram.)
 -Replaces map tiles with transparent blue (field) or black (battle) tiles.
080391C4 = drawPanelByType(pnlPntr) (Used when supporting formats like battle log.)
 -Only used in createPanel (and in opening/closing animation)
08039260 = createPanel(x, y, width, height, flags) Return pnlPntr
 flags:
 001=Unused?
 002=Turn off opening animation
 004=Unused?
 008=Update bg? - Use second text vram bank (06002500) - Used by battle log (Battle only?)
 010=Unused?
 020=0=Clear bg, 1=with bg? (Used with above 008 flag)
 040=?
 080=?
 100=?
08039374 = wait until panel is displayed (pnl_pntr)
0803939C = closePanel(pnlPntr, skipClosingAnimation)
080393FC = clearPanel?(pnlPntr) Calls below two functions. (Ignored for Battle Log format.)
08039418 = drawPanel(pnlPntr)
08039430 = clearResourceSlots(pnlPntr) - clear_portrait (?)
08039454 = clearPanel(pnlPntr, x, y, width, height)
 -Coords in pixels, and relative from panel position.
 -Calls unflag text.
 -Uses panel’s blue color.
 Old: (Wrong) text_display(?,?,?,?,text_index,?) //Used in Settings menu. (Ex: Normal, On, Off, etc.)
080394E8 = setEndOfResourcesPntr(pnlPntr)
08039500 = add_resource_slot(pnl_pntr, resource_pntr) //Return pnl_pntr/probably not intentional.
08039510 = freeResourceSlot(resourcePntr) - De-allocates sprite too.
0803954C = (pnlPntr, textOffset, xPix, yPix, ref ?, 0=resize panel with text/1=fixed size) - Link text string to panel? Other properties? - italics? scrolling text
080395FC = (pnlPntr, textOffset, )


 -- 06002500 = Battle - Non-italic text not fixed on 8px Y boundary
080396A0 = CLear text (not on panel) (e.g. enemy names as you select one)
080396BC = Clear text (on panel) (used in battle djinn menu for the purpose of replacing in-menu text immediately)?
080396DC = text init()? - for unfixed non-italic text (not on panel)
0803972C = ?(?) - updates state (copies over palette number [+0x16], text effect [+0x18], and Y pos? [+0x1A].)
08039754 = ?(?) - height set for how much to shift text up in battle log?
0803975C = battle log - copy second row to first row(source line number to copy to first position- “1” used) - argument might be how many lines to advance on button press?


080397E0 = ?() - Processes the three text crawl entries? - called every frame
08039864 = dialogue_properties - includes dialogue speed/pacing, palette instruction usage, and maybe more (list of 30 text instructions at    #08039910); maybe voice
 0803998C - Text instruction 3 (New Line)
 080399D8 - Text instruction 1 (New Panel)
 08039BBC - Text instruction 2 (End Text)
 08039BEE - Text instruction 5 (Short Pause (20 frames))
 08039BF8 - Text instruction 6 (Long Pause (120 frames))
 08039C16 - Text instruction 4 (Pause (60 frames) - no button check)
 08039C2E - Text instruction 8 (Palette)
 08039C60 - Text instruction 9 (Text Effect (uses other values for varied effects such as bold, will record later))
 08039C88 - Text instruction 10 (Text Shift (shifts text vertically by the pixel))
 08039CA4 - Text instruction 7 (End Text Effect)
 08039CBC - Text instruction 15 (Panel Animation (only has one instruction?))
 08039CE4 - Text instruction 0 (no instruction?) and 30 (Yes/No Option)
 08039CF0 - Every other instruction (they are handled differently or otherwise have no effect)
08039ED0 = Panel opening/closing animation()
08039F94 = Coord calculation for panel opening/closing animation(0=opening 1=closing (Saves coords to know what to clear.))
0803A054 = massPaste(destination, value (16-bit), width (in 16-bits)) Returns postDestination. - Used to make panels.
0803A084 = drawPanel(x, y, width, height) - Only sets map data. (Supports Normal and Mind Read.) - Calls unflags text too.
0803A1C0 = drawPanel(x, y, width, height) - Similar to above (without Mind Read)
 -Might be for animated dialogue? (Research needed)
0803A2B0 = (x, y, width ,height, frameless)?
 - Sets up map data to use 06002500. (battle only)
 - Old: Is this for making copies of text content? (Research needed.) See the battle log to experiment. I assume they wanted to move the text over to the edge, and a normal panel doesn't allow for that. (x,y,w,h,?)
0803A3B8 = ? Probably returns whether text has been fully displayed (1) or not (0).
0803A3E4
0803A404 = Sets defaults? (Research)
0803A448 = init() - Field
0803A4B0 = init() - Battle
0803A530
0803A54C = Displays text (text-id) Doesn't wait until displayed. (Battle log only??)
0803A5E0 = Text display (accounting for animation durations?) Waits until old text is fully displayed, displays text, and waits until that is fully displayed. Arg is (text-id) (Battle log only??)
0803A60C = (panel pointer, textID) - Used only by Djinn Help menu - italics scrolling text/no panel changes?
0803A668 = Sets two values depending on arg. First value causes only the first word to show up in a string, along with "...", second value is unknown.
0803A69C = ? (textID,x,y,properties? (0aaabbbb = a=voice, b=flags)) (Dialogue box seems to re-size itself to fit text.) - italics? scrolling text
 0803A6C2 = Voice ID written to #02032284
0803A7AC = ? (Has a call to above.) (text,?) (Seems to be centered, but the top of the box starts halfway down the screen.) Mainly used in Pause menu and File menu.
0803A8C8 = Called every frame - Field and Djinni Battle Tutorial
0803A8D8 = Called every frame - Battle
0803A8FC = Italic font related.
0803AAA4 = Get pixel width of italic string.(str_addr)
0803AAE4 = Italic font (Normal) (buffer, pnlpntr, x, y) - Apparently NOT italics - research this. (likely non-italics with variable spacing?) or both?
0803AC60 = (textPntr (if 0, start of text buffer), pnlPntr, x, y)
0803ACD4 = Fixed font (Normal) (text_pntr (16-bits), pnl_pntr, x (tile), y (tile))
0803AE14 = stat truncation [for if stat digit count > menu display count] (sp, stat, char_display_len) Return modified stat
0803AED8 = insertCountableString / insertNameString - accounting for singular/plural changes.
  (if not 0, add [0x20][0xA][0xA](parsed string)[0xA][0x8][0x20] to text (why?),
   source text address (containing text commands to parse),
   destination text offset/position,
   ram text bank address,
   text command argument,
   0=singular/1=plural,
   ref -s/-es state (ref in case text command [25]/etc? should be used in parent function?))
  Returns text offset finished at.
- Applies a, an, some, the, -es, -s, etc.
- text command argument: (see text data, subtract 1, see below table)
 0=No prefix/suffix. (string unchanged, but it skips [29] command at the beginning if there is one.)
 1=Singular - Do a/an/some/the prefix regardless of quantity.
 2=Plural - Do -es/-s suffix regardless of quantity.
 3=Singular if 0/-1/1 quantity / Plural otherwise.
- used by text commands [18] (pc), [19] (class), and [20] (item).
0803B094 = decompAndParseText(textID, flag on whether to remove text var entries (why?)) - Function with Text Commands code. - Main text decompression/parsing.
String With Box Boundaries (Panel dimensions without panel code): (Will need to rename these.)
0803B794 = dispStringOnPanel(text offset, ref x, ref y, ref width, ref height, ref ?, flags: 0=Normal spacing 1=Justified spacing? 2=Skip text check) - Will try to force panel boundaries to fit in screen.
0803B868 = dispNormalStringOnPanel(textID, ref width, ref height)
 -Decompress string and show on auto-adjusted convo box? 
0803B880 = dispNormalStringOnPanel(textID, ref x, ref y, ref width, ref height)
-Decompress string and show on panel.
0803B8CC = dispJustifiedStringOnPanel(textID, ref x, ref y, ref width, ref height)
 -Decompress string and (Almost same as above, but calls second function with “1”.)
0803B918 = dispNormalStringOnPanel(text offset, ref width, ref height, ref ?)
 -Possibly calculates width/height needed for text. - Left-aligned text?
0803BB58 = dispJustifiedStringOnPanel(text offset, ref width, ref height, ref ?)
 -(0803B794 will call this, or alternately call 0803B918.) - Justified text?
0803BDE4 = (panel pointer,characters to draw (bbaa ; b can be 0 to omit),x,y,)
 - Returns width (of the one or two characters)
 r5 = 
 r6 = 
 r7 = r1 = characters to draw (bbaa)
 r8 = r0 = panel pointer
 r9 = r3 = y
 sp, 0x0 = 
 sp, 0x4 = 
 sp, 0x8 = 
 sp, 0xC = r2 = x
0803C068
0803C170
0803C198 = (pnlPntr, unused, x pix, y pix)
0803C274 = draw non-italic fixed character
 (panel pointer, text character, x (tile), y (tile), layer? (0=BG?/1=Sprite?))
0803C378 = (panel pointer,tile value,x,y,palette)
 - setup related to menu/screen post-title screen (?)
 - just sets a tile’s palette. (X000|tileValue)
0803C40C = scaling?
0803C548
0803C9AC = Calls 0803CA20 with r2=0x7FFFFFFF ; (Is r2 max length of text to get?)
0803C9BC = get text (text index, buffer, length of string) (Used in battle status menu.)
0803CA20 = Possibly for inserting text. (Used with Text Commands) 
^ Decompresses mostly as raw text, so recursive insertion isn’t possible.  Args: textIndex/src, des, length (length is 0x18.)
0803CB0C
0803CB1C
0803CBA8 = (Panel graphics to 06000100)
0803CBF8 = (Panel graphics to 06000100)
0803CCA8 = Clear text var list.
0803CCD0 = Set text var (id, type) ; Variables are manually set in code prior to calling dialogue function.
0803CD08 = Get index of set text var? (type,flag on whether to remove entry.)
type: (Related to above 3 functions.) ; Maximum of 8 vars at a time.
01 = PC/Enemy
02 = Item
03 = Class
04 = Ability
05 = Number
06 = Map/room
0803CD5C = advancePauseCheck(?) - Commands 5 / 6 (pause commands) - button check to shorten pauses.
0803CDB4 = advanceDialogueCheck(?) - Commands 1 / 2 - button check to go to next dialogue.
0803CE1C = Clear/remove all panels??
0803CE64 = show_dialogue(text_index,show_panel,y_pnlOffset) show_panel should be 0 or 1,
 y_pnlOffset should be x0-xA.
 X and Y centered, but Y adjustable.
 italics? scrolling text
0803CF60 = text(textID)
0803CF6C = appendText(textID)
 -Used for appending summon requirements (Highest requirement first) when obtaining summon tablets.
--- 256(?) color text / No special formatting? / Credits ---
0803CFA0 = draw letter?(italicFontLetterAddr+2,offset,num_to_store(color))
0803CFD0 = draw letter with shadow? Italic font related(,char,x,y) Returns character's width.
0803D020 = draw text?(textID, ?, unused) - Only called from 081A0C12? (Credits)
0803D178 = Place in RAM and call “0803857C = init_text(sp?, textIndex) ; This navigates to the address of the text string.”
0803D1C4 = (Thumb) Does exactly the same as “08038438 = text_getNextChar(sp) ; This navigates through last decompressed char's tree for the next char. ; Returns next char”
0803D2D0 = init() (Set portrait slots to 999)
0803D2F0 = getPortraitID(spriteID)
0803D3C0 = addFramedPortrait(?,?,x,y)
0803D450 = removeFramedPortrait(spriteID)
 -Gets sprite slot based on portrait ID, and deletes panel that uses it.
0803D4BC = Item icons - Pointer entries
0803D4D0 = Ability icons - Pointer entries
0803D4E4 = (icon related) - Maybe [03000048] Debug Menu Main Icons (43 of them… starting with Attack. - All icons blank.)
0803D594 = itemIcon(ability,?,?,?,?) - Probably unused. (No references)
 -(Assumes [PsyAddr+4] is item icon ID, even though it is ability icon ID, maybe the tables were combined at one point?)
0803D5C4 = itemIcon(itemIconID,?,?,?,?)
0803D680 = item icon(item, dispFlags 01=frame 02= 04= 08= 10= 20=) (Research)
0803D8AC = item icon(item, dispFlags (see above), spriteSlot) (Research)
0803D8F0 = Status effect icon? (Calls below one.)
0803D92C = Item icon - Load/display? (icon,frame)
0803D98C = Psynergy icon - Load/display? (ability,frame)
0803D9BC = Psynergy icon - Load/display? (icon,frame,,,)
0803DA78 = Status effect icon?
0803DAB0 = Display Character Portraits.
 0803DB48 = Index of character portraits in file table.
0803DB50 = Return
0803DB54 = Display icon graphic? (Including item & psy icons, and frame?)
--Unknown Debug feature that may relate to Psynergy and Items--
0803DC1C = [03000048] Initiation
 03000048:
 348 = 00000000
 34C = 00000000
 350 = 00000000
 39A = 0000
 39C = 0000
 39E = 0080
 3A0 = 0020
 394 = 0000
 3B8 = 03E7


 072 + x*0x34
 072 = 0000
 0A6 = 0000
 0DA = 0000
 10E = 0000
 142 = 0000


 1DE + x*0x34
 1DE = 0000
 212 = 0000
 246 = 0000
 27A = 0000
 2AE = 0000


 176 = 0000
 1AA = 0000
 00A = 0000
 03E = 0000
 012 = 0000
 046 = 0000
 2E4 = xxxx Sprite Allocation ID (for arrow graphic)
 2E6 = xxxx vram offset in tiles (for arrow graphic)
 2E2 = 0000
 2FA = 0000
 316 = 0000
 305 = x & 0xF3 & 0xEF | 0x20 & 0xFC & 0x3F
 307 = x & 0xC1 & 0x3F | 0x40
 309 = x & 0xF3
 3E4 = end / free space
0803DD24 = 0s certain things. (More init?)
 03000048:
 348 = 00000000
 39A = 0000
 if [39E] & 0x80:
  39C = 0000
  39E = 0000
 3A0 = 0000
 394 = 0000
0803DD68 = Add icon to menu?(type,icon_num) ( Unused? :( )
 03000048:
 394 = icon count
 354 = xxxx *16 ; type
 374 = xxxx *16 ; icon_num
0803DD98 = Sets up item menu?
r4 = [03000048] + 0x354 + [[03000048]+0x39C]*2
r5 = 
r6 = 0
r7 = type
r8 = icon_num
r9 = [03000048]
r10 = [[03000048] + 0x39C]
r11 = 0
00 = see r4 above (held during function calls)
04 = [[03000048] + 0x394] ; icon count
0803DEA8 = Return
0803DEAC = Count entries in entry lists... ; arg=0 for 7-entry list, arg=1+ for 5-entry list. ; Returns address of disabled slot.
0803DF00 = Links 0803DF24 to loop list.
0803DF14 = Links 0803DF24 to loop list.
0803DF24 = Magnify icons animation?
0803E488 = (Has a pointer to the |> graphic in Warp & Flag menus.)
0803E5A8 = (type 02=Item 04=Psynergy,) -Has 2 text calls... "You don't have it.", "You don't know it."
0803E6D8 = ? Remove [03000048] at end of function.
0803E774 = ?(set +396, set +398) Basically moves the icon menu. (x,y)
0803E7AC = Calls below function with ([03000048],0) and ([03000048],1)
0803E7C8 = (Has a pointer to the |> graphic in Warp & Flag menus.)
0803E8EC = Navigate to selected item? ([03000048])
0803E918 = Button presses(arg) (Calls below functions.) (Entirely unused?)
0803E998 = Button presses (Calls below functions.) (-1 to go back, or number based on icon and item.)
0803EA54
0803EB2C
0803EBDC = Right arrow key
0803ED98 = Left arrow key
0803EF48 = (EDIT: Icon that is “ON”) (1 for lower menu, 6 for higher menu?) Icon in main group 1 or 6. ([03000048],0)
0803EF8C = Icon in main group 1 or 6. ([03000048],0) and call 0803F6C8.
0803EFD4 = ?
0803F004 = ?(,) 
0803F1D4 = Icon related - loadIcon(type, value) returns spriteSlot (-1 if n/a)
types:
 01=Blanks
 02=Item
 03=-1
 04=Psynergy
 05=-1
 06=Blanks
0803F234 = Icon related - loadIcon(type, value, spriteSlot (-1=new slot), ) returns spriteSlot (-1 if n/a)
 types:
 01=Blanks
 02=Item (3A)
 03=-1
 04=Psynergy
 05=-1
 06=Blanks
 07=Item (2A)
 08=Status
0803F2E4 = Icon related - (type, value, entry address in [03000048] table, )
0803F3C8 = A button - Seems to keep selected icon, and go to a new list. (The 5 entries of 0x34 bytes.) - I think it “prepares” for the next menu, without actually loading it.
0803F60C = Return
0803F610 = Return
0803F614 = Return
0803F618 = Return
0803F61C = Return
0803F620 = Return
0803F624 = Warp & Flag menu’s |> arrow related. (Has a pointer to the |> graphic in Warp & Flag menus.)
0803F698
0803F6C0 = 08014274
0803F6C8 = Main menu icon related()
0803F758 = May relate to removing a sprite?
0803F778 = Psy/Djinn/Item/Status Menu (With Resulting actions. AKA calls to 08F8xxxx)
0803F800 = Call Party Members HP dialogue; and refresh. (For above)
0803F810
0803F818 = Calls [03000048] init, and etc. ()
0803F82C = ?(item_selected) Returns ? (-1 to go back, or number based on icon and item.)
0803F86C = Room name (Disappears in seconds, so it is for room entrances.)
0803F900
0803F93C
0803F968
0803F974 (GS2-exclusive?)
0803F9C0 = ?(window color, window brightness)
0803FB60
0803FC38 = Init 030000D0
0803FD14
0803FD28 = Settings Menu - I know the Window Color and Window Brightness palettes are loaded.
080400E8 = Pause Menu: Settings
 080403B4 = 4422 - “Change the window’s color.” (r9 gets added to this to change description based on row)
080405AC
080405DC
08040614
08040628 = Pause Menu: Main - Load/display menu
 080406BC = 4436 - “Save your quest”
 080406C6 = +1 - “Sleep”
 080406DC = 4438 - “Change settings”
 080406EC = Debug Mode on? Display following only if true (skip if BEQ = 0) 
  080406F0 = 4440 - “Rough Menu”
  08040700 = +1 - “Debug Menu”
  0804070A = +2 - “Restart quest”
08040798 = Pause Menu: Main - Above, but includes Debug's L/R, and icon, items you can select.
-- GS2-exlusive --
0804098C
080409A4 = Music menu related...
080409DC = 
080409F0 = Music menu (Panel contents creation.)
08040A48 = Music menu (Contents & Interactions... Music works too!)
08040C60
08040C78
08040CB0
08040CC4 = Full PP and Money menu. (Panel contents creation.)
 08040D02 = 4443 - “Full PP and Money”
 08040D10 = +1 - “Sound Test”
 08040D1C = +2 - “Battle Test”
 08040D28 = +3 - “determined by height”
 08040D38 = +4 - “Change of hero”
08040D70 = Full PP and Money menu. (Contents & Interactions, but not resulting actions.) Arg is which item to select, but also returns selected item.
08040E64 = Give Red Key and Blue Key to Felix. Warp to 101:4. (Jupiter lighthouse, near a red door.)
08040E84 = Warp 2 
08040ED0 = Return
08040ED4 = Warp 3
08040F14 = Warp 4
08040F58 = Warp 5
08040F90 = Warp 6
08040FE4 = Warp 7
08040FF4 = Warp 8
08041004 = S. Warp-related
0804101C = S. Warp-related
08041054 = S. Warp-related
08041068 = S. Warp-related
080410F8 = 9 Special Warps menu - Main (May set/unset flags, give items, set psy shortcut, etc.)
08041204
0804121C
08041254
08041268 = Display Ability name (ability_ID); if ability_ID = 0, read uncompressed “----” instead 
0804128C
08041350 = Utility menu - Main
-- End of GS2-exclusive --
080415A0 = Non-italic font? (Unused?)
 (pointer to current character in mapping? (wram???),
  pointer to current character in mapping? (vram???),
  text character/symbol to apply (Maybe for “ or o in Japan?),
  palette pointer?)
 - May apply a symbol on another symbol.  Maybe it could be used in Japan version, unsure.
080416CC = Non-italic font (Main) - extract text graphics to 06001000 section and updates mapping.
 (text pointer (16-bit text),
  wram top layer -- [0300003C]+8+offset where to place text map tiles,
  vram top layer -- 06002000+offset where to place text map tiles,
  x (0-7))
 r5 = iram allocated size (0x800)
 r6 = r0 - text pointer (16-bit text)
 r7 = temp (various things)
 r8 = 
 r9 = 
 r10 = 
 r11 = [0300003C]
 r12 = 
 sp, 0x0 = palette? (x000)
 sp, 0x4 = font pointer (file 0x13 / non-italic font)
 sp, 0x8 = iram heap (0x800 bytes allocated.) (for making untiled text graphics - 0x100 bytes/row)
 sp, 0xC = r2 = vram top layer -- 06002000+offset where to place text map tiles
 sp, 0x10 = r1 = wram top layer -- [0300003C]+8+offset where to place text map tiles
 sp, 0x14 = 
 080418CC = convert iram heap from 8bpp to 4bpp
 0804193C = 
08041ABC = freeVramBGText(x, y, w, h) - Simply unflags used text tiles that are used in region. (using &0xFC)
08041B68 = called from battle status menu
 - flags all currently mapped text tiles with 2, and unflags all those that are just 1. (refresh function?)
08041C0C = called from non-battle status menu setup / function 080FE274 (appears to zero out some data?)
 (text bank to unflag (0 (06001000) or 1 (06004000)) - also sets whether extended bank is used or not.
08041C50 = Return
08041C54 = place_line/divider_on_panel(pnlPntr,x1,y1,x2,y2) - Will unflag text it replaces.
08041F70 = set_text_color(color) 
08041F90 = set_text_effect(effect)
01 = Bold text.
02 = Floating text.
03 = Shaky text.
04 = Large text.
05 = Rotating letters (Mostly in pairs.)
06+ = Does nothing?
08041FA4 = display_text_italics(text_index, pnl_pntr, x, y) * //Large text
08042010 = display_text(text_index, pnl_pntr, x, y)
080420A8 = display_text_italics(text_pntr, pnl_pntr, x, y) //text_pntr points to uncompressed 8-bit char array. No commands.
080420FC = display_text(text_pntr, pnl_pntr, x, y) //"
08042188 = display_text_fixed(text_pntr, pnl_pntr, x, y)
080421E4 = display_number_italics(number, char_len, pnl_pntr, x, y) //Only used for both numbers in Warp Menu. (At least in this class file.)
08042214 = display_number(number, char_len, pnl_pntr, x, y) //Right-aligned.
08042244 = display_number_fixed(number, char_len, pnl_pntr, x, y) //Right-aligned.
08042274 = Stat label and value (value,,,,HP or PP label) (Use in Party HP/PP dialogue.)
08042314 = (spriteSlot, OAM data?, pnlPntr, x pixel, y pixel) - Hand selector? - ?() Return resource_pntr
0804239C = For graphical arrays (seems to allow for multiple character sprites to appear in menus)?
080423C4
08042408
08042450 = Portrait. (,,,,,) (called via panel/frame portrait)
08042508 = portrait (called via bx r4 from non-battle status menu)
0804256C
0804257C
08042588
080425FC
08042630 = Party Panel Dimensions ?
08042690 = Party Members HP dialogue
080426E0
08042808
0804297C = Giant function related to file menu/screen setup (calls 0803C378, among others)
 -party panel with argument containing flags for things like showing element counts for summons in battle.
08042DAC
08042DC4
08042E28 = UpdatingSaveGamePanel(type (0-2 for Saving…/Erasing…/Copying…))
 -(gets called when saving, copying, erasing, or updating (e.g. after link arena wins) a file)
 Returns panel pointer.
 08042E74 = 29 - “Saving…”
 *Todo: Add the other three file update-related strings (all grouped together after this one)
 08042EA0 = +1 - “off until process finishes.”
08042EEC = Close out UpdatingSaveGamePanel(panel pointer)
 Returns panel pointer. (Always unused?)
08042F10 = Save - checksum/save related (called by 080434EC)(file, srcAddress)
08042FF0 = Erase(file)
080430C4
080431B0
08043230 = Get file index of next empty file. (Checks each file's leader's level.) (Called from the File Copy function.)


Save Menus (with Error Messages)
Returns of functions below can have these: (The used ones listed in my 1-9 number sequence after addresses.)
 0+ = OK, if not otherwise noted.
 -1 = Cancelled/B button hit.
 -2 = Failed to load.
 -3 = Failed to save.
 -4 = Failed to erase.
 -5 = No empty slot available. (to copy to.)
 -9 = Unable to detect backup memory.


0804325C = --------9 = 
 Returns:  0-2? = file?
080432A4 = --------9 =  Detect Whether SaveData exists? (Used at 020083F4 in Map x1 UTIL.)
 - Actually checks/sets whether Difficulty mode, Battle mode, and Update mode should appear.
 Returns: 0-2/100-102? = file?
08043358 = --------- =  Part of Saving… (Calculate checksum at end of function.)
 Returns: 0 = OK
080434EC = --3-----9 = Save(file (0-2)) ; Without Saving dialogue. / Not sure if used.
08043534 = -23-----9 = LinkArenaSave()
080435FC = --3-----9 = Save(file (0-2)) ; With Saving dialogue. / Not sure if used.
08043690 = 1-3-----9 = Save Menu()
08043774 = 12------9 = Load Menu(menu type (1=Continue/4=Battle/6=Update))
0804380C = 123-5---9 = Copy Menu()
080438C8 = 1--4----9 = Erase Menu()


08043978 = selectionbox palette animation - Game initiation/setup 1-1 (inits angle visuals for booting into actual game?)
080439C4 = init() - Game initiation/setup 1-2 (calls 080145A8, stores 08043978 to r0)
080439D8 = de-init() - Game initiation/setup 1-3 (calls 08014644, stores 08043978 to r0)
080439E8 = selectionbox(panel pointer,x,y,w,h) Game initiation/setup 1-4 (gradient used for selected file in savefile select menu)
 08043A20 = Bounds check typo - 0x1D should be 0x13.
08043A64 = PCs display init(panel pointer,x,y,) - Game initiation/setup 1-5 (calls 08020040/08020030 [Palettes setup?], loads 08043B70 to r0)
08043B34 = PCs display de-init() - Game initiation/setup 1-6 (calls 08020048 [related to savefile selection display], loads 08043B70 to r0)
08043B70 = Display PCs - frame loop
08043BEC = Display Djinn Counts (pnl_pntr,save_addr)
08043C30 = File menu related…
 08043C5E = Uncompressed “L” (for level)
 08043C7A = 2915 - “NPC (Class name, for displaying the class Felix is in)
 08043C8E = 000A - “Play Time:”
 08043CB8 = 4661 - “Coins”
08043CD8 = Choose a file menu. - Main (selected file (0-2), Menu Type (Ex:Continue,Save,etc.))
 08043D1E = Continue (x1)
 08043D70 = Battle (x4)
 08043DC0 = Transfer (x5)
 08043E10 = Update (x6)
 08043E60 = Save (x0)
08043E9C = Savefile selection menu init...
 08043EB2 = Savefile selection menu display
 08043F72 = Text string ID 3672 (used to grab map name)
 08043FD0 = Savefile selection menu (mechanics relating to returning to previous menu?)
 08044034 = Savefile selection menu idle mechanics? (character display movements, etc)
 08044062 = Savefile selection menu (changing between file displays?)
  0804413C = Length of menu selection highlight
 0804414E = Savefile selection menu (sound/music related)
 08044230 = Savefile selection menu (???)
 080442AA = Savefile selection menu (Actual File selection with A button)
 ; "(Not clear yet)" only appears in Transfer menu; "Post-Reunion Data" only appears in Update menu.
08044344 = Return 1
08044348 = Letters? (Change name dialogue)
080443D8
08044460 = Hand selector? (Or might just return an arg for it?) - MFT file 506, cursor used in in-game Start menu
08044478 = Calls for items fsr at 08108088? - MFT file 506, cursor used for update/password transfer menu
08044488 = Pen-related (Not for Change name dialogue?) - MFT file 514
08044498 = Change name-related.
080444E8 = Change name-related.
08044558 = Change name dialogue - Main
08044A54 = Return 0
08044A58 = Djinn Dialogue: Venus djinni icon; "t"
08044B80 = Converts pc number to pc number (pc) Returns 0 for anything not 0-7. ; Only used with below two functions, but not sure how it is used.
08044B98 = Party Dialogue: Felix icon; "Felix joined your party."
08044C80 = Party Dialogue: Felix & Isaac icons; "Felix and"
08044DC8 = Summon Dialogue: "Felix can now summon Ramses!"
08044F4C
08044F88 = Header icon. (label,x?,y)
label=Save,Continue,Copy,Erase,Battle,Transfer,Update,Pause,Settings
08045018 = “Save”/”Pause” graphic bobbing/animation
08045048 = calls 0801314C to reset free space in 02 or 03 RAM?
 08045066 = 
080450AC = (Not battle related) [calls 08042314 fsr?]
080450FC = (Not battle related) [framecounter related, calls 03001100]


Battle Stuff
0804519C = Djinn tutorial - Returns Text index (2 sections.)
 If 0x175=0, return 0x2FD2
 If 0x175=1, return 0x3007
080451BC
0804524C = Involves target ranges (menu graphic display)
080452BC = (called twice by 0804537C…)
08045330 = called via bx r4 from 080FE274 (non-battle status menu setup)
0804537C = (Battle status menu related)
080453D0
08045464 = ? (called for battle icons...)
080454A0
080454DC = (Battle related; called when looking at ability list in status menu) = Responsible for loading ability icons?
08045528 = Character portrait assignment (in battle; status menu especially)
08045550 = (Not sure if used or not.)
08045564 = (Not sure if used or not.)
080455B0 = TIME panel (And label, but not the number.) Returns pnl_pntr.
080455DC = (Battle related)
0804562C = (Icon to VRAM?)
080456F8 = (Icon to VRAM related? Calls above.)
08045768 = ? Loop
08045780 = ? Loop
08045794 = (Not sure if used or not.)
080457B0 = ? (text,x,y) (Battle related?) Box re-sized to text, and waits until fully displayed.
080457D0 = Fight/Status menu? & Attack/Psy/Djinn/Summon/Item/Defend menu (menu,flee_icon) ; menu: 0 for Fight menu; 1 for Attack menu
 0804594E = Check summon flags to determine if Djinn menu gets loaded (Summon menu handled within this segment too)
 ~08045F0C = Djinn tutorial stuff.
08046134 = (Battle related)
080461C8 = (Battle related)
08046260 = (Battle related: Psy-gain/lost stuff?)
08046284 = (Battle related: Psy-gain/lost stuff?)
080463D4 = (Battle related: Psy-gain/lost stuff?)
08046414 = (Battle related: Psy-gain/lost stuff?)
080464DC = Psynergy gain/lost list when djinn are used. (With arguments.)
 sp x3C = Whether to display stat changes or psy-gain/lost panel
 08046936 = Class change check; decides between static or flashing arrow icon


08046B08 = Status page. (With arguments?)
 08046B90 = Sound effect when opening menu (x70)
 08046BB0 = Cursor layering?
 08046C64 = Menu panel width
 08046C66 = Menu panel height 
 08046C78 = Description text render width
 08046C7C = Description text Y coordinate
 08046C7E = Description text X coordinate
 08046CC0 = Calls 08045528 (for portrait assignment)
 08046D08 = x18 entries? - Seems to correspond to particular labels (e.g. “Exp”), could be wrong
  08046D38 = Pointer list (label settings/accessibility?)
  08046DA8 = Label list count (default x09, unless the right setting is enabled; unsure what the setting is)
 08046E02 = Button press required to change display (default x01 = A button)
 08046E44 = Sound effect when changing menu display (x70)
 08046E72 = Sound effect when moving down, main status page only (x6F)
 08046EA2 = Sound effect when moving up, main status page only (x6F)
 08046ED6 = Sound effect when moving left, main status page only (x6F)
 08046F58 = Sound effect when moving right, main status page only (x6F)
 08046F74 = Sound effect when moving up or down off of the status effect bar, main status page only (x6F)
 08046F9A = Sound effect when moving down, psynergy and item status pages only (x6F)
 08046FC4 = Sound effect when moving up, psynergy and item status pages only (x6F)
 08046FEE = Sound effect when moving right, psynergy and item status pages only (x6F)
 0804703A = Sound effect when moving left, psynergy and item status pages only  (x6F)
 0804709A = Sound effect when moving down, djinni status page only (x6F)
 080470C4 = Sound effect when moving up, djinni status page only (x6F)
 080470EE = Sound effect when moving right, djinni status page only (x6F)
 08047126 = Sound effect when moving left, djinni status page only (x6F)


 08047200 = Status Ailment Bar - “Normal” label highlight X coordinate
 08047202 = Status Ailment Bar - “Normal” label highlight Y coordinate
 08047204 = Status Ailment Bar - “Normal” label highlight width


 080472B6 = Highlight spacing (from X coordinate)
 080472CE = Label highlight X coordinate
 080472D0 = Label highlight Y coordinate
 080472D2 = Label highlight width
 080472D4 = Label highlight height


 0804731E = Function call to battle sprite display code
Status - Item Submenu
 0804747E = Start (check submenu ID 3)
 080475F4 = Item submenu text label list Y coordinate
Status - Psynergy Submenu
 0804777C = Start (check submenu ID 1)
 08047862 = Load string 2181 = First Ability Description (“?”)
 08047870 = Load string 3400 = “You have no Psynergy.”
 0804789E = Ability Description Y coordinate
 080478B4 = Dividing line length
 080478CC = Name label list = Base Y coordinate
 080478E6 = “PP” label = Left tile (x1F)
 080478FC = “PP” label = Right tile (x1E)
 08047950 = Text colour if unusable in battle (04 - yellow); UNUSED: unusable abilities get filtered out earlier
 08047950 = Text colour if insufficient PP to use ability (02 - red)
 08047966 = Text colour if sealed (09 - pink)
 08047972 = Load string 1477 = First Ability Name (“Nothing”)
 08047994 = Text colour to reset default to (0F - white); prevents previous checks from changing all other text 
 080479A2 = Elemental bullet; non-elemental render restriction
 080479B6 = Element bullet; X coordinate
 08047A5A = Max number of abilities needed before page bar renders (less than 4 will not show the bar)
 08047A6E = (Relative) Tile ID for unselected page tiles
 08047A84 = (Relative) Tile ID for selected page tile
 08047AC2 = Left Arrow tile for page bar
 08047AD6 = Right Arrow tile for page bar
Status - Djinn
 08047AE4 = Start (check submenu ID 2)
Status - Main
 08047D78 = Start (check submenu ID 0)
 08047DA8 = Dividing line startpoint (X coordinate - separates bottom description from the rest of the menu)
 08047DAC = Dividing line endpoint 
 08047DC4 = Loads text line 3359 (“In the back”) - Used for PCs who are not currently in battle
 08047DEE = Loads text line 3354 (“Exp”)
 08047E26 = Current HP value (label)
 08047E4A = Max HP value (label)
 08047E6A = Current PP value (label)
 08047E8A = Max PP value (label)
 08047EA8 = Attack value (label)
 08047EC8 = Defence value (label)
 08047F20 = Loads text line 2915 (for displaying the character’s current class)
  08048078 = Poison check
  0804808C = Venom check
 0804829E = Current HP Check (chooses description text)
  080482A2 = Loads text line 3357 (“Normal”)
  080482A6 = Loads text line 3358 (“Can’t fight”)
 Description stuff (Description is max 0x80 bytes long.)
 080482BA = [sp, 0x34] = Init a buffer for description text. (Its size is 0x100, but only ox80 bytes go in it?)
 020482C2 = If status effect is selected
  080482CC = [sp, 0x30] = Selected Status Effect 
  080482D4 = If Status Effect selected = 0 (“Normal” / “Normal status.”)
   080482D8 = If HP = 0
    080482E2 = Status Effect selected = 0x10 (“You are down. Heal at a sanctum.”)
  080482E6 = Stat Increases calculation for text display. (Current stats - stats not using Stat Increases)
  r9 = Agility Increase value
  r10 = Attack Increase value
  r11 = Defense Increase value
  08048368 = Status effect pointer table (decides what values to display; ranges from death curse to agility debuff)
  r7 = Number to be inserted in text (Default=0) (Stat Increase value, etc.)
  080483E6 = Loads text line 3379 (“Normal status.”)
 080483F6 = If EXP selected, and level<99, load Exp Description
 0804841E = Loads text line 3360 (“Current experience points. [value] to next level.”)
 08048444 = Load description for selected entry.  (If Exp selected and level<99, it is set above.)
 08048446 = Loads text line 3361 (“Use the L & R buttons to switch between characters.”) 
 08048452 = Display description with italics font.
 0804835E = De-init text buffer
  08048368 = Pointer list (unknown; status effect-related?)
 080483FE = Current level check (x62, or 98)
  08048408 = EXP to next level code
 08048464 = ?
 080484F4 = A button press check (done every frame, for going into psynergy menu)
 080485BC = Sound effect when switching characters with R (x6F)
 080485F0 = Sound effect when switching characters with L (x6F)
 08048602 = Begin exit status menu routine
 08048686 = End


0804868C = Djinn menu(pc slot (0-7;0x80+))
 080486C8 = createPanel(x=0,y=4,width=30,height=4,?=0x2A)
 080486EA = ?
 080486F0 = createPanel(x=20,y=9,width=10,height=11,(create type? x01 = visible expansion)=0x6)
 080487DC = Max number of recognized djinn per element - 1 (x13 = up to Venus20, x00 up to Flint, etc.)
 080487E6 = Number of elements recognized (priority of Venus - Mercury - Mars - Jupiter)


 08048862 = createPanel(x=0,y=4,width=30,height=4,?=0x2A)
 080488C8 = Text string 3408 (“Cannot use the same djinni twice.”)
 08048916 = Text string 2481 (first djinni ability description)
 
 08048952 = Text string 3321 (“Ready to summon.”)


 0804898E = Text string 2481 (first djinni ability description)


 080489A2 = Text string 3406 (“You have no djinn.”)


 08048A6C = Text string 1747 (first djinni ability name)


 08048B00 = ?
 08048B3C = Djinn panel page flip check (if >5 djinn, enable pages)
 08048B6E = ?
 08048BA8 = ?
 08048D08 = Text string 3320 (“Your djinni is still recovering.”)
 08048D44 = # of djinn slots in panel
 08048D78 = ?


08049154 = Summons menu.
080499B4 = Checks if item can be used. (pc,item)
Returns:
0 if can be used,
1 if can't (Item, Item Use, or Ability is Nothing; item bestows psynergy; if item is not an Item then if not equipped.)
2 if ability's flag restricts it.
08049A04 = Copies one(?) VRAM tile(fromTile, toTile) (DMA transfer)
08049A30 = Item menu (battle) (?)
 0804A130 - 3404 - “Using this will have no effect.”
0804A134 = Psy menu (,,) (Both panels)
 0804A16E = Description Panel size/location details
 0804A194 = Ability Panel size/location details
 0804A1E4 = Maximum number of icons to display
 0804A2D4 = Load description text list (first entry)
 0804A2F4 = Description X coordinate
 0804A2F6 = Description Y alignment
 0804A33C = Left half of PP label (tile x1F)
 0804A39A = Text colour for ability names and PP costs (unusable in battle - yellow = UNUSED)
 0804A3BC = Text colour for ability names and PP costs (insufficient PP - red)
 0804A3D2 = Text colour for ability names and PP costs (psy-seal - magenta)
 0804A3DE = Ability names (read from list based on starting ID + ability ID)
 0804A3E6 = Ability name X coordinate
 0804A3F0 = PP cost X alignment (not label)
 0804A3F2 = PP cost X coordinate (tile)
 0804A3FC = Text colour for ability names and PP costs (standard colour - white)
 0804A40A = Element ID check: skip icon render code if non-elemental
 0804A41E = Elemental Bullet X coordinate
 0804A426 = Load ability range 
 0804A428 = Check target range: If range = All, manually set icon
 0804A436 = Range X coordinate
 0804A442 = Number of ability names to display
  0804A4EC = “Nothing” - First ability name from list
 0804A45C = Routine for drawing an initial page bar that gets immediately overwritten by a flashier one; worthless
 0804A562 = Left page bar arrow tile assignment
 0804A578 = Right page bar arrow tile assignment
 0804A6D4 = Lower list limit when moving cursor down
 0804A72C = Wraparound target ID (when moving cursor up)


0804A85C = Targeting (user_ID, ability_target_type, ability_range, valid_use_flag [0 or 1])
 0804B296 = Palette swap (red) for “No effect” text label (3331)
 0804B2FA = Enemy ID check; if enemy ID = 344 (real ID 352), use text label 3162 (= “Mystery Man”)
 0804B308 = Enemy ID check; if enemy ID = 347 (real ID 355), use text label 3162 + 1 (3163 = “Mystery Woman”)
 0804B5C2 = Sound effect (x6F) on moving targeting cursor right/down
 0804B5F2 = Sound effect (x6F) on moving targeting cursor left/up


0804B6A0 = TIME stuff in Battle Arena Multiplayer. (Includes the number, but this also calls the panel/label function above.)
0804B7C0 = "This is no time to be running away!" dialog.
0804B87C = Check valid use (at least in battle, possibly elsewhere too) (ability_addr)
Return:
0 = Nothing
1 = HP recovery
2 = PP recovery
3 = Cure Poison
4 = Restore (Cure Stun, Sleep, Delusion, and Curse)
5 = Revive
6 = Remove all status ailments
0804B8B8 = Deals with swapping backline party members into frontline party and vice versa. (Battle Icon Menu)
0804BABC = PC turn initialization (including skipping turns, etc.)
 0804BB26 = Sleep check; skips remaining checks if > 0 (but still does the same thing)
 0804BB32 = Reads block of bytes for Delude/Confuse/Charm/Stun, disables action and writes default data to battle RAM if the latter three are > 0
 0804BB48 = Writes base agility to battle RAM (no RNG)
0804BBA8 = ? (Battle Icon Menu related.)
0804BBD0 = ? (“Waiting for opponent’s input.”)
0804BC08 = Battle Icon Menu - Main (With interactions)
 0804BDD6 = (Only call to 0804BABC?)
 0804BDE0 = (Only call to 0804BBA8?)
 0804BE32 = r6=-1 : ?
 0804BEB4 = r6=0x31 : Switch
 0804BED6 = (Only call to 0804B8B8?)
 0804BEF2 = r6=0x7 : Status (If Debug Mode and Start button pressed, will display enemy data.)
 0804BF46 = r6=0x4 : Flee
 0804BF84 = r6=0xE : Fight
 0804BF8C = Sound 0x9A
 0804C356 = Load ability range (for targeting)
 0804C49C-B56 = (4 calls to 0804B87C.)
  0804C7EC = Is Djinni set check
 0804CB92 = Action confirmation sound effect
 0804CBAA = Calculates PC Agility with 16-bit RNG factored in, then writes to battle RAM
 0804CBCA = PC turn order (dependent on agility rating instead of slot #)
 0804CCC4 = (Only call to 0804BBD0?)


Base Icon Menu
0804CDA8 = Magnify icon?
0804D0DC = Menu initiation. (030000E8 ; and Magnify icon function gets placed in loop list.)
0804D118 = Menu De-initiation.
0804D16C = Menu interaction/button press.
0804D28C = Menu tutorial auto-interactions. (first item selected,last item selected) Returns destination item...
0804D344 = Loads menu icon.(Icon to VRAM.) (pos?,icon) Returns a slot number in 020036E0.
0804D38C = Add icon item to menu. (Max 6) (icon index)
0804D3E8 = Icon menu , Description box next to menu. (y,width,text) Menu is auto-centered. ; text should be 0 to use icon's description?
0804D484 = Icon menu(x,y,width,text?)


Icon Menus
0804D4F8 = Psy/Djinn/Items/Stats menu. (Without stats.)
0804D570 = Psy/Djinn/Items/Stats menu. (Without description.) (Used for tutorials.)
0804D5AC = UTIL menu (New Game, Continue, etc.)
0804D678 = Gold/Silver/Bronze body descriptions based on active menu item.
0804D754 = Password/Link body descriptions based on active menu item.
-Use a password to transfer Clear Data.
-Use two Game Boy(R) Advance systems to transfer Clear Data.
-Saved Clear Data ; Continue anyway ; (Unused because menu only has two icons?)
0804D7FC = Transfer Menu (Password/Link)
0804D968 = Icon Menu: Shop
0804D9A4 = Icon Menu: Sanctum
0804D9E0 = Icon Menu: Yes/No
0804DA3C = Yes/No menu (More research needed.)
0804DA8C = Icon Menu: Coins/Lucky Medals


Misc?
0804DABC = Debug Menu: Warp - Adds Main to Loops list (Unused even with debug mode?)
0804DAD0 = Debug Menu: Warp - Text Display (,panel addr,map number)
0804DB74 = Debug Menu: Warp - Main
0804DC6C = Debug Menu: Warp - Button controls (,panel addr,map number) ; (Returns -1 for A, -2 for B, else Map number.)
0804DDC8 = Debug Menu: Storybook Flags - Main
0804DE54 = Debug Menu: Storybook Flags
0804DEA0 = Debug Menu: Storybook Flags  *Note: Row labels and flag numbers likely here too
 0804DEBE = Grab uncompressed column numbers (0-F)
 0804DF02 = Grab uncompressed colon (:)
0804DF64 = Debug Menu: Storybook Flags
0804E0A0 = Return
0804E0A4 = Turns on djinni flag, and "add_djinni(pc,element,djinni) Return -1 if more than 9 djinn of element or already have the djinni, return 0 if added. ; Doesn’t check flags."
0804E0D0 = Pause Menu: Main
0804E14C = ? (panel addr,x,y,width,height,pal_flag) ; Changes palette of overlay/panel ; Not sure where this is used.
0804E1D8 = Icon list (Items, Psynergy, Status Effects)
 0804E2B8 = Uncompressed “Item”
 0804E2C2 = Uncompressed “Energy”
 0804E2D0 = Uncompressed “Status”
 0804E2DC = Uncompressed “Page:”
 0804E30E = Uncompressed “-”
0804E3F4 = Character list dialogue (Isaac icon; "Master Poi")




Data:
0804E584 = Uncompressed graphic = Settings menu: color bar (Window color uses palette 0xE, and Window brightness use palette 0xF.)
0804E684 = Icon frames. (3rd entry) For psynergy. (First two may be unused palette swaps.)
0804E740 = “E” (Equipped item), “X” (Broken item), Skull (Possibly unused?) icons.
0804E7DC = Graphics for individual numbers represent amount of item. 0-30 (10 for Ones position, 3 for Tens position.)
0804EA74 = Icon frame(s) (Unused?)
0804EB58 = Item icon graphic table (Pointer list) (0804F124 = Item icons)
08054A14 = Ability icon/Psynergy icon graphic table
08058FF4 = Status icon graphic table
080597F4 = 00000000 (Unused/not referenced.)
080597F8 = Hand cursor in battle - uncompressed graphic
08059878 = Stat Up/Down arrows (Shown in battle - Djinn screen.) Uncompressed.
080598F8 = 
08059978 = Header icons (See function 08044F88) ; Save,Continue,Copy,Erase,Battle,Transfer,Update,Pause,Settings
~0805A4DC
0805A4E0 = Italic font
0805C0E0 = ?
0805C0F4 = a, an, some, the
?
0805C1C4 = <| arrow graphic (uncompressed - 8 frames)
0805C5C4 = |> arrow graphic (uncompressed - 8 frames)


0805C9C4 = Purple Target Gem graphic (uncompressed)


0805E9C4 = ???


0805EA0C = ??? (pointers located at #0803E318, #0803E43C)
0805EA1C = ??? (pointer located at #0803FB2C)
0805EA7C = ??? (pointer located around #080400DC, #08040540)
0805EA7F = ??? (pointer located around #080400DC, #08040540)
0805EA81 = ??? (pointer located around #080400DC, #08040540)
0805EA83 = ??? (pointer located around #08040560, #08040564)
0805EA89 = ??? (pointer located around #08040560, #08040564)
0805EA8F = ??? (pointer located around #08040794, #08040984)


0805EA98 = ??? 
0805EAA8 = “Music” Text Label (used in Music Menu)  
0805EAB0 = “Jingle” Text Label (used in Music Menu)   
0805EAB8 = “SE” Text Label (used in Music Menu)
0805EABC = “FX” Text Label (used in Music Menu)
0805EAC0 = “Special Warps Menu” Text Labels


0805EAC0 = 


0805EB7C = Assignment Table?


0805EC84 = Red Text Crystal (which versions are used where? - there is another red crystal later in the ROM)
0805F084 = Upside-down Red Text Crystal (also unused; why are there two copies?)


0805F484 = char widths for non-italic font
0805F564 = Menu text colours (byte lookup table)
0805F6D6 = “Save” and “Pause” image animation data


0805F7B8 = Djinn Menu Arrow Graphic (indicating class change in battle)
0805F7D8 = [Related to status menu]
0805F897 = Accessed by djinn menu (battle)?
0805F89B = Accessed by djinn menu (battle)?


0805E9C4 = (Sizes of Menu Icons during animation.)


0805EB58 = Character Portrait reference table


08060C30 = Used to decompress strings


080A9F54 = String Table/Text Table
080AA0DC = 4 entries of three bytes (All entries individually pointed to.) - Related to Message speed.
080AA0E8 = Window Color and Window Brightness palettes.
080AA128 = Special Warps menu - 1st pointer = uncompressed text, 2nd pointer = Code executed when option selected.
080AA170 = 
080AA1B8 = Uncompressed Number Tiles (8x8 pixels, starting from “10” and ending with “18”)
080AA2D8 = ???


Party Mechanics
080AD000 ; 128 Private Functions
Public Functions


Private Functions
General
080AD1C0 = (thumb->arm stub for 080AEC1C)
080AD338 = (Init party and load screen 0)
080AD348 = get_recovery_queue_addr(0), or get_enemy_slot_0x83_addr(1)
080AD360 = get_average_pc_level()
 r5 = Party Members Loop decrementer.
 r6 = Total of levels => Average Level
 r7 = Party Members
 spx0 = Address of party member indexes. Incremented each loop.
080AD3A8 = get_enemy_stats_address(enemy_id) (alt: get_enemy table/get enemy data/enemy entry)
080AD3C4 = copy_bytes?(addr1,addr2,bytes,from/to)
 r4 = Loop counter ; Q: Would r3 had been used if it wasn’t an arg?
080AD3F8 = calcStats(pc) //Updates all stats?
 r5 = pc
 r6 = Address to 0x60 bytes of allocated space.
 r7 = Address to pc RAM data.
 r8 = Address to pc djinn data. (Second set of flags.)
 r10 = pc djinn data (Second set of flags) Loaded value.
 r12 = Not pushed, but used at 080ADA90. Set to 0xC8 (200) Elemental Cap. (Note that other versions of GS may not have an elemental cap?)
  080AD594 = Item attribute list 1 (e.g. stat boosts and increased turn count; attributes 0-26 are included, but multipliers + counterstrike rate are handled elsewhere.
   080AD68C = Unleash/critical rate
   080AD6AC = Turns
  080AD808 = Item attribute list 2 (multipliers)
 080AD8D2 - Read Attack buff & calculate modified Attack (other buffs nearby)  
 080AD930 - Summon boosts
 080AD9F0 = Attack/Defence/Agility Cap
 080ADA26 = Luck cap check
 080ADA86 = Elemental Pow/Resist Cap code
 080ADB2C = HP/PP Cap code (PCs)
 080ADB60 = HP Cap code (enemy)
 080ADBB2 = PP Cap code (enemy)
080ADBEC = Clears flag x167 (Boosts Encounters) & Checks all items from all PCs actively in party, and sets x167 if one Boosts Encounters.




Ship Hover?
080ADC90 = Return percent of party current PP to max PP. (0x10000 = 100%) ; (sum of PCs PP << x10) / (sum of PCs HP) I think? Figure out where this is used.
080ADCEC = Decrements 1 PP from PC with highest PP percent. (Current PP/Max PP)
080ADD5C = Decrements Party PP(value) Evenly distributed via percent check. (Current PP/Max PP) (Calls above function.) ; Also returns percent of party current PP to max PP.


080ADD74 = Calculate build date.(What is the point?)


Party Events
080ADDF0 = Party initialization?
 080ADE8C = ID for setting leader to Felix (same value is used to add him to the party)
 080ADEF6 = Adds Felix 
 080ADEFC = Adds Jenna
 080ADF02 = Innate Psynergies
 080ADF50 = Starting coins/money/gold (200/xC8)
080AE0DC = Set leader to Jenna
 080AE0E4 = This sets Jenna as the leader while in Venus Lighthouse (during title screen, but is reset again shortly after this)
080AE0F0 = Set leader to Felix, add Felix to party, remove Jenna and Sheba.
 080AE0FA = This sets Felix as the leader while on Idejima (during title screen)
 080AE0FE = This adds Felix to your party while on Idejima
 080AE104 = This removes Jenna from your party
 080AE10A = This removes Sheba from your party
080AE118 = Djinn-related (Piers gets 2 djinn, Mercury x9/xA, redraws all PC stats?)
080AE16C = Max_PC_stats(cure_poison_haunt)
080AE220 = max_pp() Elements V/Ma;J/Me , Some lighthouse PP Regen flags must be on (x110-x113)
080AE2FC = get_last_djinni(pc,ref_element,ref_djinni) Return -1 if none, otherwise 0.
080AE358 = Sort/Distribute djinn out evenly.


GS1
080AE3FC = flag_reader(base_address,flag) Flag is 12-bit index. (Is this for artifacts?)
080AE410 = GS1 Update(GS1 addr, GBA Link/Password, Called with 3rd argument, not used. (0=Update on New Game, 1=Update during game)) ; Moves GS1 data for GS2.
 080AE434 = Flags 0x800-0x81C based on GS1 djinn. 
 080AE484 = GS1 Event Flags to 0x820-0825; flips 0x822.
 080AE4D0 = GS1 Coins.
 080AE4DE = If GBA Link, GS1 Settings (Window Color, Window Brightness, Message Speed, Speech, and Auto-Sleep)
 080AE51C = PC data
 080AE564 = If GBA Link, moves PC index numbers to proper place, since it's different in both games.
 080AE57A = Removes all non-transferable items.
 080AE5B8 = Sets all djinn, max pc stats, and cures poison/haunt
 080AE5C2 = Sets flags: 0x02C=Link, 0x02D=Password, 0x02F=Updated
 080AE5D4 = GS1 Time
080AE5FC = EASY Mode Transfer(second file save game addr (e.g. 02013000)) ; Settings, Stats, Coins
 -Should be for transferring data when using EASY mode.
080AE6C8 = set_item(item,pc) Only if you don’t already have the item.
080AE6E4 = GS1 Party Joins() ; Djinn flags, removes Mythril Bag (Mars Star) (Probably for after Felix obtains it from Isaac), adds Isaac’s team with distributed djinn. ; 02002950=# of random djinn for each element? (Random number up to highest not acquired.) ; Max PP stats/cures poison/haunt ; Flag 0x022=1 ; Also adds Psy bestowing items & coins (020004CC).
080AE830 = Return
080AE834 = Add Djinni / Recovery mode / Raise flag in Storybook flags. (02000046)
(Party_Member (0-7), Djinni_type (0-3), Djinni (0-19)) ; (080B0B78 = Add Djinni)
080AE868 = Just Party 1 Djinn?
080AE89C = Store current party order on stack
080AE8B4 = Remove all party members
080AE8C8 = Add Isaac through Mia to party
 080AE8D4 = Give Flint to Isaac.
 080AE8DE = Give Fizz to Mia.
 080AE8FC = Loop until 16 random djinn allocated
 080AE8FC = Generate a random number corresponding to a GS1 djinn flag (1E-24, 32-38, 46-4C, 5A-60)
            R5 := element (0-3: Venus, Mercury, Mars, Jupiter)
            R3 := djinn id within element (0-6)
 080AE922 = If djinni not already given,  
  * Increment djinn allocated for element


HP/PP
080AEA30 = Calculate_HP_PP_percentages(pc) 0-4000
080AEAA0 = cur_081067BE(pc_addr,val)
080AEB1C = cur_pp_set(pc_addr,val)
080AEB9C = cur_hp_add(pc,val) Return current hp
080AEBD0 = cur_pp_add(pc,val) Return current pp


Item
080AEC04 = get_item_address(item)
080AEC1C = can_equip(char_id, item_id) //Returns 1 if character can equip item
080AEC48 = check_gear(pc, item) //Returns 1 for certain item types, and requires a is_equipped check for others.
080AEC68 = (item) //Returns a number (shop type?) depending on the item type.
080AECA4 = get_item_amount(pc, item_slot)
080AECC8 = get_empty_item_slot(pc) //Will return xF if none.
080AECEC = is_empty_item_slot_available() //Returns 1 if any PC has an empty item slot.
080AED38 = get_total_of_empty_item_slots()
080AED6C = add_item(pc, item) //Returns item slot, or -1 if item was not added.
 080AEDC2 = Item Stack Limit
080AEDF8 = add_item(item) //Returns pc, or -1 if item was not added.
080AEE40 = test_item(item) //Adds the item and removes it? Returns pc, or -1 if item was not added/removed.
080AEE98 = get_item(party_member, item) as Int32 //Returns Item Slot # (0-14, -1 if not in stock.)
080AEEC8 = get_item(item) as Int32 //Returns Party Member (0-7, -1 if not in stock.)
080AEF34 = equip_item(pc, item_slot) Returns -1 if already equipped, -2 if another item of the same type is equipped and can't be removed. (x6 (Fan) and xB (?) skips checking another item. / Just equips.)
080AF008 = get_equipped_item_slot(pc, item_type) //Returns the item slot for the equipped item type. -1 if none.
080AF054 = get_equipped_item_address(inventory_address, item type) //Returns 0 if none.
080AF094 = get_equipped_item(character_address, item type) //Returns 0 if none.
080AF0E4 = remove_item(party_member, item_slot) //Returns 2 ; Removed altogether. ; Also has an unknown call to 080AD3F8. (Probably used to update stats.)
080AF148 = remove_item(party_member, item_slot) //Returns -1 for empty slot, 1 for decremented quantity, 2 for removed altogether.
080AF1C8 = remove_item_a(party_member, item_slot) //Returns -1 for empty slot, 1 for decremented quantity, 2 for removed altogether. Artifact check. (Makes the item available as an artifact if it is one.)
080AF1FC = can_be_dropped?(pc, item_slot) ; Return flag x1 for if equipped and cannot be removed. ; Returns x8 if empty slot.
080AF244 = can_be_dropped?(pc, item_slot) ; Return flag x1 for if equipped and cannot be removed, flag x2 for important item. ; Returns x8 if empty slot.
 Return:
 0 = OK
 1 = Equipped unremoveable item (usually for cursed items)
 2 = Important item
 8 = Empty (item id=0) (skips 1/2 checks.)
080AF298 = remove_item(item) //Returns 0 //Searches all party members for item and removes/decrements it.
080AF2C0 = remove_itema(item) //Returns 0 //Searches all party members for item and removes/decrements it. Artifact check. (Makes the item available as an artifact if it is one.)
080AF2E8 = break_item(pc, item_slot) //Returns -1 if empty slot, else 0.
080AF310 = repair_item(pc, item_slot) //Returns -1 if empty slot, else 0.
080AF338 = get_item_target(item) //Reads item's ability target.
080AF348 = add_artifact(artifact_slot, add_quantity) //Returns quantity of artifacts of this item. (0-99)
080AF378 = add_artifact(item, add_quantity) //Returns quantity of artifacts of this item. (0-99)
080AF3A0 = get_item_amount(pc, item) //From specified PC.
080AF404 = get_item_amount(item) //From all PCs.


Psynergy
080AF43C = get_ability_address(ability) //x0000-x3FFF ; < x2DE
080AF464 = psy_check(ability) Returns the first pc that has the ability.
080AF4B8 = psy_check(party_member, ability) as Boolean //Returns True if s/he has the ability.
080AF4E4 = psy_refresh(pc) //Sets up psy list for Class, Item, and Native.
 r8=PC psys address
 r9=PC address
 r11=Class address
 080AF508 = Call to get class address
 080AF528 = Clear all Psys except innate.
 080AF538 = Move innate Psys to end of list.
 080AF55E = Clear remaining slots (in front of innate Psys)
 080AF578 = Class Psys
  080AF584 = Check if class psy is 0. (skip)
 080AF58C = Check level requirement. (skip)
  080AF598 = Check if you already have the Psy (as innate) (to avoid adding duplicates) (skip)
  080AF5C0 = Check for an empty slot (If none, skip)
  080AF5C8/080AF5E6 = Put Psy in PC data with Class Psy flag.
  080AF5F4 = Next Class Psy (Loop)
 080AF602 = Psy Bestowing Items
  080AF60E = Check if item is 0. (skip)
  080AF614 = check whether item is equipped. (Skip if not.)
  080AF622 = Use Type check (Skip if not Bestowing Psynergy.)
  080AF628 = Check if already have Psy (skip)
 080AF662 = Check for empty slot, and put Psy in if found (With Item Psy flag)
  080AF694 = Next Item (Loop)
 080AF69E = Remove gaps. (So 0s are only at end of list.)
 080AF6C8 = 0 out the rest (garbage data)
080AF6F4 = add_ability(party_member, ability) //Returns an ability_slot


Level up?
080AF794 = level up check & level up(pc,sp) Return 0 if didn’t level up, otherwise sp. (Call 080AFB80.)
080AF79C = Get Party Member Base Stats Address(pc)
080AF7AC = PC initialization (set starting gear, levels, etc)
080AF8CC = Return
080AF8D0 = EXP to level(pc, next_level) Returns experience. Returns -1 if class is NPC, or next_level is 100, or pc>7.
080AF91C = level up(pc, sp) [also adds base stats for PCs if curr_lv = 0]
080AFB80 = level up check & level up(pc,sp) Return 0 if didn’t level up, otherwise sp.
080AFBB4 = level_up(pc,target_level)
080AFBEC = Enemy Initialization
 080AFC54 = Write current HP
 080AFC56 = Write max HP
 080AFC5E = Write current PP
 080AFC60 = Write max PP
 080AFD62 = Initialize “Life Type” value: 1 = Disintegrates on death, 2 = Remains in battle when downed


Collection
080AFDBC = party_members() as Int32 (0-8) //Returns how many party members are currently in your team.
080AFDD8 = add_party_member(party_member) as Int32 //Returns new number of members in team.
080AFE1C = remove_party_member(party_member) as Int32 //Returns new number of members in team.
080AFE78 = copy_party_members(address) as Int32 //Returns number of members in team. Note: address is where to copy them to. (16-bit spaced.)
080AFEB0 = add_coins(coins) as Int32 //Returns added number. (0 - 999999) More research needed on 02000250.
080AFED4 = addShoppedCoins(number_to_add) as Int32 //Returns added number. (0 - 999999) Spent coins at shops. (For game ticket offers)
080AFF00 = addGameTickets(number_to_add) as Int32 //Returns added number. (0 - 28) Number of Game Tickets bought, caps at 0x1C.
080AFF28 = get_summons_total(addr) addr is where to list the summons.
080AFF7C = get_summon_address(summon)
080AFF94 = obtain_summon(summon)


Element
080AFFAC = get_elemental_levels(pc,pcDjinnRamAddr,sp) pc can be 0-7 for PCs, or 8+ for enemies.; Return 0.
080B0028 = get_elemental_level(pc,element)
080B005C = get_enemy_elemental_attr(enemy)
080B0084 = update_elemental_pow_resist(pc_slot, pow_res_ram_addr) Includes base levels and djinn, not sure about item bonuses.


Class
080B0144 = find_matching_class(pc,pcDjinnRamAddr,item)
 080B01F8 = Class slot count cap formula
080B0288 = get_class_address(class)
080B0298 = Djinn set/removal calculations (grabs/updates class ID (possibly abilities too)? and links update_elemental_pow_resist)
080B02D4 = Call 080B0298.


Battle
080B02DC = toElementalHexPercent(Relative ePower, eHalfEffective) (Converts to hex percentage. (Multiply by 1.28 or 0.64 and add 256. Equivalent to (1 + Relative Power / 200) and (1 + Relative Power / 400), but those have a rounding error.) In parent function mult, with value and shift out 8 bits.) It’s like converting 100 to +50% in hex. (If eHalf, +25%) (150% and 125%)
080B0378 = Random Number Generator/RNG //Returns 16-bit (x0000-xFFFF)
080B039C = Return random number x0-x63
080B03AC = calcAttack(attack,targetDef,power,Relative ePower) targetDef could be 100%, 50%, or 0% of value depending on effect. Used by Added Damage & Multiplier
Return max(0, max(0, ((userAttack - targetDef) / 2) + abilityPower) * (1 + (Int(Relative ePower*256/400)/256)))
080B03E0 = calcCast(abilityPower,Relative ePower,percent) (From left?) elemental pow/resist related  *Called from Summon and Effect Only formulas… 
Return abilityPower * (1 + (Int(Relative ePower*256/200)/256) * hexPercent
080B0408 = calcHeal(Same as above, but it multiples arg r1 by 2 and subtracts by 200 at beginning.) (From Center?) *Called from Healing formula(s).
Return abilityPower * (1 + (Int(ePower*256/100)/256) * hexPercentg80
080B0434 = get_Attack_element(pc)
080B0460 = get_item_criticals(pc_addr)
080B04BC = unleash_check(pc) Returns ability to cast. (Unleash if chance succeeds, or attack.)
080B0514 = Base Ability Effect Success Rates
080B06A8 = Return 1 if enemy found in table 080C6B18, else 0. (For Ignore Defense)
080B06C8 = Return 1 if enemy found in table 080C6B76, else 0. (For Trident)
080B06E8 = is_vulnerable/weakness(pc_addr, ability_effect)
080B0740 = Ability_Effect_Revives(ability_effect) //If effect revives, return 1, else 0.
080B075C = Calculate_Ailment_Success(attacker,defender,element,effect,percentMod)
 080B08CA = Luck check (immunity to certain effects if > 39)


Djinn
080B0A94 = get_djinni_address(element, djinn) //element: x0-x3 ; djinni: x0-x13
080B0AB8 = add_djinni(element,djinni) Checks flags. - Returns pc added to.
080B0B78 = add_djinni(pc,element,djinni) Return -1 if more than 9 djinn of element or already have the djinni, return 0 if added. ; Doesn’t check flags.
080B0BB8 = isDjinniStandby(pc,element,djinni) If don’t have djinn, or if set, return 0.
080B0C78 = isDjinniSet(pc,element,djinni) Returns 1 if djinni is set, else 0.
080B0C9C = djinniSet(pc,element,djinni) Returns 0 if not set.
080B0D04 = djinniStandby(pc,element,djinni) Returns 0 if set.
080B0D58 = djinniRecoverySet(pc,element,djinni) Removes djinni from list. Returns 1 if recovering djinni removed, else 0. (Does not alter PC tables.)
080B0E04 = djinniRecoveryStandby(pc,element,djinni) Puts djinni in recovery list as standby (FF).
080B0E40 = give_djinni(pc_from,element,djinni,pc_to) Could be give, trade, both, or…
080B0EF4 = count standby djinn(addr) Returns number of djinn. (0xFF000000 check.) ; If addr isn't 0, also lists them for each element at addr. (*Research where this function is used.)
080B0F50 = get_djinni_ability(element, djinn)
080B0F5C = get_ttl_djinn(pc,element) If element=-1, all elements.
080B0F9C = get_ttl_djinn(element) If element=-1, all elements.
080B1004 = Sets all djinn in party. (And removes from Standby/recovery list.)


Trial Roads
080B106C = is_boostable(item) Returns 1 if stat-boost item. (I think?)
080B1088 = During Trial Roads: If [020023C4]!=6774 then [020023C4]=6774, copy Felix's party items to [020023C6] ; Always sets flag x9FF, Max PC stats & cures poison/haunt, clear flags E50-E59.
080B11F8 = Giving Up Trial Roads: If [020023C4]=6774 then set Felix's party items to [020023C6] ; Always clears flag x9FF.


Data List
080B127C = Party, 00=Venus/Mars, 01=Jupiter/Mercury (Somehow used for maxing out Current PP.)
080B1284 = GS1 Event Flags related?
080B1290 = This is the percents database that tells you how likely you will get the djinn. Each group of 7 are for the first 7 djinn in each elemental category.
080B12C8 = Party EXP Growth (EXP to level tables)
080B1F28 = 0x1999999A (Unused? No pointers point here, it seems.)
080B1F2C = ??? (Gets placed at [02002338]) 
080B1F40 = Artifact, number in store, save slot reference ([item*2])
080B2340 = PC IDs
Item Data (0x080B2364)
080B2364 = Item data table/item table (44 bytes per entry, # & 1FF * 2C)
 080B2390 = For item 1, Long Sword:
 000100C8 00010093 0000000E 00000000
 00000000 00000004 00000000 00000000
 00000000 00000000 00000000
 SHORT = Price
 BYTE = Item type
 BYTE = Flags
  01 = Curses when equipped.
  02 = Can’t be removed.
  04 = A rare item. (If dropped, can be bought back from shops.)
  08 = An important item. (Can’t be dropped.)
  10 = Carry up to 30.
  20 = Transfer-denied. (Items cannot be transferred from GS1 to GS2.)
  40 = Unused
  80 = Unused
 BYTE = Equippable by flags
 BYTE = ?
 SHORT = Icon
 SHORT = Attack
 BYTE = Defense
 BYTE = Unleash rate
 BYTE = Use type
 BYTE = ?
 SHORT = Unleash ability
 WORD = ?
 WORD = Attribute (Earth, Water, Fire, Wind, None)
 Equipped effects: (x4)
  BYTE = Effect while equipped
  BYTE = Value
  SHORT = May or may not be unused/part of above value.
 SHORT = Use ability
 SHORT = ?


Ability Data (0x080B7C14)
080B7C14 = Ability data/ability table (12 bytes per entry)
 BYTE = Target
 BYTE = 
  Left: Flags
  1 = ?
  2 = ?
  4 = Effects can be used outside of battle.
  8 = Can be used in battle
  Right: Damage Type
 BYTE = Element
 BYTE = Ability Effect
 SHORT = Icon
 BYTE = Utility
 BYTE = Unknown
 BYTE = Range
 BYTE = PP cost
 SHORT = Power


080B9E7C = Enemy Stats/Enemy Data/Enemy Table (76 bytes per entry)
BYTE x 14 = 0x20, likely reserved space for their name, but is unused.
BYTE - Unused
BYTE - Level
SHORT - HP
SHORT - PP
SHORT - Attack
SHORT - Defense
SHORT - Agility
BYTE - Luck
BYTE - Turns
BYTE - HP Regen
BYTE - PP Regen
SHORT x 4 = Items
BYTE x 4 = Item quantities
BYTE = Elemental Stats index (They're read from a separate location)
BYTE = AI: IQ
BYTE = Attack Pattern/Selection
BYTE = Each bit of this represents a checkbox beside an attack in the editor, prioritizes item use over ability execution of the enemy is holding something (maybe more)
SHORT x 8 = Attacks
BYTE x 3 = Ability Effects for Vulnerabilities/Weaknesses (25% greater chance of receiving the ailment. Not all ability effects apply, probably only the ones that do the formula.)
BYTE = Unknown (Probably Unused.)
SHORT = Coin prize for defeating
SHORT = Item prize for defeating
SHORT = Chance of receiving item (corresponds to ICC values if you're familiar with them)
SHORT = Experience for defeating
SHORT = ??? (unused? continuation of exp?)


Note 1
For this value the settings indicated give each attack the listed chance of being used
0 - All attacks have an equal 1/8 chance of being used.


1 = Linear climb
Notice the first four abilities have an increased chance, and the last four have a decreased chance.
They all are a difference of 6 (Which I assume is suppose to represent +/- 20%, but ends up being +/- 18.75%)
Except it does look like it could be caps at +2/3rds and x1/3rd.
Attack 0=53/256 (x1.65625 ; reaching for x1.7?)
Attack 1=47/256 (reaching for x1.5?)
Attack 2=41/256 (reaching for x1.3?)
Attack 3=35/256 (reaching for x1.1?)
Attack 4=29/256 (reaching for x0.9?)
Attack 5=23/256 (reaching for x0.7?)
Attack 6=17/256 (reaching for x0.5?)
Attack 7=11/256 (reaching for x0.3?)


2 = Exponential climb? (not sure, upper 3 have elevated ratios)
Notice the first two have an increased chance, and the rest has a decreased chance.
Attack 0=113/256
Attack 1=56/256
Attack 2=31/256
Attack 3=20/256
Attack 4=14/256
Attack 5=10/256
Attack 6=7/256
Attack 7=5/256


3 and 4 execute their moves in numerical order. One starts with the first move, while the others starts with a random move.
5 always selects the first ability.
6 always defends.
Anything above 6 is treated as though it is 6.


080C0F4C = Party Member Base Stats
 00000000 x20 = Unknown
 LV:0   19   39   59   79   99                Note: Level goals here for reference, but not present in data
 001E 00B6 014E 01E6 027E 0316 = HP Growths
 0014 0050 0082 00AA 00D2 00FA = PP Growths
 000D 0056 00A2 00ED 0139 0184 = Attack Growths
 0006 0026 0045 0066 0086 00A6 = Defense Growths
 0008 0056 00A3 00F1 013E 018C = Agility Growths
   03   03   03   03   03   03 = Luck Growths
 36 03 01 02 = Elemental Levels (In tenths.)
 001C = Level
 0004 0050 0079 0096 0000 … = Starting Inventory (x14)
080C14EC = Summons list
080C150C = Summons data/Summon data (8 bytes per entry)
080C15F4 = Classes (84 bytes per entry); Class Data/Class Tables
080C6604 = Class Type chart
080C6644 = PC Elemental data (E. Levels 0-15) / eTables / ePower / eResistance
080C6684 = Enemy Elemental data
080C6B04 = Element Scaling during Attack/Cast/Heal
080C6B18 = Enemy list (080B0782:5A; Ignore defense 100%)
080C6B76 = Enemy list (080B0796:5B; Trident 100%)
080C6BB0 = Djinn Table
 012C = Ability


Map Mechanics


080C8000


080C8180 = Dialogue


080C8880 (080E3698) = Attach cyclone to entrances. (From sky.)
080C8888 (080E37E0) = Attach cyclone to entrances. (From below.) (Called from Initialization code.)


080C8978
080C89A6


080C9694 = Exit Init
080C977C = Death… (In battle??? Hp is set to 1, and go to sanctum.)
 080C97AC = Set leader’s HP to 1
080C9920 = Get area index for room(room)
080C9934 = ??? Get in room table [+6](room)
080C9944 = Includes unknown room load? (Warps)
 080C99A6 = Call 080ADDF0 Party initialization
080C9C10 = Decompress Map Code
080C9C38 = Room Change Story flags Reset (also lure cap/boost encounters effect flag)
080C9DC8 = Play sound at 02000450.
080C9DE0 = Set World Map Town Visit
080C9E1C = World Map Town Visit Related
080C9E48 = Assigns Battle Encounters to regular Maps(0=no battle?)
080C9F2C = Assigns Battle Encounters to World Map - Ship stuff is GS2-exclusive
(080C9FCC = )
080C9FD8 = Random battles(encounters index,? = Unknown, but affects how often battles happen.)
 080C9FF2 = Flag x15F check (skips encounter group rate calculations if set, but still with some later calculations?)
 080CA000 = Flag x160 check (skips to post-avoid check code if set, skipping calculations)
 080CA00C = Flag x161 check (skips to post-avoid check code if set, skipping calculations)
 080CA018 = Encounter check (skips to post-avoid check code if 0/none, skipping calculations)
 080CA01E = Cloak check (skips to post-avoid check code if cloak is in effect)
 080CA036 = Calculates encounter group address and moves it to r9, moves encounter rate/frequency to r7
 080CA04C = Links to function that grabs the party’s average level (r0) and subtracts the encounter group’s recommended level (r3), three checks:
a: If there is a difference that is >/= 0, it jumps to check b; if not, then the average is set to 0 and it still goes to b anyway;
b: If there is a difference that is </= 5, it jumps to check c; if not, then the average is set to 5 and it still goes to c anyway;
c: If there is a difference that is </= 0, it skips the Avoid check; proceeds as normal otherwise
 080CA066 = Grab Avoid tick count and check; no encounters if Avoid tick count is greater than 0
 080CA076 = Multiplies average by 5, adds to encounter group rate in r7; loads random 32-bit number from 02030194 to r5 that is set by this function if it does not equal 0; RNG check for 0, skips following section if /=/ 0
 080CA08A = A segment of code that generates and stores a random 32-bit integer (which is reset after each room exit/battle/maybe other things)
 080CA0B2 = Multiplies contents of r7 by 16 (LSL x04) and stores in r3, before subtracting x10, and then multiplies with the random value in r5; 
080CA164 = Regular maps - Random battles(encounters index slot) Arg is 0 or 1?
080CA17C = World Map - Random battles(addr for x/y?)
080CA18C = get_encounter_group(encounter, group)
080CA1A4 = 080EEF54 is encounter+group list. ; For djinn
080CA1BC = Room Music reference Table code
080CA280 = Room Name reference Table code
080CA2FC = Update Sanctum to go to on death.
080CA368 = GS2-exclusive - Sanctum Warp: Ship(room)
080CA3F4 = GS2-exclusive - Sanctum Warp: Ship(sanc_room, sanc_door) (Same as above, but with different args.)
080CA494 = get_battle_background (16-bit at 02000436.)
080CA4A8 = Assigns Battle Backgrounds to Maps
080CA514 = Assigns World Map Battle Background(world_map_terrain_type)
080CA5A0 = GS2-exclusive - Checks_if_pc_is_in_first_four_slots(pc)
080CA5D8 = Assign Battle Music / Battle Theme (Has story flag 16C check.)
 080CA636 = GS2-exclusive:
 080CA63C = Song list follows…
  0038 = If on ship and ship has no wings 
  0032 = Felix
  02EE = Isaac
  0031 = Jenna
080CA6A4 = Returns/calculates sprite id for a pc. (pc)
 If arg is not 8, return arg. If arg=8 {r5=9}, If map!=world map {r5=0xB}, if ship has wings {r5+=1}
 r5 = Leader? (8=Ship) ; Sprite Index (The Ship (8) has sprite indexes from 0x9 to 0xC.)
080CA6E4 = Return
080CA6E8 = Map Code Sprite stuff… sets gravity mode… ([+0x55] ; 2=Fall to ground, 4=floating)
080CA9CC = GS2-exclusive - 0202E008
080CAA2C
080CAA4C = Called when loading a room. Sets movement mode, etc.
080CACC0 = Returns number of last used NPC index + 1. ; Returns -1 if no NPC slots are available. (Occurs when you have an NPC 0x3F.)
080CACEC = Might be for overlay graphics? (Think trial roads???) (pointer)
080CAD64 = Clears NPCs list.
080CAD84 = Get_object_ram_data(obj_ind)
080CAD9C
080CAE5C
080CAF6C = Return 0
080CAF70
080CAFC4
080CB05C = GS2-exclusive - Ship Hover enabled?
080CB09C = getEventID of tile 16 pixels in front of you. (e.g. Used with Item Use and Psynergy Use events) -Gets from Layer 0
080CB144 = getEventId of tile you are on. (e.g. Used with Psynergy Use events) -Gets from Layer 0
080CB1DC = Exits X/Y/Z by pixel check. Args are your current X, Y, and Z. (And sets a value to 02030158, which causes the warp.)
080CB2B8 = Movement-based value updating; Field psynergy recovery, djinn recovery… Happens whenever the 16-bit value at 020301A0 loops back to 0; also Avoid counter at 020004A4
 080CB3E4 = Player state/movement mode restrictions: have to be in modes 0, 1, 6, or 7 for the value to increase (counter pauses otherwise)
 080CB
 080CB63C = Call Sweat effect (GS1 Lamakan heat exhaustion stuff is in this function???)
080CB6C8 = healPartyPP(value) - Grabs every party member and applies code in field; psy stones, walking around, etc.
080CB6F4 = healPartyHP(value,constant/percent) Percent would be based off of Max HP. + sound effects. (Damage if negative?)
080CB788 = poisonDamageParty() - Poison: (Max HP + 10) / 20, Venom: (Max HP + 5) / 10 , returns 1 for poison, 2 for venom. & Sound effect.
080CB82C = World Map stuff loads to RAM when entering menus/etc. (I think.)
080CB8A4 = “Reloads” world map when exiting menus/etc. (I think.)
080CB8E8 = getActivePcAddr() If 020004B6=0, party leader’s address; else, first non-player npc.(Which should be ship. 0x8)
080CB91C = Large Function for initializing the room. (Research needed.)
 080CBA22 = Event Init
 080CBA2C = Entrance Init
 080CBA30 = NPC Init (also writes x0199 to 0203019C, which is used for field PP/djinni recovery, and erases it when in a town (room type = x02))
 080CBB2E = Cloak Init? (ends calling 080dec8c)
 080CBB74 = ??? Init (calls 080c9934?)
 080CBB82 = PC Init?
 080CBBD2 = Init
 080CBD14 = 12F flag check - For displaying area name.
 080CBD38 = Djinn related
 080CBD52 = Item receive related
 080CBDEC = Warp check. (02030158)
  080CBE4C = Animation 0x16 call.
  080CBE5E = [18][1]'s strength is exhausted...[2]
  080CBE92 = Player’s animation when fainting in the field (poison/venom death, etc.)
  080CBEAC = Song that plays on death (“game over” essentially), x38 is the default
  080CBEB4 = “[PC]’s party has been annihilated.”
  080CBEBA = Sets Leader’s HP to 1, updates HP and PP percents.
  080CBF40 = Copies Sanctum’s Map and Door number to current Map and Door number.
  080CBF5E = Sanctum Warp call. (Should update ship’s location.)
 080CBF84 = FC89 - Teleport world map
 080CBFB4 = FC88 = World map’s map
 080CBFD0 = FC87 - World map: Zoom out
 080CBFEA = FC85 - Lash rope climb on.
 080CC006 = FC86 - Lash rope climb off.
 080CC022 = FC83 - Non-lash rope climb on.
 080CC06A = FC84 - Non-lash rope climb off.
 080CC0B2 = Event Type 6
 080CC0F2 = Tile Flags events
 080CC1FA = (Call to something with A button?)
 080CC25C = Debug Mode: Storybook Flags menu
 080CC280 = 
 080CC2FE = Tile Event Treasures 0xF2-0xF7 ; And scripted Event on Command "A" treasures.
 080CC33E = Using Psynergy
 080CC3A4 = Debug        
080CC54C = ? (Atleast some code executed after pressing “A”, where-ever button-check is?)
080CC67C = Entrance Init(unknown_arg)
080CC7C4 = 
080CC994 = u16-bit reader(address ref) ; (Arg should be the address of an address that points to value; Value read in bytes.)
080CC9AC = s16-bit reader(address ref) ; (Arg should be the address of an address that points to value; Value read in bytes.)
080CC9C8 = Entrance Init?
080CC9FC = Palette Menu
080CCCB8 = get address for npc init data (npc id) (npc id/not sprite id - That is PC IDs match with sprite, but this is not so for NPCs.) Return 0 if not in list.
Event System
080CCD48 = Reads a storybook flag. x1FFF ; Returns 0 or 1; if x1000, returns other. 
080CCD78 = Find_Event_Match(event_type,event) Returns address of matching event.
Checks conditions on an event entry, if all true, returns its address.
xxxxBBxA DDDDxxCC xxxxxxxx
A = Event Type (Function called by these event types: 0, 1, 2, 3, 6, 7, 8, 9) (Not used for item use(4)/Psy use(5) types.)
B = Collision/Direction checking
  06 = (0=B check skipped, 2=Just collision check , 4=Just direction check (and no ladder), 6=Both)
  08 = Collision check = How long you should be walking/running into collision. (0=12, 1=2)
 F0 = Direction
 C = Event ID
D = Flag ID
080CCE84 = Call Map Code Initialization. (MAJOR1)
080CCE94 = getNPCEvent(npc) - Interaction with Objects/NPCs (Event Type 0) and Halted objects (Event Type 7)
080CCEC8 ~080CCF30 = Treasure code. (On interactions)
 080CD044 = Sound effect for acquiring treasure
 080CD052 = “[Player] got a Psynergy Stone.”
 080CD05C = Psynergy stone: PP restoration amount
 080CD06E = Psynergy stone sound effect 1
 080CD096 = Psynergy stone disappearing animation
 080CD09E = Psynergy stone sound effect 2
 080CD0AA = “The Psynergy Stone disappeared...” (line 3609)
 080CD0D6 = Reveal in use check? Call to #080CDED4
080CD584 = Event Type 6?
080CD5BC = onCollisionEvent(event) ; Event Type 2 & Event Type 1 - Checks doors and scripted events on collision. 
 080CD5C4 = Scripted Collisions
 080CD614 = Doors
080CD680 = Tile Flags events
Arg: 02=Push - Event Type 8(pre-push)/9(post-push) ; 20=Slopes ; 40 =Ladder ; 80=Hopping
  080CD76E = Checks time walking into solid object (for pushing delays)
080CD808 = Tile Event Treasures 0xF2-0xF7 ; And scripted Event on Command "A" treasures. 
 [+0] ... 01F0=Treasure text index.
 [+4] can be 0400=0 for treasure dialogue.
 [+8] can be 0040xxxx for text index.
080CD91C = return_pushable_npc_ID Return object to push based on PC and object location/facing? (Is this also used when talking to NPCs?) Returns -1 for no object.
080CDA58 = Gets match in bank 080EFF28. (Utility object distance from PC tolerances.)
080CDA84 = Utility object height detection. Args: (utility,pc?,obj/npc?) ; May return height (Possibly height difference?) , Should return -1 if not in height range.
080CDAC0 = Utility object detections - (Checks if object is in range via x/y, z, and direction.)
 Args: (utility,pc,obj/npc) ; Returns x/y distance, or -1 if no objects in range.
 080CDBAC = Utility direction limitations (for interaction)
080CDBF8 = return_closest_utilobj(pc,utility) Returns closest utility object in range. (Range must be < 9999) Returns -1 if none.
080CDC40 = (npcSlot,npcSlot,item?) ; (Not sure if used or not?)
080CDC74 = Can push object/npc? (Checks if an object is behind object being pushed.) (Double check this.)
 r5 = Direction being pushed (From PC’s direction, and converted to 0000/4000/8000/C000)
 r6 = 02000240
 r7 = movable object RAM address
 r8 = sp, 0xC ; Coords to detect/check for movable object.
 sp, 0x0 - 0xB ; Coords for blocking object detection.
080CDC7A = Calculate direction being pushed. (r5=0000/4000/8000/C000)
 080CDC96 = Locates an object one tile in front (direction facing) of pc. ; z is rounded to nearest 8 pix.
 080CDCCE = ? (Somehow makes object not pushable)
 080CDCD8 = Check if object to push was halted.
 080CDCF0 = Check if blocking object/npc in front of object to push.
 080CDD24 = Check if npc on top of object to push? (z+1 tile)
 080CDD52 = Check for collision on third layer. (Tested with pushing small crates.)
080CDD80 = Object pushing function (when not using Move)
 080CDDAE = Pushing direction limitations? It seems to take the direction the player is currently facing into account.
 080CDDC4 = Pushing distance
 080CDE0C = Player animation while pushing an object
 080CDE14 = Delay before pushing an object moves it
 080CDE1A = Pushing sound effect
 080CDE20 = Movement speed (r3), x3333 is the fully calculated default
 080CDE38 = Delay before player moves (not including what is pushed)
080CDEA8 = Dialogue? (Events w/o pointers.)
080CDEC8 = Psynergy is in use check (Calls below function with arg=0)
080CDED4 = Psynergy is in use check (When flag off, does check.) 1=Reveal, 2=Ma????/Magnet, 4=Sand (Is this for getting forced out of those modes?)
080CDF5C = Get_active_PC() (Returns 8 if Ship.)
--- Item ---
080CDF80 = itemCheck(eventItem,usedItem) ; If r0=r1, r0=0x1FF, or r0=0x1FE with r1 being item that is a weapon/armor/chest/head, return 1, else 0
080CDFB0 = Use Item Events Check?(item) Returns pointer to event. (0 if none.)
 xxBBBBA4 EEEEDDCC xxxxxxxx
 A = 0=Tile event, 1=NPC event
B = Item id (1FE=Any Equipment (wep/amr/cht/hd), 1FF=Any item)
 C = Event/NPC id
 D = Direction check
  08 = 0=Skip Direction check
  F0 = Direction
 E = Flag id
080CE0AC = Execution of Item Use Event
--- Psynergy ---
080CE31C = Find best match for Psynergy Events (Type 5) Arg: Utility - Returns Type and Tile/NPC ID - Basically narrowing down between which type of event will be used: Tile, NPC, or Typeless
 080CE370 =(Function for finding a match?)
 XxxxBBA5 EEEEDDCC xxxxxxxx
 A = 0=Tile event, 1=NPC event, 8=Typeless (no Event/NPC id check, e.g. Reveal)
 B = Psynegy id
 X = Checked in next function.
  0=Used by Mind Read
  1=
  2=? in exiting (specific psy?)
  3=? in casting (specific psy?)
  4=Tile replacement leaving Reveal
  5=Tile replacement casting Reveal , Also used by Pound
  8=?
  F=Unused - If argument in function uses F, it’ll mean Typeless
 C = Event/NPC id
 D = Direction check
  02 = ? - Used in execution function.
  04 = ? - Used in execution function. - Maybe messes with interaction with / without object?
  08 = 0=Skip Direction check
  F0 = Direction
 E = Flag id
080CE458 = Find a match for Psynergy Events (Type 5) (type (psy type),utility,type (tile/npc/typeless) and tile/npc id) - Returns address of event.
 Args: ?, Utility, Return from 080CE31C
 Returns address of matching event.
080CE574 = ? (Calls above two functions.) ; See if this is just about calling events on psy mode exits like Sand, etc. - Edit: Probably a special use case - but executes events in casting and exiting a psy. (20000005/30000005)
080CE61C = Use Psynergy (Research needed*)
 
 080CE872 = Teleport Psynergy (0x9C)
 080CE8B8 = PP Cost - “[21]...[1]Not enough PP.[2]” or deduct cost.
 080CE920 = Sand Utility (0x17)
 080CEA56 = Utility Code (Interaction and non-interaction functions.)
080CEAFC = Do event(event_address,event_arg0,event_arg1)
080CEB58 = PSYNERGY_EVENT_CHECK(psy) Returns whether able to succeed./Does not execute event. (Called from menu code at 080FCF36.)
080CEB80 = ITEM_EVENT_CHECK(item) Returns whether able to succeed./Does not execute event. (Called from menu code at 080FB65A & 080FB516.) 
--- End of Event System? ---
080CEB94 = groundObj(npcAddr) //Sets the object to the height of the ground. (Where is this used?)
080CEBA8 = Get Map’s Treasure Address
080CEC24
080CEC34 = Treasure code (On room load.)
 080CECBA = Chest sprite
 080CECC8 = Psynergy Stone sprite
 080CECD0 = Psynergy Tablet sprite
 080CECD8 = Blank sprite #489 (for visible items, icon would go above)
 080CECE0 = Blank sprite #489 (for item in pond, seems to use a value to displace it slightly)
080CEE40 = 
080CEE80 = 
080CEEAC = 
080CEEC8 = 
080CEF24 = 
080CEF68 = Chest field code (appearance with no inventory space)
 080CEF6E = Chest closing animation
 080CEF74 = Chest sound effect
 080CEF7A = Delay after closing
080CEF84 = Mimic field code (appearance)
 080CEF94 = Mimic animation
 080CEF9A = Mimic sound effect
080CEFB4 = Chest field code (appearance with gold)
 080CEFBA = Chest opening animation
 080CEFC0 = Chest sound effect
 080CEFC6 = Delay after opening
080CEFD0 = Chest field code (appearance already open)
 080CEFD6 = Chest open animation
080CEFE0 = Chest field code (appearance without gold)
 080CEFE6 = Chest opening animation
 080CEFEC = Chest sound effect
 080CEFF2 = Delay after opening
080CEFFC = Call to #080CAD84
080CF004 = Call to #080CAA2C
080CF00C
080CF050
080CF0D0 = Unused? Uses particles (sprite 673)
080CF158
080CF17C = (npcSlot,item)?
080CF340
080CF34C
080CF350 = Find treasure?
 080CF398 = “Found treasure” animation
080CF3B4
080CF424 = found treasure animation?(item id, ?)
 - (I know the trident one uses this, which is not in the treasure list, so not sure if treasure list ones are included or not.)
080CF4E0 = Unused? Uses particles (sprite 673)
080CF554 = Show sparkles when Reveal is used.
080CF6FC = bunch of load/store calls in various locations…. - Applies Reveal sinewave circle. (via I/O)
080CF78C = Reveal - Includes sinewave circle graphic formula
…. does ??? then removes itself + 080CF6FC from function listing (ends calling 
080CF868 = init (something?)
080CF8A8 = ? (calls 08038258…)
080CF920 - 080CFA2A = bunch of unused register listings? (080d00d0 repeating a LOT)
080CFA30 = Init? (title screen?) (breakpoint happens directly before title screen would load...)
080D0098 = ? 
080D00F8 = adds 080CF78C & 080CF6FC to function listing (in that order)
080D0184 = calls 08014694 on 080CF78C & 080CF6FC?
080D019C = fade init (returns pointer to [0300007C]) ; calls 08014D00...
080D01CC = entrance fade([020301AC], [020301B4])
 - Large function prior to title screen, adds a bunch of functions to the function listing (4-5?)
080D0520 = exit fade([020301AC], [020301B4])
080D0558
080D072C = sets up 080D0954?
080D0748
080D0788 = some form of init
080D0804
080D085C = another init…




Event Data:
First 32-bit:
 0000000F =  (Scroll to bottom of page for listing.)
 1 = 
 2 =
 3 = 
 4 = 
 5 = Interaction (x00 is for hitting A, can also assign utilities)
(Utilities are assigned based on ability ID rather than utility ID (such as x8C - Move, x9D - Arrow, or x21 - Douse,) but any ability with a matching utility effect will activate the script)
 6 = 
 00000010 = On interacting with object?
 00000080 = “0200” ?


 0000FF00 = Psynergy
 FFFF0000 = Story flag


Second 32-bit:
 000000FF = Object
 00000800 = Direction-restriction. Tolerance of +/-17FF
 0000F000 = Direction


Third 32-bit:






080D0954 = ?
080D0A28
080D0B7C
080D0BEC
080D0C50
080D0CA0 = Sprite/Icon palette in palette RAM, continually updates in the event of a palette swap/transition, but (address at x080D0E18); reads flag 152 
080D0E1C = Blend
 0000-7FFF = Blend until solid color.
 8000 = Blend until pal[0].
 10000 = ( R*2 + G*4 + B ) / 7 -> RGB
 10003 = R=0x8 to 0x1D ; G=0xE to 0x19 +2 ; B=0xE to 0x1B +2 == Offset in 080F0246
 10006 = R=R-(R/2) +6 -> [080F0246] ; G=G-(G/3) +4 -> [080F0286] ; B=B -6 -> [080F02C6]
 10007 = R+G+B>0x3C : R=R-R/5 ; G=G-G/5 ; B=B-B/5 -> [080F0246]
 200000-207FFF = Blend with color. (Utilities use this.) (R+G+B)/
 400000-407FFF = 
 800000 = Palette table to separated colors. RGB*2?
080D1684 = Init
080D16F8 = De-init
080D170C = Call 080D0E1C(r0, pal_addr, pal_addr+0xE00, r1)
080D172C = Call 080D0E1C(r0, pal_addr, pal_addr+0x380, r1)
080D174C = Arg goes to 16-bit[pal_addr]
080D1760 = Transforms colors to palette table.
080D17AC = Palette related. Calls 080D0C50.
080D17E8 = Palette related. copy_palette(to) and call 080D0E1C(0x10000, pal_addr, pal_addr+0xE00, 1)
080D181C = cap0to1F(value)
080D1830 = cap7C00(value) May be for palette usage.
080D1840 = Pelette related.
080D1A18 = Palette related. (adds 080D1840 to function listing…)
080D1AC4 = calls 08014694 on 080D1840
080D1AD4 = calls 0801475C on 080D1840
080D1AE4
080D1CC0 = seems to setup adding 080D1AE4 to function listing?
080D1D34 = calls 08014694 on 080D1AE4
080D1D44 = calls 0801475C on 080D1AE4
080D1D54
080D1DAC = calls 080EAF98
080D1DF0
080D1E18 = ?
080D1E60 = [080F0308] = Speech/Voice lookup.(#)
080D1E84 = Speech-related()
080D1EAC = speech_sound_modulation: checks menu setting and sets voice clip to 0 if voices are off, otherwise it calculates audio ID if on(#)
080D1ED8 = Speech-related()
080D1EE8 = [080F3228] = FFFFFFFF FFFFFFFF (Unused?)
080D1F0C = Calls 080D1EE8, return 0. (Unused?)
080D1F18 = Calls 080D1EE8 (Unused?)
080D1F20 = File 0x26 (38) World Map
080D2084 = Wait 0x77 (119) frames or until a button is pressed.
080D20A4 = ?
080D20FC = ? [080F3230]
080D21F4 = Debug: Will set 020301B8 to 0 or -1 when L/R is pressed in convos/cutscenes. (Sometimes.) External research needed. *Was able to skip a dialogue after Yes/No prompt.
080D2240 = if [020301B8]=0 then frameLoop for arg. ; Debug mode dialog skip/frame skip.
080D2260 = Stores stuff in NPC data and sets animation to 0xC if climbing wall,otherwise 0x1. Used for the animation when you enter a room?
080D22A8 = Initiation of cutscene (Called at the start of a map code script.)
 -Does a few things, including adding the debug function for skipping dialogue.
080D2350 = Closure of cutscene (Called at the end of a map code script.)
 -Remove debug function for skipping dialogue.
 -Position camera on player object? (Normal PC or ship.)
 -Refresh Boost Encounters flag (e.g. Lure Cap)
080D2390 = Return
080D2394 = Return
080D2398 = 
080D23B8 = 
080D23CC = Set events address(events address)
080D23D8 = add_party_member(pc,dialogue_flag)
080D23F8 = adds two party members(pc1,pc2)
080D2414 = Checks if you have a psynergy(pc/ability) pc is at bits 00003C00, psy is at bits 000003FF. ; Returns 0 if true, -1 if invalid pc in arg, -2 if pc’s flag is off, -3 if pc does not have psy. 
080D2454 = Sets psynergy shortcuts to 0 when not valid. (Is this only when a pc is removed?)
080D2488 = remove pc(pc) ; This calls above function, restores hp/pp to full, removes poison/venom. If no party members, party leader gets 1 HP.
080D25C8 = check_item_carry_capacity(item) 
W/ dialogue… “can’t carry anymore”/”threw item far away” 
Function only used for determining whether to throw an item away
Tests item: Returns 0 if it can be added, or else Returns -1 and prints dialogue if it cannot
Loads party member count but does nothing with it; remnant from GS1 version of function that used it
080D260C = add item w/ dialogue/choices(item,?)
080D27EC = add item (item,n/a,pc) Returns pc, otherwise -1.
080D2808 = Return
080D280C = Return
080D2810
080D2840 = show_choice(npcId, ?) ; 2nd argument may be the default option? (0 = yes, 1 = no)
080D295C = ? A Yes/No menu called from File Screen Map Code. (Probably if you want to save when finishing game.)
080D296C = Found an item…(item obj id, item id, storybook flag) *Research later, may or may not add item, but turns a flag on.
 - Used by Trident. See 188:23, call at 02008470.
080D2A0C = Add psynergy with learned dialogue.
080D2A3C = Initiate Screen Wipe? = Check Room 309, but Prox maps call it too
080D2A64 = End Screen Wipe? = Check Room 309, but Prox maps call it too
080D2A8C = Delay after screen wipe? = Check Room 309, but Prox maps call it too
080D2AA4 = warp_to(map,door)
080D2AD0 = Set sanctum map & door & ?
080D2AFC = Execute Event(event ID)
 - can be used to execute warps during cutscenes.
 - Old: Exit Cutscene (executed near the end of the Mercury Lighthouse epilogue cutscene, room 309; also Prox)
080D2B0C = Execute battle? (encounters,0-7) (Seen used by Star Magician and Dullahan.)
 r5 = [0203006C]
 r6 = encounter entry
 r7 = Group # (0-7) in encounter entry
 080D2B40 = Assigns music. (Uses encounter and group (0-7) numbers.)
080D2B4C = Djinni battle? ?(npc id (with 0x800 flag),djinni?)
 r5 = Element of Djinni
 r6 = Djinni
 r7 = NPC ID
 r8 = Whether to play cutscene or not? (0x800 flag)
 r10 = [0203006C]
 080D2BEC = Assigns music. (Uses 0s.)
080D2C04 = onBattleWin(map,door)
080D2C1C = onBattleLose(map,door)
080D2C34 = warp_to(map,door) (does this differ from 080D2AA4?)
080D2C64 = [02030CB8]=arg ; Play sound 0x12A ; Then play sound arg (if 0, play 0x186 instead.)
080D2C98 = Return
080D2C9C = Play sound at 02030CB8. (How is this used?)
080D2CC4 = 0x142=0 ; If you have Scoop, open A menu. (text) (Where is this used?)
080D2D08 = If near object, play sound? (npcAddr,sound)
080D2D70 = Increments 020004B4. (Called from Map Code, and is for Kraden’s Mad Scene in Lemuria.)
080D2D84 = Get_object_ram_data(obj_ind) //obj_ind<=BF (If higher, returns 0)
080D2D94 = ?(npcSlot,speed?,)
080D2DA8 = set_obj_animation_script(obj,data_script_addr) data_script_addr can be x0-xA for defaults.
080D2DC8 = Multi-directional & no script (npcSlot)
080D2DE4 = Multi-directional, no script, & ??? (npcSlot)
080D2E1C = setDirectionTracking(npcSlot,npcSlot2) [npcSlotAddr+0x68]=npcSlot2Addr ; z=1 for npcSlot
080D2E40 = Waits 600 frames or until script ends(npcSlot)
080D2E50 = Waits 600 frames or until script ends(npcSlot,movementScript#) (Also sets multi-directional.)
080D2E78 = setDest(npcSlot,x,y)
080D2EA4 = setDest(npcSlot,x,y) ; Wait 600 frames.
080D2ED4 = setDest(npcSlot,x,y) ; Animation 2 (Walking)
080D2F08 = setDest(npcSlot,x,y) ; Animation 2 (Walking) for 600 frames, then animation 1. (Idle)
Executes animation long enough to preform a hop, but doesn’t hop by itself?
080D2F48 = setDest(npcSlot,?,Relative y) (Centers x on tile?)
080D2FC8 = setDest(npcSlot,Relative x,Relative y)
080D2FFC = setDest(npcSlot,Relative x,Relative y) ; Set NPC Script to 080F32D0 (Command 1, wait until finished?) Animation 2.
080D303C = setDest(npcSlot,Relative x,Relative y) ; Calls above function, waits 600 frames/destination, then animation 1. (Idle)
080D3070 = setDest(npcSlot,Relative x,Relative y,?) ; Research?
080D30FC = npc_idle(npcSlot) ; Waits for 600 frames/destination, then animation 1 (Idle)
080D3118 = setPosition(npcSlot,x,y) (With height check) ; (Whirlwind Vines use this)
080D3164 = setPosition(npcSlot,x,y,dir) (With height check)
080D31C0 = setPosition(npcSlot,x,z,y) (With height check)
080D3214 = setPosition(npcSlot,npcSlot2) Places a sprite at the same coords as npcSlot2
080D3240 = setAnimation(npcSlot,animation)
080D3254 = ?(npcSlot,?)
080D3268 = ?(npcSlot)
 - see below: used to played nod animation (96 frames)
080D32B8 = setAnimation(npcSlot,animation) & calls 080D3268 (above)
 - used to played nod animation (96 frames)
080D32C8 = npc_heightcheck?(npcSlot,height above ground?,frames) (Plays one of two sounds depending on distance from ground?)
080D3300 = npc_quivercount(npcSlot,0-3 How many times npc shakes/weeps; limit of 3)
080D332C = Calls above & 600 frames/script end. (npcSlot,0-3)
080D333C = 
080D3378
080D3460 = Slope down animation? (npcSlot,animation,?)
080D359C = npc_facetarget(npcSlot,npcSlot2,frames) Face npcSlot2
080D35D4 = both npcs face each other (npcSlot, npcSlot2, frames)
080D3600 = both npcs face each other (npc addr, npc2 addr)
080D36A8 = removeSprite(npcSlot)
080D36C8
080D36F4
080D3744 = setSpritePalette(objRam,palette#) Used in init of Venus Lighthouse. (Map 5) , palette# 0x6 is grayscale
080D3780
080D37D4
080D3814
080D3838 = setSpriteDirection(obj#,direction,frames?)
080D3860 = setScript, two arguments (See map 309, need to do more research)
080D3888 = Bridge that breaks off when you’re on it. (See map 28) (obj#,?) , (Perhaps also used for Lift boulders?)
080D38D4 = (Much of 080D2D84 usage starts here…)
080D390C
080D3928
080D3940
080D3A10
080D3B28 = Scoop (x14) - Part 4 (Displaying Loot)
080D3B5A = Coin loot icon - x00 is the default, changing this will change the coin sprite/icon that displays when one receives coins


080D3BE8 = Dialogue - Sets text-index
080D3BF8 = Get/return something?


080D3C2C = 
080D3C88 = 


080D3FB0 = Has a Select/L/R/A button check.
080D406C = Assign Dialogue to object ID? (r0 = ID, portrait box is forced left when 0x1000 bit is set, right with 0x2000) 
080D407C = Function call to #080D3FB0
080D4084 = 
080D40DC = 
080D4178 = Function call to #080D4180
080D4180 = 
080D41E8 = Call #08D3Bf8 = remove portrait if -1 returned (calls #0803D450 = removeFramedPortrait)
080D41FC = Dialogue? (Because of L/R/A/B button check.)


080D4330 = 


080D4384 = ?(npc#,?) - Positions camera on npc? (Not sure if 2nd argument (0/1) is whether immediate or animating to???)
080D43EC = 


080D440C = Moves camera(x,z,y,?)
080D450C = Moves camera to npc(npc#,?) x,y
080D452C = Moves camera to npc(npc#,?) x,z,y
080D4548 = Moves camera as well?
080D4568 = 
080D4580 = 


080D45B8 = ?


080D46A4 = ?
080D4714 = ?


080D47B4 = Dialogue/Emoticon stuff?
 080D47CA = Ding sound effect
 080D47DC = Emoticon sprite (#488)


080D4868
080D489C = Dialogue sweat/panic?
 080D48CE = Panic sprite (#264)
 080D4906 = Animation 1 (looping one)
 080D4918 = Animation 2 (standard)
080D498C
080D49A0
080D49BC
080D4A54
080D4AA8 = 
080D4AB4


080D4B0C = set_obj_animation_script(obj_ram_data_addr,data_script_addr) data_script_addr can be x0-xA for defaults.
080D4BC4
080D4D08 = Hop (Main)
 080D4F00 = “Can hop” check; seems to check for whether or not a hopping obstacle exists and branches if it does. Disabling this lets you jump in any cardinal direction (minus walls) at any time from places that normally allow hopping in the first place, such as Move pillars.
 080D4F1A = Pre-hop/jump animation
 080D4F22 = Delay before hopping
 080D4F28 = Hop sound effect
 080D4F30 = Mid-hop animation
 080D4F36 = Hop movement speed
 080D4F3C = Hop gravity modifier? Seems to alter the curve of the hop.
 080D4F42 = Hop height
 080D4F78 = Post-hop animation
 080D5078 = Gravity/regaining control delay after hopping
080D50F8 = Down ladder
080D53B8 = Up ladder
080D5670 = Lash ropes... (PC next to it, check???)
080D5720 = Hop on lash ropes.
080D57E4 = Hop off lash ropes.
080D5930 = Non-lash ropes... (PC next to it, check???)
080D59DC = Hop on non-lash ropes.
080D5AA0 = Hop off non-lash ropes.
080D5BEC
080D5C70
080D5D70 = Stairs - same as next function but has arg for npc (npc, up/down type)
 - Called from map code init (02008CFA) to make Felix go down stairs in prologue.
 - Second arg gets converted to: 1=0x1A / everything else=0x19 ; Prologue Felix is 0xFFFFFFFF.
080D5DE0 = Up(r0=1A)/Down(r0=19) stairs
080D5E50 = Door Type 2: Up stairs
080D5E64 = Door Type 3: Down stairs


080D5FD4 = Door Type 5: Going through door animation.
080D5FF8 = ?
080D607C = ?
080D6408 = ?
080D64B8 = ? - Removes 080D5FF8 and 080D607C functions, which have an unknown purpose so far, and does ???


Weather:
080D64F0 = Rain (effect)
 080D6594 = X coordinate offset (positive numbers to the right, negative to the left)
 080D65A4 = Y coordinate range limit? Lower numbers raise the cutoff
080D6674 = Blizzard (effect)
080D67E8 = 
 080D6804 = Read flag 166
 080D682C = Pointer table (12 pointers)
080D690C = Rain (parent function)
080D69F4 = Northern Reaches Horizon Snowfall (effect)
 080D692E = Area/particle X coordinate position
 080D693C = Area/particle Y coordinate range?
 080D6A78 = Particle frequency?
 080D6A8A = Particle speed/angle
080D6B90 = Northern Reaches Horizon Snowfall (parent function)
080D6C60 = Snowfall (effect)
080D6E58 = Snowfall (parent function)
080D6F34 = Blizzard (parent function)
080D7034 = Ceiling Dust (effect)
080D7240 = Ceiling Dust (parent function)
-
080D7304 = Dry Thunderstorm (no rain); takes a bit to start, probably meant to be used in conjunction with other effects
-
080D73B4 = ?
080D73E0 = ?
080D7408 = ?
-
080D7430 = Power Out (screen goes dark after a brief delay)
080D74E4 = 
080D74F0 = 
Djinn (030000E0?)
080D7524 = Djinni animation (Before battle, but for starting a battle.)
- Used with interacting with NPC Djinn / Function is skipped by world map random battles.
080D7788 = Djinni obtain (Obtain, animation, and dialogue) (npc ID, element, Djinni) 
- NPC slot gets 0’d near end of function.
080D784C = Puts the Djinni on the map should the battle be won.() No Args/Returns.
080D793C = Djinni obtain or don’t obtain? (Has call to 080D7788.) ; (?) No return.
080D7A58 = 
080D7A78 = 
080D7AB4 = 
080D7AF8 = 
080D7B04 = 
080D7C04 = Jupiter Djinni obtain animation (npc id)
080D7D48 = 
080D7D68 = 
080D7D90 = 
080D7DBC = 
080D7F80 = Mars Djinni obtain animation (npc id)
080D8148 = 
080D8174 = 
080D81EC = 
080D82E0 = Venus Djinni obtain animation (npc id)
080D85B8 = 
080D870C = 
080D8740 = Mercury Djinni obtain animation (npc id)


Lash Pegs Group 1 (0300009C)
080D897C = Lashy - Initialization (Called from Map Code.)
080D8A00 = Lashy - Called every ~frame?
080D8C10 = See Movement Type - This is based on Lash pegs. - Called every ~frame?; reads flag 104


080D8D68 = ?


080D8FA8 = Lashy
080D8FF8 = Lashy


080D9104 = Lash/peg/rope related (If flag is off) (pegset,peg1,peg2)
080D9194 = Lashy (peg-pair entry, peg1 x, peg1 z, peg1 y, peg2 x, peg2, z, peg2 y) - Will decide how long rope is.
080D92A4 = Lashy
080D92D4 = Lashy
080D9498 = Lashy
080D9710 = Lashy
080D9790 = Lashy
080D9974 = Return
080D9978 = *Research needed: One place tries to write “1” to 080F3944.
080D99B8 = isPlayerNextToPeg(peg1,peg2) Returns 1 if the player is next to a peg, otherwise 0. ; The pegs that you use Lash on.
080D9A74 = Lash/peg/rope related(peg1,addr1,addr2) peg2 placed in addr1, pegset placed in addr2.  (When r0=peg1, returns -1 if no match.)
080D9AB0 = Lash/peg/rope related
080D9AD0 = addLashy(pegset,flagInd,peg1,peg2) (Called from Map Code.)


080D9B08 = ?


Lash Pegs Group 2 (030000A0) - May not contain flag indexes, so these probably don’t need the Lash psynergy.
080D9D40 = See Movement Type - This is based on Lash pegs.
080D9E74 = [030000A0]+EC, return an empty slot (return address)
080D9E98 = addLashy(pegset,peg1,peg2)
080D9F1C = Lashy
080DA060 = Lashy(,peg1?,peg2?,)
080DA0B0 = Lashy
080DA1B8 = Lashy
080DA22C = Lashy
080DA334 = Lashy
080DA3BC = Lashy
080DA660 = Lashy
080DA6E0 = Lashy
080DA908 = Lashy
080DA938 = Lashy
080DA968 = *Research needed: One place tries to write “1” to 080F3950.


Swinging Wind Vines (Gaia Rock) / Swinging Wind Chains (Magma Rock) (030000A4)
080DA9A8 = Init
080DAAB0 = 
080DACB8 = 
080DAE3C = 
080DAE70 = 
080DAEA8 = 
080DAECC = 
080DB0B0 = 


080DB444 =  (Has call to 080DAECC.)


?
080DB48C - ??? (Related to utilities, non-interactions if r0 = 0, 2, interaction of r0 = 1, 3, ends otherwise) Note: I did not find a call to this with my Function Call scanner. (Edit:08F3A385)
 - Called during prologue where Felix casts Move on statue.


080DB4B8 = Utility usage without object.
 080DB4CE - Utility stuff (Non-interactions)


080DB644 - Halt (x09)


080DB670 = Utility usage on object.
 080DB68E = Utility Interactions


 080DB7CC - Mind Read (x02) - Interaction
 080DB7CC = Exit Reveal if being used.
 080DB7E2 = ?


080DB848 - Related to (x02) Mind Read


080DB884 - Applies code to the player character depending on the utility used, from x08 (Reveal) to x1C (Magnet); only assigns player effects for utilities x08, x0A, x10, x17, x18, x1C (Hover, Cloak, Avoid, Sand, Hover, Magnet)


080DB91C - Rapid palette flash rotation (used in x01 (Move), x07 (Lift), probably others too)
 080DB950 - Maximum palette swap ID (swaps consecutive palettes, caps at whatever palette is defined here before looping back)


080DB974 = 
080DB9C0 = 
080DB9CC = 
080DBA44 = 
080DBA5C = 
080DBB40 = 


~~ Tilemap checks (Utility-only?)
080DBB78 = Get current position in tilemap? (Return address) Args are (x,y,layer)
 Note: Many of the tile checks below (Cloak, Hover, Sand, etc?), call the above function with the third layer hard-coded, so these only work on the third layer.
080DBCA8 = Tilemap event id 0xE7 check. (Return 1 or 0)
080DBCC0 = Tilemap event id 0xEC check. (Return 1 or 0)
 080DBCC0 - Tile Check 1? (Used by Hover, removing the bl to this lets Hover work on any tile) - May be used by multiple utilities
080DBCD8 = Likely checks to see if Sand should still be in use. (Event ID of 0xE8 checked in tilemap.)
080DBD48 = Ladder/Wall climbing: Tilemap flag 0x40 check. (Return 0x40 or 0x0)
080DBD5C = 
080DBDA8 = Tilemap event id 0xE9 (Cyclone bushes?), 0xEA, 0xEB check. (Return 1, 2, 3 respectively, else 0)
080DBDC8 = Set tilemap event id(,,,value) , Also returns the value. (Arg in r3.)
080DBDD4 = 
080DBDE8 = Return tilemap flags. [@+3]
080DBDF4 = Set tilemap flags. [@+3] (,,,value)
080DBE08 = Set bits in tilemap flags. (,,,value) Returns new flags value.
080DBE44 = Clear bits in tilemap flags. (,,,value) Returns new flags value.
080DBE80 - Tile Check 2? (Used by Hover, removing bl prevents hover from working on pads) - May be used by multiple utilities


080DC0B8
080DC0D8 = ?
080DC10C - Graphic stuff (including selection/display)


080DC1B0 = AreaPaletteSwap(?,color) ; ?=8 for Utilities. Might be number of frames?


080DC244 - (Related to palette blending/fadeout below)
080DC294 = utility_map_palette_blend
 Three sections determine the color blend from 8 colors: 0-7.
 First: [0300122C] & 7 ; The counter value, so it’s pretty much a random number where each color has an equal chance.
 Second: Color determined by utility.
 Third: Story flags 0x148-0x14F are checked.
 0 = Blue (Pound, Grind, A??, Cyclone)
 1 = 
 2 = Red (Blaze)
 3 = 
 4 = 
 5 = (Scoop)
 6 = (Tremor)
 7 = Light Gray (Burst, Sand, Parch)
080DC37C
080DC384 - (Related to palette blending/fadeout; moves x08 to r0 and links directly to #080DC244)
080DC390 - Check map type, located at #0203018A (x03 = world map); do something more?
080DC3F0
080DC410 - Effective for Douse's snow. (Determined by Graphic Map Index.) ; Other unknowns? (Might be a template function?)
080DC62C - Utility direction calculation (not including interaction)
080DC6D8 = cast_field_utility
 080DC72A - Utility casting sound effect
 080DC770 - Text command, grabs current utility’s name and displays it
080DC7CC
 080DC7DE - Delay before regaining control (after using a utility spell)


080DC7E8 = Mind Read (x02) - Move too. (during prologue)


080DC978 = Mind Read (x02)
080DCA50 = Mind Read stuff?
080DCA84 = Mind Read stuff?
080DCADC = Mind Read stuff?
080DCD0E = Mind read trail graphic


080DCDA0 - Sound effect 2 (unknown)


080DCF54 = Get 4-directional movement
080DCF70 = Get 8-directional movement


x080DD054 - Move (x01) - Interaction
x080DD098 - Blend screen to a color
x080DD268 - Hand animation while holding an object
x080DD27A - Blocked movement sound effect
x080DD286 - Successful movement sound effect
x080DD2AA - Delay before moving object
x080DD2B0 - Object movement speed
x080DD2D2 - Hand movement speed


x080DD4E8 - Move (x01) - Non-interaction ; Part A (Main)
x080DD4F6 - Blend screen to a color
x080DD4FA - Create hand sprite
x080DD50C - Hand animation
x080DD512 - Move’s duration


080DD528 - Move (x01) - Part B1 (Hand)
x080DD542 - Related to positioning
x080DD544 - Related to rotation
x080DD54A - Move’s sprite
x080DD574 - Hand’s movement speed when first cast
x080DD57E - Z coordinate of hand sliding upward before vanishing - x00 is the default        
x080DD582 - Initial hand animation
x080DD592 - Amount of starting particles - x00 is the minimum, x07 is the default
x080DD59A - Initial particle speed - x80 is the default, lowering this will make the particles appear later (particles are subject to gravity)
x080DD59C - Initial particle graphic
x080DD620 - Move sound effect 1


x080DD63C - Move (x01) - Part B2 (Hand details/creation)
x080DD642 - xFFFF is the hand’s size


x080DD668 - Move (x01) - Part C (End), Also used by Lift (x07) - Interaction code
x080DD674 - Move sound effect 2
x080DD67A - Hand vanishing, shrinks and inverts until gone - x1E is the default
x080DD680 - Hand vanishing Z coordinate - x80 is the default, higher numbers make the shrinking hand go higher
x080DD68A - Hand spinning speed - x80 is the default speed, x00 will disable spinning
x080DD694 - Spinning movement speed
x080DD6A4 - Vanishing speed - x01 is the default speed, raising this will make the hand vanish sooner
x080DD6B0 - Vanishing particle speed - x80 is the default, lowering this will make the particles vanish later (particles are subject to gravity)
x080DD6B2 - Amount of vanishing particles - x00 is the minimum for one particle, the default is x07
x080DD6BA - Vanishing particle graphic
x080DD72A - Move sound effect 3


x080DD820 - Reveal (x08) - Part A
x080DD874 - Palette change type - x01 is the default for colouring in the environment, while x02 colours objects/NPCs, and x03 colours everything in
x080DD87C - Palette change control - x01 is the default, x00 disables it
x080DD88E - Post-black screen delay
x080DD8B8 - Reveal sound effect 1
x080DD8BE - Boundary modifier - x01 is the default (for ending Reveal should you leave), and x00 makes it so Reveal never ends (but it also becomes hard to leave)


x080DD950 - Reveal (x08) - Part B (Called by Mind Read (x02) to exit Reveal.)
x080DD976 - Reveal sound effect 2
x080DD9A8 - Red reality flash intensity - x00 is the default for no red, going higher increases the intensity of the red fade-out
x080DD9AA - Boundary vanishing delay
x080DDA18 - Movement delay - x0A is the default, lower numbers will let you resume movement sooner once Reveal ends


080DDA30 = Growth (x0C) - Interaction


x080DDB3C - Growth (x0C) - Non-interaction
x080DDB50 - Growth sound effect 1
x080DDB56 - Growth plant total - x04 is the default, x00 produces a minimum of one plant
x080DDB6C - Growth radius modifier
x080DDB7E - Growth radius code
x080DDB84 - Growth graphic/animation
x080DDB8E - Allows Growth plant animation to play
x080DDBAE - Growth timing, delay until the next one comes up
x080DDBC0 - Delay before player regains control


x080DDDA0 - Lift (x07) - Interaction
x080DDE0E - Distance between hands when lifting
x080DDE26 - Lifting sound effect
x080DDE34 - Object buoyancy modifier (x0C-x0F = buoyant, x00 = default/nothing)
x080DDE56 - Lifting speed
x080DDE74 - Lifted object max height


x080DDEA8 - Lift (x07) - Non-interaction ; Part 1 (Particle stuff)
x080DDF00 - Delay before hands start moving (if not lifting an object)
x080DDF14 - Delay before it registers hand collision
x080DDF32 - Lift sound effect 2
x080DDF38 - Particle speed
x080DDF3A - Particle amount
x080DDF48 - Particle group Z coordinate
x080DDF54 - Particle graphic
x080DDF8A - Particle radius


x080DDFD4 - Lift (x07) - Part 2 (Hand stuff)
x080DDFDC - Lift sound effect 1
x080DDFE8 - Hand graphic
x080DDFFC - Hand creation speed
x080DE004 - Hand movement speed
x080DE02A - Hand spinning/growth time
x080DE036 - Hand spinning/growth speed
x080DE040 - Maximum hand size


x080DE060 - Force (x04) - Part ?


x080DE154 - Force (x04) - Interaction contact stuff?


x080DE214 - Force (x04) - Interaction - Points straight to next function.


x080DE21C - Force (x04) - Non-interaction, but is also called from Interaction (above).
x080DE23E - Force sound effect 1
x080DE26E - Force particle graphic
x080DE286 - Particle rendering(?)
x080DE28E - Particle palette swap
x080DE294 - Particle size
x080DE29E - Particle movement speed
x080DE2BA - Hand movement angle - x80 is the default, higher numbers make it slant downward, lower make it slant upward
x080DE2DA - Physical hand graphic
x080DE308 - Physical hand movement speed (one of the physical hands is the one that activates Force objects)
x080DE318 - Physical hand graphic animation
x080DE320 - Physical hand palette swap
x080DE338 - Physical hand growing speed
x080DE354 - Pause before shooting hand(s) out
x080DE36A - Mental hand graphic
x080DE382 - Mental hand size 
x080DE392 - Mental hand movement speed
x080DE3A0 - Mental hand graphic animation
x080DE3A8 - Mental hand palette swap
x080DE3E0 - Z coordinate of final destination
x080DE3EC - Maximum distance from player - xE0 is the default, is shifted by x0E to increase range
x080DE440 - Spacing/time between each hand
x080DE51E - Amount of time before player can move again


x080DE550 - Frost (x06) - Part D (Idle pillar stuff)
x080DE556 - Delay before each pillar palette swap 1 flash
x080DE55E - Pillar palette swap 1
x080DE56A - Pillar palette swap 2


x080DE5A4 - Frost (x06) - Part B (???)


x080DE5FD - Frost (x06) - Part C (???)


x080DE654 - Frost (x06) - Interaction ; May call next function.


x080DE688 - Frost (x06) - Part A (Utility usage)
x080DE6A6 - Frost sound effect 1
x080DE6AC - Amount of snowflakes - x00 is the minimum for one graphic, defaults at x0F
x080DE6B2 - Graphic used (three instructions long)
x080DE6CC - Graphic size - x80 is the default size
x080DE6DC - Spiral spacing/rotation type - x01 is the default, uses an AND instruction; clockwise if equal, counter if not
x080DE702 - Graphic palette swap - x09 is the default
x080DE71E - Graphic landing radius (once on ground)
x080DE742 - Frost speed - x03 is the default
x080DE754 - Delay between two sound effects
x080DE75A - Frost sound effect 2
x080DE760 - Delay before the player can move again
x080DE77A - Frost sound effect 3
x080DE780 - Delay before pillar creation
x080DE784 - Puddle palette swap 1
x080DE78C - Duration of palette swap 1 flashes
x080DE794 - Puddle palette swap 2
x080DE79A - Duration of palette swap 2 flashes
x080DE7A0 - Pillar creation speed - x01 is the default, higher values make Frost work faster
x080DE7BA - Frost sound effect 4
x080DE7C2 - Freezing animation
x080DE7F4 - Delay before player regains control


x080DE818 - Ply (x03) - Part D (particle falling pattern, linked to Part C)
x080DE824 - Particle sway distance
x080DE84A - Particle drift/sway intensity (x80 is neutral, higher/lower numbers make particles sway more frantically)


x080DE864 - Ply (x03) - Part B
x080DE878 - Spinning fairy movement pattern (x64 circles inward, x14 circles outward)?


x080DE8D0 - Ply (x03) - Part C (particle + horizontal sway effect, linked to Part A)
x080DE8FA - Horizontal swaying distance (higher numbers make the fairy/target move further to each side)
x080DE90A - Fairy/target height (higher numbers make it move further from ground)
x080DE920 - Fairy/target swaying speed (higher numbers raise speed)
x080DE942 - Particle delay (higher numbers delay each particle, effectively reducing particle count)
x080DE97A - Particle graphic
x080DE996 - Particle size
x080DE9A2 - Falling argument(?); x02 is default, and only lets out the occasional particle unless a utility is in use; x03 makes the particle bursts constant regardless of utility use
x080DE9A6 - Particle falling distance (before vanishing)
x080DE9B8 - Particle palette swap
x080DE9C8 - Particle delay before vanishing


x080DE9F8 - Ply (x03) - Part A
x080DEA1E - Spinning fairy graphic
x080DEA32 - Spinning fairy graphic size
x080DEA44 - Spinning fairy starting distance
x080DEA5E - Spinning fairy spacing 
x080DEA6E - Ply sound effect 1
x080DEA76 - Delay before primary fairy shows up
x080DEA7C - Primary fairy graphic
x080DEA92 - Primary fairy graphic size
x080DEAA0 - Palette swap 1 (white)
x080DEAA6 - Temporary Z coordinate
x080DEAC0 - Ply sound effect 2
x080DEAC6 - Pause before palette flashing
x080DEAD0 - Duration of blue palette swap
x080DEAD2 - Pause before the fairy releases particles
x080DEAE2 - Palette swap 2 (blue)
x080DEAEC - Palette swap 3 (red)
x080DEAF2 - Duration of each swap (2 and 3) during flash
x080DEAF4 - Time before particle spraying animation - x01 is the default, higher numbers reduce the remaining time
x080DEB00 - Final palette swap of the primary fairy
x080DEB06 - Ply sound effect 3
x080DEB2A - Time before fairy leaves
x080DEB4E - Leaving fairy movement speed
x080DEB56 - Rotation related(?) - x0A is the default, x01 results in the fairy turning as it leaves
x080DEB5C - Disappearance delay - xC0 is the default, lower numbers will cause the fairy to vanish sooner
x080DEB5E - Leaving direction


x080DEBA5 - Cloak (x0A) - Part C (light/tile check part?)
 -Sets a value to leave Cloak if not on a Cloak tile. (GS1 has most of it in one function since there is no Hover/Sand/etc.)
x080DEBAA - Load a word (x02030000) from x030000DC
x080DEBBE - Cloak branch check
x080DEBD2 - Stores a halfword (x2092) at x02030166


x080DEBD8 - Cloak (x0A) - Part B
 -Exit Cloak?
x080DEBE6 - Beginning of RAM address 030000E0 calculation
x080DEBEA - Cloak Sound effect 2
x080DEC0C - Reappearing palette swap 1 - x07 is the default
x080DEC18 - Intensity of reappearing vibration - x02 is the default (non-existent shake), higher numbers increase the intensity
x080DEC1E - Cloak’s palette swap flashing duration (if used in the light)
x080DEC2C - Cloak’s white flashing duration (if used in the light)
x080DEC3A - Reappearing palette swap 2 - x07 is the default
x080DEC4C - Cloak’s palette swap flashing duration (if used in the light)
x080DEC5C - Cloak’s white flashing duration (if used in the light)


x080DEC8C - Cloak (x0A) - Part D (???)
 -Set up tile checks/frame if in Cloak Mode. (Could be called if switching maps, or no?)
x080DEC98 - Loads a byte (x01) from x020004AD


x080DECB8 - Cloak (x0A) - Part A
x080DECD4 - Cloak sound effect 1
x080DECF0 - Time before appearing (if used in the light) - x00 is the default, going higher will make the player appear sooner
x080DECF2 - Palette swap - x07 is the default, and is used for the white flashes
x080DED06 - Cloak’s palette swap flashing duration (if used in the light) - x02 is the default, higher numbers will make the swap/clear flashes longer
x080DED16 - Cloak’s white flashing duration (if used in the light) - x02 is the default, higher numbers will make the white flashes longer
x080DED3A - Cloak branch check
x080DED64 - Cloak tile(?) check


x080DEDE0 - Douse (x05) - Interaction (it’s essentially the same code)
x080DEDE8 - Douse (x05)
x080DEE04 - Cloud graphic
x080DEE26 - Douse sound effect 1
x080DEE36 - Distance from player
x080DEE6A - Douse Z coordinate
x080DEF00 - Cloud size modifier 1
x080DEF06 - Cloud size modifier 2
x080DEF12 - Cloud size modifier 3
x080DEF1E - Growing cloud speed
x080DEF28 - Delay before rain
x080DEF46 - Amount of raindrops on non-interaction - x0A is the default for 10 drops, x00 is the minimum for no rain
x080DEF4E - Amount of raindrops on interaction - x18 is the default for 24 drops
x080DEF76 - Rain radius
x080DEF94 - Delay before last raindrop
x080DEFA6 - Raindrop graphic
x080DEFF0 - Douse sound effect 2
x080DEFF6 - Delay between each raindrop
x080DF0EA - Shrinking cloud, distance from player
x080DF102 - Shrinking cloud Z coordinate
x080DF12A - Minimum size of the shrinking cloud
x080DF142 - Shrinking cloud speed


x080DF1CF - Carry (x0B) - Interaction
x080DF240 - Hand height relative to object
x080DF28C - Hand grabbing speed
x080DF2FC - Lifting sound effect
x080DF32E - Lifting speed
x080DF354 - Carried object max height
x080DF494 - Blocked movement sound effect
x080DF49C - Successful movement sound effect
x080DF4B8 - Object movement delay
x080DF57E - Pre-drop sound effect 1
x080DF584 - Delay before next sound effect and drop
x080DF58A - Pre-drop sound effect 2
x080DF590 - Object drop delay
x080DF5BE - Dropping particles
x080DF620 - Hand vanishing sound effect


x080DF6F4 - Carry (x0B) - Non-interaction ; Part 1 (Particle stuff)
x080DF74C - Time before hands start moving
x080DF77E - Carry sound effect 1
x080DF784 - Particle speed
x080DF786 - Particle amount
x080DF794 - Particle group Z coordinate
x080DF7A0 - Particle graphic
x080DF7D6 - Particle radius


x080DF820 - Carry (x0B) - Part 2 (Hand stuff)
x080DF828 - Carry sound effect 2
x080DF834 - Hand graphic
x080DF848 - Hand creation speed
x080DF850 - Hand movement speed
x080DF872 - Hand spinning/growth time
x080DF87E - Hand spinning/growth speed
x080DF888 - Maximum hand size


x080DF91E - Carry dust cloud graphic (on dropping item)
x080DFB0C = Carry - Part ?


x080DFC3D - Whirlwind (x0E) - Interaction: Bush leaves
x080DFC88 - Graphic (leaf) spinning speed - x80 is the default, higher numbers make them spin faster
x080DFCD5 - Whirlwind (x0E) - Interaction: Bush reaction
x080DFCDA - Delay before graphic (bush) vanishes (high numbers = vanishes sooner)
x080DFCDC - Graphic shrinking speed
x080DFCF8 - Whirlwind (x0E) - Interaction
x080DFD00 - Whirlwind (x0E)
x080DFD20 - Whirlwind type (normal vs. bush, but there is an unfinished type that also uses leaves from the looks of things)
x080DFD4E - Plant graphic for check (sprite #372)? - Untested
x080DFD5A - Plant graphic for check (sprite #373)? - Untested
x080DFD74 - Whirlwind graphic
x080DFDA6 - Graphic animation - x02 is the default
x080DFDAE - Distance from player - x00 is the default, higher numbers will move the graphic further from the player (does not affect real distance, only visual)
x080DFDBA - Relative horizontal X coordinate - x0A is the default, lower numbers make the graphic appear closer, but only if facing in a horizontal direction
x080DFDF6 - Graphic growing speed/size 1
x080DFDFE - Maximum graphic size while growing - x0A is the default, lower values will make it larger, larger values will make it smaller
x080DFE0A - Maximum size while growing (but not when fully grown)
x080DFE14 - Frame related - x01 is the default, higher numbers will result in the graphic’s animation skipping frames
x080DFE16 - Timing/delay between each frame of growth
x080DFE22 - Whirlwind sound effect 1
x080DFE26 - Graphic vertical stretch (x080DFFE8 has additional stretching data)
x080DFE3E - Delay before whirlwind picks up leaves (on interaction with bush object)
x080DFE8E - Leaf graphic (bush interaction)
x080DFEBA - Delay between each leaf being blown around
x080DFECA - Duration of whirlwind post-bush
x080DFED0 - Delay before player regains control (on bush interaction)
x080DFEDE - Time until sound effect 1 stops playing
x080DFEE4 - Whirlwind sound effect 2
x080DFF5A - Leaf graphic (unused/unfinished interaction)


080E02EC = Set as NPC’s thumb script when Halted - Causes random palette swaps.
080E0308 = 
080E035C = 


x080E03CC - Catch (x0D)
x080E0416 - Catch positioning
x080E0458 - Catch graphic
x080E046C - Catch sound effect 1
x080E0490 - Catch palette swap
x080E04AC - Catch distance - x0A is the default, lower numbers make it appear further away
x080E04C4 - Catch hand Z coordinate - x0A is the default, lower numbers will raise the hand further up
x080E04E8 - Graphic size 1 - xC0 is the default, higher numbers make it larger
x080E04EE - Graphic size 2 - x0A is the default, higher numbers make it smaller
x080E04FA - Graphic size 3 - x80 is the default, higher numbers make it larger
x080E0504 - Hand growing speed
x080E0506 - Hand growing frame delay - x01 is the default, higher values increase the delay between each frame of growth
x080E0510 - Delay before hand opens
x080E0518 - Hand opening animation
x080E051E - Delay before hand moves toward the ground - x0F is the default, higher numbers increase the delay, but the opening/closing animation can loop if too high
x080E0524 - Delay before the hand stops/hits the ground - x09 is the default, higher numbers will make the effect end later
x080E052A - Movement speed when lowering itself to the ground
x080E053C - Hand closing animation
x080E0542 - Catch sound effect 2
x080E055A - Delay before the hand moves upward again
x080E0560 - Time before the hand stops moving upwards
x080E0564 - Floating hand movement speed
x080E056C - Delay between each floating frame - x01 is the default, higher values increase the delay between each frame of levitation
x080E0578 - Delay before the hand returns to the player
x080E057E - Catch sound effect 3
x080E0584 - Hand shrinking speed
x080E0592 - Shrinking hand final relative distance - x0A is the default, higher values will make it vanish into thin air further in front of the player, lower will invert that further
x080E05AA - Shrinking hand final Z coordinate - x0A is the default, lower numbers will lower its destination, but it has a maximum coordinate anyway
x080E05D2 - Shrinking speed (I think, can have its size inverted)
x080E05DE - Shrinking phase starting size
x080E05EA - Delay between each shrinking frame


x080E09C0 - Lash (x11)
x080E0A0C - Lash graphic
x080E0A50 - Lash sound effect 1
x080E0B20 - Lash upper Z coordinate
x080E0B32 - Animation
x080E0B38 - Lash movement speed
x080E0B3E - Lash end timing - x0F is the default, higher numbers will make it end later, lower numbers will make it end sooner
x080E0B50 - Lash sound effect 2
x080E0B68 - Amount of particles - x0F is the default, but going higher will make Lash pegs/ropes react strangely (more noticeable with more particles)
x080E0B7C - Delay before graphic vanishes
x080E0BF2 - Lash sound effect 3
x080E0C2C - Lash sound effect 4


x080E0DD4 - Retreat (x0F)
x080E0DFE - Delay before facing the screen
x080E0E04 - Duration + rotation when turning toward the screen - x80 is the default, <x80 turns counterclockwise and lowering this further slows the turn down, >x7F turns clockwise and raising this further slows the turn down
x080E0E06 - Delay before PC raises arms 1
x080E0E12 - Delay before PC raises arms 2
x080E0E1A - Retreat sound effect 1
x080E0E22 - Arm raising animation
x080E0E2A - Delay before PC floats into the air
x080E0E30 - Retreat sound effect 2
x080E0E38 - Palette swap when floating into the air
x080E0E3E - Animation when spinning
x080E0E52 - Delay before floating up into the air (but not before spinning)
x080E0E7C - Something related to displaying particles - x50 is the default, xC0 will disable the particles and related sound effects
x080E0E8A - Particle burst frequency - x00 is the default, higher numbers result in a lower particle frequency + count
x080E0EA0 - Particle graphic        
x080E0EEA - Delay before Retreat is over
x080E0EEE - Time before particles stop
x080E0F24 - Delay before leaving the current room


x080E1024 - Avoid ring effect
x080E1056 - 


x080E1214 - Avoid (x10)
x080E1294 - Avoid sound effect
x080E129C - Amount of time before spinning
x080E12A2 - Spin check (x01 to spin)
x080E12A6 - Duration of spin
x080E12AC - Sprite palette Swap
x080E12AE - Silhouette/normal
x080E12B0 - Avoid Length 1
x080E12BA - Avoid Length 2 (same effect as above?)


080E137C = 
080E13B0 = 
080E13E8 = 


080E1420 = Psynergy Ring Effect Duration (r1 = argument, higher values give a longer duration)


080E15FC =
080E1650 = 
080E1678 = 


080E1F2C - Arrow (x1D)
080E1F9A - Something bow-related - xF9 to include bow, xFA to exclude it
080E1FAC - Relative X coordinate - x10 is the default, higher numbers make it go back further, lower numbers move it further ahead
080E1FAE - Bow Z coordinate, defaults at x10
080E2010 - Bow & Arrow distance from player - x80 is the default, lower numbers bring it closer and higher numbers push it further away
080E2028 - Bow & Arrow Z coordinate - x80 is the default, higher numbers will move it higher up
080E204E - Something arrow-related - xE8 to include arrow, x09 to exclude it
080E205C - Relative X coordinate - x0C is the default, higher numbers make it go back further, lower numbers move it further ahead
080E205E - Arrow Z coordinate, defaults at x08


080E2264 = Cyclone-related?


x080E25E8 - ??? (Looks like Cyclone (x19) interaction stuff, probably the same for the following functions) - Called by Mercury Beacon in map 133 (which, along with a couple heightmap tile placements, seems to be leftover from GS1 maps 58/59).
x080E2718 - 
x080E2744 -
x080E28D4 - 
x080E2A68 - 
x080E2ACC -
x080E2C38 -
x080E2D40 -
x080E2D64 -
x080E2EC0 -


x080E3074 - Cyclone (x19)
x080E30DC - Wind current palette modifier 1
x080E30E0 - Wind current palette modifier 2
x080E30E8 - Wind current palette modifier 3
x080E3136 - Wind radius and whirlwind graphic width
x080E3164 - Wind current centre modifier 1 (changing this offsets current, can make it rotate around you)
x080E3166 - Wind current centre modifier 2 (changing this offsets current, can make it rotate around you)
x080E3194 - Whirlwind graphic
x080E31A0 - Graphic animation 1
x080E31AE - Delay before cyclone starts, but after player starts spinning
x080E31B4 - Cyclone sound effect 1
x080E31BE - Whirlwind graphic height modifier (lower numbers make the graphic taller, max size dependent on following value)
x080E31C8 - Whirlwind graphic growth speed
x080E31CA - Whirlwind graphic animation 1 speed
x080E31D0 - Delay before wind current appears/whirlwind graphic growth/stretching length (time)
x080E31E2 - Duration of animation (pre-leaves or warp)
x080E320A - Wind current intensity/thickness - higher numbers make it thicker
x080E3212 - Wind current radius (visual only)
x080E3238 - Wind current rotating speed (visual only)
x080E3246 - Wind current growth speed/delay
x080E3248 - Cyclone finishing speed (higher numbers make it end sooner, default is 1)
x080E3250 - Cyclone finishing speed - similar to previous value, but changes are more gradual


080C8880 (080E3698) = Attach cyclone to entrances. (From sky.)
080C8888 (080E37E0) = Attach cyclone to entrances. (From below.) (Called from Initialization code.)




080E3698 = 
080E37E0 = ???




080E38C8 =  Related to Blaze?


x080E3D04 - Blaze (x1A)
x080E3DA2 - Blaze (normal) graphic height
x080E3E72 - Branch that allows for normal Blaze
x080E3EBC - Blaze (flame) graphic height
x080E3FA8 - Blaze (flame) sound effect
x080E404C - Blaze (flame) leftward (lower value is rightward) tilt
x080E404E - Blaze (flame) upward (lower value is downward) tilt
x080E40C0 - Blaze (flame), something to do with smoke, changing instruction can remove smoke


080E4244


x080E48C9 - Blaze graphical stuff
x080E4974 - Distance of Blaze (how far flames can go)
x080E497E - Length of Blaze (how long flames can last before vanishing)
x080E4982 - Upward slant, higher values raise end flames while lower values lower it


x080E4A34 - Sand (x17)


x080E4D9D - Burst (x15) - Part 2
x080E4DDE - Pad and particle palette range (red)
x080E4DE4 - Pad and particle palette range (green)
x080E4F2C - Interaction blast radius (larger numbers = greater radius)
x080E5192 - Burst [interaction] sound effect 2
x080E51B8 - Interaction pad growing speed
x080E51C8 - Max interaction pad size
x080E51E0 - Delay between interaction pad growth and explosion
x080E520C - Burst [interaction] sound effect 3
x080E5242 - Number of starting blast graphics before blast chain
x080E5258 - Delay between initial blast and blast chain (graphics for it will still loop); lower than 8 ticks may cause the pad to linger
x080E5274 - Loop frequency of following sound effect; uses an AND instruction to do so
x080E527C - Burst [interaction] sound effect 4 (the looping blast chain one)
x080E5284 - Delay between rock/debris spurts
x080E528C - Strength/frequency of screen shaking during blast chain
x080E52A8 - Frequency of blast chain graphics
x080E52B8 - Chain blast length/duration
x080E52DA - Delay before final blast
x080E5320 - Strength/frequency of screen shaking during final blast
x080E532E - Burst [interaction] sound effect 5
x080E536A - Duration of interaction animation and the delay before the player can move again
x080E5724 - Bust (x15) - Interaction
x080E572C - Burst (x15) - Part 1 (Main)
x080E57C2 - Burst pad (standard), x02 to include and > x03 to exclude
x080E5800 - Burst particles (not sure what it does to them, can delay though)
x080E5814 - Particle X coordinate
x080E5816 - Particle Z coordinate
x080E5848 - Circle/Particle priority - x00 for circle on top, x01 for particles on top
x080E584C - Particle size - x80 is the default
x080E585C - Particle radius
x080E5888 - Particle speed 1 (other adjustments allow them to reach the centre without overshooting it)
x080E5890 - Particle attraction (how they go towards the circle)
x080E58CC - Particle speed 2
x080E58EC - Explosion graphic (I think)
x080E5910 - Explosion X coordinate
x080E5912 - Explosion Z coordinate
x080E5976 - Burst [universal] sound effect 1
x080E597C - Delay before pad, particles, or animation begin, but after sound effect 1
x080E59F4 - Delay before player regains control


080E5A64 = 


x080E5D5C - Pound (x12)


x080E68D0 - Scoop (x14) - Part 1 (Utility)
x080E694E - Hand graphic
x080E69DE - Unknown palette swap?
x080E69F0 - Dirt hole graphic
x080E6A06 - Gray hole graphic
x080E6A34 - Scoop tile check - x00 is the default, changing it will cause a simple looking tile to appear where the hole graphic should appear
x080E6A58 - Scoop sound effect 1
x080E6A62 - Scoop Z coordinate - x80 is the default, raising this will make the hand move up more, but this does not affect the hole
x080E6A72 - Delay before the hand animated
x080E6A7A - Hand animation while moving toward the ground
x080E6A80 - Delay before the hand digs a hole in the ground
x080E6A86 - Time before the hand hits the ground - x09 is the default
x080E6A94 - Hand movement speed while going to the ground - x01 is the default, higher values will slow it down
x080E6AA8 - Hand animation when it hits the grouand/is being lifted back up
x080E6AAE - Scoop sound effect 2
x080E6B2E - Tile check (#?) - x04 is the default, making it x00 seems to remove a tile restriction (namely, one can dig into the rocks on Apojii’s beach)
x080E6B88 - Unused/unavailable copy of Scoop sound effect 3 (it matches the third one, but it doesn’t look like it plays at all)
x080E6BC6 - Code for not getting an item (?) - Changing xC8 to xFF can guarantee an item every time the spell is cast (if changed after an item is received), but this writes the item/coin total (R2) to x02030D34
x080E6BD2 - Code for getting an item (?) - If R2 (the item value) is 0, the code will branch here 
x080E6C42 - Dust X coordinate tilt - x08 is the default, higher numbers will make the dust blow further to the left
x080E6C48 - Dust Z coordinate tilt - x08 is the default, higher numbers will make the dust billow higher up


x080E6BE4 - Hand movement speed while going to the ground (when it hits the ground depends on the value at x080E6A86)
x080E6F94 - Dust graphic 
x080E6F98 - Dust radius
x080E6FA4 - Pouring dirt graphic


x080E70F8 - Scoop (x14) - Part 2 (Receiving Loot)


x080E716C - Scoop (x14) - Part 3 (Picking Loot)


080E7238 = Anemos Inner Sanctum = Statues that follow your movement. (At least graphic sparkles and sound.)


080E7804 = 


080E74D8 = 


x080E781C - Teleport (x1E)
x080E7838 - Stores xFC89 at x203016A. XFC88 is the normal world map, xFC89 is the Teleport one.


x080E7844 - Parch (x16)
x080E7890 - Parch pad distance from player - x80 is the default, higher numbers will move it further away (this also allows it to work from further away as well)
x080E7A1E - Steam area final X coordinate
x080E7A22 - Steam area final Z coordinate
x080E7A52 - Parch sound effect 1
x080E7A58 - Delay before Parch pad comes up
x080E7ACE - Steam radius - x90 is the default, lower values will make the radius smaller
x080E7B2E - Steam frequency - x3F is the default/maximum, lower values will decrease the frequency of the steam vapours
x080E7C40 - Parch pad red hue - x1C is the default, higher numbers make it more red/orange, lower numbers make it more green/blue
x080E7C42 - Parch pad fade - x0C is the default, higher numbers will fade it out more, making it appear pink and white if the previous value is default
x080E7C46 - Parch pad green hue - x1F is the default, seems to be similar to the above red hue modifier
x080E7C4A - Parch pad tertiary hue 1 (secondary pad stage) - x1F is the default, and is similar to the first red hue value 
x080E7C4E - Parch pad tertiary hue 2 (secondary pad stage) - x1F is the default, and seems to control the amount of orange in the pad (if the red hue is the default value)
x080E7C52 - Parch pad tertiary hue 3 (secondary pad stage) - x1F is the default, and seems to control the amount of yellow in the pad (if the red hue is the default value)
x080E7C56 - Parch pad tertiary hue 4 (secondary pad stage) - x1F is the default, and seems to control the amount of red in the pad (if the red hue is the default value)
x080E7C5A - Parch pad tertiary hue 5 (secondary pad stage) - x1F is the default, and seems to control the amount of pink in the pad (if the red hue is the default value)
x080E7D4C - Parch sound effect 2
x080E7D62 - Parch land pad maximum size
x080E7D6E - Delay before small pad shrinks
x080E7E82 - Parch sound effect 3
x080E7E8A - Parch water pad growth speed
x080E7EA2 - Parch water pad maximum size
x080E7EAE - Delay before white screen
x080E7EB0 - Parch end effect value thing - x01 is the default for having a white screen flash, x02 disables this and just goes straight to the tile replacement
x080E7EC4 - White screen flash palette - These three instructions will choose what GBA colour to use. At default, it goes to x7FFF, which is white
x080E7F0E - Palette sliding speed - x01 is the default, going up to x7F for an outward slide, while x80 - xFF are for reverse speed/inward slide (and x00 disables it)


x080E7B74 - Pad graphic (the circle)
x080E7B78 - Pad graphic tile grabbing (how it is displayed on screen)






080E7F94 - Magnet (x1C) - Calculation stuff (calls ARM function at 0300021C)


080E7FEC - Magnet (x1C) - Render Animated Ring


080E807C - Magnet (x1C) - Live Animation
 080E80DA - Reads duration
 080E80DC - Ring movement modifier (higher values cause the ring to move more)
 080E812C - Ring angling/distance? x40 centres the ring on player, other values shift it diagonally (NW/SE)
 080E8158 - r3 & r5 are ring and current palette modifiers
...
 080E827E - Reads byte that enabled duration counter
 080E8294 - Reads Magnet duration, for reducing it if /= 0
 080E82A8 - Reads Magnet duration, for ending it when it = 0
 080E82BA - Ends Magnet (set value to end based on start/finish byte and ability ID)


080E82CC - Magnet (x1C) - Starting Animation
 080E8410 - Spinning particles X coordinate
 080E8414 - Spinning particles Y coordinate - x04 is the default, x0A or x0B centres it better though
 080E8452 - Particle group spacing
 080E84A8 - Magnet duration: 999(decimal) is stored at r2 
 080E84B2 - Delay between casting and initial particle generation
 080E84C8 - Initial ring segment length


 080E84E0 - Initial ring segment 1
 080E84E8 - Palette 
 080E84EE - Initial ring segment 2
 080E84F6 - Palette
 080E84FC - Initial ring segment 3
 080E8504 - Palette
 080E850A - Initial ring segment 4
 080E8512 - Palette


#080E84D0 - ???
#080E84D8 - Initial particle graphic


#080E87B4 - Ring graphic
#080E87BC - Electricity graphic?


080E87C4 - Magnet interaction/ending?
 080E87E8 - Read player object index (what Magnet targets)
 080E87FC - Ending check
  02030CAC - Mobility flag: “Prevents” movement if set to 0 and prevents Magnet from ending when its duration hits 0
  02030CAD - Enables duration counter
  02030CAE - Magnet duration (16-bit)
 080E8826 - Ending sound effect


080E89E4 = Related to camera.
080E8B44 = 
080E8DB0 = 


080E9090 - Tremor (x13)


080E97C8 - Grind (x1B)
 080E97F2 - Delay before the screen shakes
 080E9838 - Duration of shaking screen
 080E986C - Delay between each camera movement (camera seems to move by roughly one pixel after each delay)


080E9940 - ??? (used in Hover code, possibly related to tile check)


080E9AEC - Hover (x18) - Interaction (just a bl to the function below)
080E9AF4 - Hover (x18)
 080E9B8E - Hover pad relative X coordinate
 080E9B90 - Hover pad relative Y coordinate
 080E9BB4 - Psynergy Ring Effect duration
 080E9BBA - Player animation (default is animation #5)
 080E9BC2 - Hover sound effect 1
 080E9BC8 - Delay before floating upward
 080E9C8E - Ground pad growing speed - x01 is the default, higher numbers make it grow more slowly
 080E9C90 - Ground pad growing speed - x01 is the default, higher numbers result in a faster growth/frame skip
 080E9C9A - Ground pad shrinking delay - x0A is the default, higher numbers increase the delay before shrinking
 080E9CBC - Maximum ground pad size, starts at this size when shrinking but doesn’t grow this large
 080E9CC4 - Ground pad shrinking speed
 080E9CD0 - Delay before ground pad vanishes
 080E9D34 - Hover sound effect 2
 080E9D3C - Floating distance speed - x80 is the default, but other values may cause a “warping” effect, where you are placed there at the set height automatically
 080E9D48 - Floating movement speed - x01 is the default, this is the actual movement speed
 080E9D5C - Set Hover height - x92 is the default, higher numbers result in a higher height, but this should be used in conjunction with the floating distance speed
 080E9D64 - Buoyancy modifier - xC0 is the default, changing this will modify how much you bob up and down in the air


080EA14C = Summon Tablet related (PC animation and sound effects)


080EA7C0 = ?
080EA8A8 = ?
080EA8D4 = ?
080EAA14 = ?
080EAB70 = ?


080EAB98 = (layer?/unused,tile type,height (for first slot/by tile)) (If not in list (0xFF?), will insert at end.) Returns index/slot.


080EABD0 = 


080EACE8 - Move pillar/object collision snap/positioning?
080EADFC - 
080EAEB4 - 


080EAF28 = find sprite at coords(sp,match_z) sp is x, z, y. ; Returns npcAddr if the npc is at the position, otherwise 0.


080EAF98 = Psynergy ring effect (when casting a spell), also used by Hover for pad graphic and placement and Burst for centre of particle pull (may be used by any utility that uses data table graphics)
080EB01C = (??? - used by Magnet as well as other utilities)
080EB298 = (??? - used by Magnet as well as other utilities; Function calls to #080DC390 and #080EB01C)
080EB2C8 = Function call to #080C89A6
080EB2D0 = Function call to #080C8978
080EB594 = 
080EB6A0 = 
080EB930 = 
080EB960 = Sparkly graphic related? - Alex appears animation in Venus LH prologue(arg=obj id - e.g. 0x9 for Alex.)


080EBC30 = ?
080EBC94 = ?
080EBD24 = ?
080EBE70 = ?
080EBE94 = ?
080EBEA8 = ?
080EBEB4 = ?
080EBEC8 = ?
080EBF68 = ?
080EBF94 = ?
080EC16C = ?
080EC1D0 = ?
080EC2B8 = ?
080EC484 = ?
080EC4D4 = ?
080ECE20 = ?
080ECF74 = ?
080ED030 = ?
080ED0A0 = ?


080ED2A4 = World map images (Arg:0=Regular map, 1=Teleport map)


080ED804 = Return 080F1140 ( World Map Town Locations )
080ED80C = Psynergy ring graphic (When casting a spell)
080ED90C = 


080EDACC = Battle Encounters
 0000 = Encounter rate/frequency.
 0000 = Recommended level for average PC. (Higher than this (up to +5) may makes battles happen sooner.)
 0000 *8 = Monster Group indexes
 00 *8 = Which battles are more common than the others.
Note: x080EE060 - Lemuria Ship random encounters(?)


080EE6D4 = Assigns Battle Encounters to Maps
 000E = Room
 FFFF = Door
 FFFF = Story flag Index
 11 = Battle Encounters Index
 00 = Battle Encounters Index 2 (GS2-only? (Not in GS1) - When above one not used. Usually 0, but not for all maps.)


080EEDBC = Assigns World Map Battle Encounters (080EEF34 for Ship)
 0001 = Area Type (0x00-0x13) (0001=Intro area, 0007=Eastern seas, 0008=Western seas… etc.)
 0004 = Terrain type
 FFFF = Story flag Index
 000E = Battle Encounters Index (Can’t remember if it’s the same as above table?)

080EEF54 = Djinn battles?
 0001 = Battle Encounters Index
 0001 = Group (Which of the eight monster groups? (0-7))


080EF094 = Room Music reference Table
 0001 = If Door is x8000+, this is the Room number, otherwise, Area number. (Rooms w/ same name.)
 7FFF = Door
 FFFF = Story flag Index
 004A = Song


080EF4A4 = Room Name reference Table
 0000 = If Door is x8000+, this is the Room number, otherwise, Area number. (Rooms w/ same name.)
 7FFF = Door
 0000 = Room name index
 0000 = Unused?


080EF81C = 8 bytes unused?


080EF824 = Sanctums
 0009 = Room needed to be accessed.
 FFFF = Door needed to be accessed.
 0009 = Map to Sanctum Warp to.
 0002 = Door to Sanctum Warp to.
 0000 = Ship X
 0000 = Ship Y
 C000 = Ship Direction
 0000 = Unused?


080EF984 = Assigns Battle Backgrounds to Maps
 80000048 = Background index from Master File Table.
 00000004 = Map: Venus Lighthouse
You can either assign another background be prefixing with 8*******, assign this background with another map as well (without the 8 flag), or end the list with 00000000.


080EFD1C = Assigns music to battles.
 82F2 = Music (8xxx, where xxx is the song ID)
 0673 = Battle (0xxy, where xx is the encounter group index and y is the specific encounter within that group)
Multiple battles can be listed after a song is defined; define a new song to end a list. Earlier entries have priority; assigning two songs to the same battle means that the first song plays.


080EFD70 = Palette menu’s compressed pixel data. (Colors & numbers 0-31.)


080EFF22 = Non-treasure text #s for Event IDs 0xF2-0F7.


080EFF28 = Event/Utility(?) detection bank, 8 bytes per entry (not all utilities are represented in this bank, not sure about each part being a 16-bit value)
 0003 - Utility ID
 0010 - X/Y tolerance. ( aka: sqrt(x^2 + y^2) ) - Max detection distance radius (Frost can only detect an obstacle from one tile away; Douse 2, Catch 3, and so forth)
 0008 - Height tolerance.
 1800 - Direction tolerance.
(080EFFD8)


080F0308 = Voice Assignment
 xxxx = Sprite ID
 xx = Voice ID (Valid numbers may be 00, 04, 08, 0C, 10, 14, 18, and 1C, I think. FF for no voice.)
 xx = Unused?


080F06D8 = Weeping scripts. (0 to 3 shakes.)


080F0E9C = 
080F0EA4 = 4-directional movement
080F0EC4 = 8-directional movement
080F0EE4 = 


080F1040 = 


080F1100 = 


080F1120 =
 
080F1140 = World Map Location Markers (Used to set flags when visited.) (0x14 bytes/entry, 0 determines end of list?)
8-bit = flag (relative; starts from x180 + flag_number)
8-bit = dot (left=teleport map ; right=view map)
 0 = No dot
 1 = Yellow dot
 2 = Blue dot (Teleport Map: puts you on ship if you teleport to it.)
16-bit = sprite
16-bit = location X
16-bit = location Y
16-bit = sprite rotation (essentially a horizontal flip argument)
16-bit = flag for whether to render location (1st digit 0 = unset, 1 = set) - See Mars Lighthouse on/off states
16-bit = map id (for loading name string)
16-bit = 
16-bit = map id (for placing ship)
16-bit = door




080F17A8 = Room Table/Map Table (8 bytes per entry)
 0649 = Map Code File Index
 00   = Area (When this changes, Area flags x300-x3FF reset.) (Used in room names.)
 01   = Type - Whether you are in a town or not?  Retreat will not work with 02.  Usually 01 or 02.
 0000 = Index to MFT indexes in 0802F380 table for Map/Palette/Tileset data.
 0000 = Outdoor? ; Usually 0000 or 0001


(080F21D0) = End script command?
080F21D4 = Copied to 020301EC
 0000 = Default Party Leader
 FFFF = ?
 080F21D0 = Script
 012C0000 = X
 00000000 = Z?
 012C0000 = Y
 00005BB0 = Direction


080F2204 = Treasures/Treasure Table
 4005 = 4*** might be used to indicate this is a map number. ; 005 is Venus Lighthouse
 FFFF = Flag index (Flag must be unset to use treasure list under this header)
Room’s treasure list:
 0080 = The 8 means a treasure chest should appear. 


This number defines which string to display, starting from #3525
0000 = Nothing.
0001 = “[Name] checked the chest…”
0002 = “[Name] checked the jar…”
0003 = “[Name] checked the barrel…”
0004 = “[Name] checked the wall…”
0005 = “[Name] checked on the ground…”
0006 = “[Name] examined the rock…”
0007 = “[Name] peered into the hole…”
0008 = “[Name] examined the grave…”
0009 = “[Name] checked the tree…”
000A = “[Name] searched the underbrush…”
000B = “[Name] checked the door…”
000C = “[Name] checked the stone pillar…”
000D = “[Name] checked the wooden box…”
000E = “[Name] checked the bed…”
000F = “[Name] searched the bookcase…”
0010 = “[Name] inspected the stone coffin…”
0011 = “[Name] checked the fireplace…”
0012 = “[Name] peered into the water…”
0013 = “[Name] checked the stone pillar…”
0014 = “[Name] examined the stalactite…”
0015 = “[Name] checked the boards…”
0016 = “[Name] peered into the fountain…”
0017 = “[Name] looked in the oven…”
0018 = “[Name] looked on the table…”
0019 = “[Name] checked the stone statue…”
001A = “[Name] examined the stone tablet…”
001B = “[Name] searched the shelf…”
001C = “[Name] peeked into the wardrobe…”
001D = “[Name] checked the firewood…”
001E = “[Name] looked through the books…”
001F = “[Name] peered into the well…”
0020 = “[Name] gazed into the pond…”


Treasure Type
0080 = Treasure chest
0081 = Mimic
0082 = Psynergy Stone
0083 = Visible/Buried Item
0084 = Summon Tablet
0085 = Item in pond


 0000 = Location index.
 0F00 = For this to be available, this flag must be off in the flags. When the item is retrieved, the flag is set.  If 1F00, then the item is always available only when the flag is set. (The flag is never unset.) It doesn’t seem like you can use 1*** when you have a flag value in the header.
 00B4 = The actual item you’ll get. 8*** for coins. (Or which mimic you fight,/ ignored of Psynergy stone/summon if tablet.)


 4008 = More item entries could go here, but since we have 4***, this is for another map.


080F341C = 
NPC Behaviors?
080F3428 = 
080F34E4 = 
080F34E8 = 
080F34F4 = 
080F3500 = 
080F350C = 
080F35C8 = 
080F3614 = 
080F373C = 
080F3750 = 
= 


Weather graphics
080F3798 = Rain
080F385E = Snowfall + Northern Reaches Horizon Snowfall
080F38B2 = Ceiling Dust
080F3900 = Blizzard


080F393C = 
080F3940 = 
080F3954 = Area palette swaps during utility use (may have other uses as well); either 8 or 9 of them, and they are read as 32-bit values
080F3978 = 
080F3984 = Particle graphics (Burst’s purple particle is first, but there may be more in here); uncompressed 8x8
080F3BC4 = 




080F8000 = PC MENU CODE SECTION
080F80A8 = Clear flags 152 and 166 
080F80C4 = Set flags 152 and 166
080F80E0
080F811C = create_panel(pntr, x, y, width, height, ?) Return ? (Note: May do some unknown things? It has a call to 08038010.)
080F815C = delete_panel(pnl_pntr_addr, unknown flag) //Like clear_panel, but also removes the pointer to its data.
080F8170 = Character Mini-Status panel(RAM pointer???, target_ID, 0?, panel_type)
 080F8220 = Poison (Status Ailment)
 -Display Class, HP, PP, EXP stats
 080F83F0 = Display class name
 080F8408 = Display stats HP and PP labels and values. (Current / Max)
 080F8410 = Display Exp label and value
 -
 080F843E = NPC (Class name)
 080F8464 = Can't equip (?)
 080F8514 = Nothing
 080F8522 = Learned
 080F8526 = Nothing
 080F8534 = Will learn
 080F8578 = Attack (labels and values for stat boosting items)
  080F8590 = Attack (stat) char cap
  080F8594 = Attack (stat)  X coordinate
  080F85B0 = Defence (stat) char cap
  080F85B4 = Defence (stat)  X coordinate
  080F85D2 = Agility (stat) char cap
  080F85D6 = Agility (stat)  X coordinate
  080F85F0 = Luck (stat) char cap
  080F85F0 = Luck (stat)  X coordinate
080F8610 = display_number(number, pnl_pntr, x, y) //right-align (x is right side); width is auto-sized.
080F8658 = display_stats_hp_pp(PC_pntr, pnl_pntr)
 080F866C = Uncompressed “/”
 080F86BE = Uncompressed “PP”
080F8708 = display_stats_atk_def_agl(?, ?, ?) [item menu]
 080F8718 = Attack
 080F8770 = Defence
 080F87C8 = Agility
 080F87D8 = Current Agility stat
080F8840 = display_hand_cursor
080F8888 = display_icon(addr) - convert to OAM format(resource addr) (Affectively updates icon placement on screen.)
 - X, Y, no flips/no rot/no scaling/no double size
080F88C4 = loads and/or displays portrait(unused, spriteID)
080F88D0 = display_panel_scrolling_arrows
080F89A4
080F8A44 = Hand cursor animation
080F8AB4
080F8BBC = display psynergy icons() (Calls below with args: 0x6C, 0x28, 0x8.) (Is this unused?)
080F8BCC = display psynergy icons(x,y,columns) (Limit is 32 icons)
080F8C18 = display psynergy icon(addr of a pntr,cell,x,y,columns) (x and y are positions for tab le.)
080F8C54 = display item icon(addr of a pntr,cell,x,y,columns) (x and y are positions for table.)
080F8C94 = display item icons(y_flag,unused,columns) (Limit is 15 icons) x is 0x74. If y_flag is 1, y=0x38, otherwise 0x28. ; 0x28 is used, but not sure about 0x38? (Could this be evidence that the button directions box once didn't exist? - Or perhaps maybe it was the “centered” position?)
080F8CE8 = Pop-up box(text,x,y) (Has panel call) Disappears when A, B, or Start is pressed. If y=-1, places on description box.
080F8E08 = Item sort by item type, equipped, and item id
080F8F40 = Retrieve item types table(s) for sorting
080F8F9C
080F9108 = 
080F9170 = Page Bar Rendering (unk_addr [02031450],entry_count?,entry_count_per_page); page count is arg1 / arg2
 080F9170 = Tile to start page count from (+x31 = “1”)
 080F91AC = Abort routine if page count </= 1
 080F91BA = Left Arrow Tile
 080F9208 = Right Arrow Tile
080F9224 = entry_highlight_control (r0, r1, r2, r3) (from the looks of things)
080F92AC = 
080F92DC = display icon list(# of icons,offset/index,unused,x,y) (one column)
080F9374 = display coin amount and “Coins”(pnl_pntr)
080F93A4 = Is this for repositioning/resizing panels? If so, then (pnl_pntr,x,y,w,h) (Not sure if x/y is swapped with w/h or not.)
080F93B8 = Plays music; returns 1.
080F93C4 = ??? - Clears flag 150 
080F9448
080F9464 = 
080F9480
080F948C
080F9498
080F94A4 = Items menu
080F9644 = (Handles user input in items menu)
 080F9672 = menu state switch statement (13 cases, switch on R2)
   00 - 080F96B8 - Inventory overview/select character
   01 - 080F9718 - Detailed view of character inventory
   02 - 080F98C8 - “Use”: select target to use item on.  Only when target required
   03 - 080FA0B0 - “Equip”, includes “you are cursed”
   04 - 080F9B96 - “Give” part 2: “equip this item?”, give quantity, show “given” text, etc
   05 - 080F9A18 - “Drop”
   06 - 080F99A4 - “Give” part 1: select give target
   07 - 080F9DD6 - “Give” part 3: “swap it for what?”
   08 - 080FA280 - ??  Top of loop.  Exits loop&inventory when [sp,#0x18] is not 0
   09 - 080F9782 - Select item (goes to Use/Equip/etc screen)
        Also handles all options until they require a different UI screen/message box (90% sure)
    See also: Target:All items (e.g. Spirit Ring, Aroma Ring)
   0A - 080FA228 - “Details”
   0B - 080FA18A - “Remove”
   0C - 080FA26C - Shouldn’t be reached - default case check has failed.  Falls through to default case
   ?? - 080F9682 - default case.  sets [sp,#0x18] to 1 then loops to case 8, exiting inventory.
080FA2D0 = update_after_item_use(item_id, user_id, target_id); this plays a sound effect depending on whether the item is used successfully, and if it is will also force-update user and target stats; if not then it loads text (despite not needing to)
 080FA31E = Loads text line 4384 (“You recovered all HP!”)
080FA368
080FA3D4 = display_icon(relative positioning)? - Not 100% sure
080FA458 = Set all 32 icons to animation 0xD (blank?)()
080FA478
080FA50C
080FA5A4 = (Has 2 panel calls)
 080FA640 = Loads text line 4280 (“L + A: Arrange items”)
080FA84C = See 081004B8 = Weapon/Head/Shield/Chest panel
080FA870 = item_selection_menu(?) = Gets called when selecting Use and Give menu options
 080FA9D4 = Loads text line 4191 (“Trade for what?”)
 080FA9EE = Loads text line 4190 (“In stock”)
 080FA9F4 = Loads text line 4192 (“None in stock”)
 080FAA96 = Loads item description text (line 146 onward)
080FABE0
080FAC58
080FACA0 = is_not_resource_booster(item) - Item ID; from Apple (193) to Lucky Pepper (196), return 1; else return 0
* Used to differentiate between “display HP/PP” panel and “display Attack/etc.” panel when using field items
080FACB4
080FACD8
080FAD1C = getTotalItems(pc) - Counts how many slots filled.
080FAD48 = getItemCount(pc, item id) - Adds quantity of multiple slots together.
080FAD88 = Retrieve PC inventory - returns an item count (PC_address, item list destination, 0 (unused))
 in field; adds “icon” for empty slots << Was here earlier/probably should be removed.
080FADD0 = checks a target’s items, but currently unsure of the purpose <- research later
080FAE2C
 080FAE76 = Loads text line 4102 (“You have no items.”)
080FAE8C
080FB0A4
080FB104 = option_selection_panel
080FB410 = flag_applicable_item_menu_options(sp + x08)
 Usable byte array: b-0, b-1, b-2, b-3, b-4, b-5 (6 & 7 may be unused)
 080FB438 = Item type check; if “Item”, then +1 to b-0 and -1 to b-1; otherwise -1 to b-0 and +1 to b-1
 080FB46E = call to get_item_use_type; +1 to b-0 if usable, else -1 to b-0 if unusable
 080FB482 = Broken flag (x400) check; if broken, then item is unusable; -1 to b-0
 080FB4A8 = Can target equip item; if not, then -1 to b-1
 080FB4B4 = +1 stored to b-2, b-3, and b-5
 080FB4C4 = +1 to b-4 and -1 to b-1 if item is currently equipped; else -1 to b-4
 080FB4DC = -1 to b-4 if item can’t be removed, and also to b-3, b-5 if equipped
 080FB51A = Item Event Scenario check; if used for an event, then item is usable (even if broken); +1 to b-0
 080FB522 = Unsure? -1 to b-3 if x </= 1 (quantity?)
 080FB538 = Important item check; -1 to b-5 if item is flagged as important
080FB554
 080FB578 = Loads text line 4195 (“Use”)
080FB638 = get_item_use_type(pc, item) - returns -1 if unusable by pc, if item does not have a use ability, or if it bestows psynergy; 0 if it is an event item; 1 if needs target; 2 if target-all
 080FB676 = Store ability address to r8
080FB6D4 = break_item_chance(); (RNG check for Item Use type 2)
 080FB720 = Loads text line 4279 (“It broke!”)
080FB738 = (Has panel call)
080FB780 = Details panel (in Item menu)
 080FB7A6 = Panel creation type
 080FB7AA = Panel vertical position
 080FB7AC = Panel width
 080FB7AE = Panel height
 080FB7B2 = Panel horizontal position
 080FB7D0 = Delay before text fills panel
 080FB88A = Backing Panel horizontal position
 080FB88C = 
 080FB88E = 
 080FB890 = 
080FB8AC
080FB8B8 = Item attributes panel (for equipment bonuses) (panel, item id, item amount you have (unused))
 080FB916 = Loads text line 4253 (“Effect of Equipping”)
  080FB91A = Label X coordinate
 080FB936 = Loads text line 4134 (“Attack”)
  080FB94C = Modifier X coordinate (including signage)
 080FB96A = Loads text line 4135 (“Defense”)
  080FB982 = Modifier X coordinate (including signage)
 080FB9BC = Equipment attribute pointer table; formatting
  080FBA2C = Add/Subtract
  080FBA42 = eStat
   080FBA94 = Additive modifier X coordinate (including signage)
  080FBA9E = Multiplier
   080FBAA6 = 4203 - “No effect” (first label from a list)
   080FBACA = Loads “.” from data table
   080FBACE = “.” X coordinate
   080FBAB0 = Base label X coordinate
   080FBABC = First digit (1, for multiplier > 0.9)
   080FBABE = First digit X coordinate (for multiplier > 0.9)
   080FBADC = First digit (0, for multiplier < 1.0)
   080FBADE = First digit X coordinate (for multiplier < 1.0)
   080FBAFC = Second digit X coordinate
  080FBB06 = Displays text
  080FBB20 = Nothing (no text)
080FBD34 = May prime an uncompressed character for display (usually assigned by a different function after)
080FBD9C
080FBDBC
080FBDDC
080FBE00
080FBE24
080FBE48
080FBE6C = (is this “drop item”???)
 080FBF78 = 4109 - “How many?”
 080FBFEE = 0607 - “???” (item name; gets added to an item read from the user’s inventory)
 080FC062 = Grab character_RAM address to read uncompressed name from
080FC12C = (Has panel call)
 080FC17A = Grab character_RAM address to read uncompressed name from
080FC1AC
080FC2E0
080FC480
080FC4C0
080FC558 = Item menu - highlight/selection code
 080FC5C8 = Entry highlight X coordinate
 080FC5EA = Entry spacing (highlight only)
080FC608 = (Calls function for list of 5 icons.)
080FC6BC = (Has panel call)
080FCAB8 = Psynergy menu
080FCBD8 = …(?,?,?)
080FCF14 = …
080FCF5C = …(?)
080FD000 = …(?,?)  = (Has 2 panel calls)
080FD294 = Psynergy menu - no spells
 080FD2D4 = 4129 - “No usable Psynergy.”
080FD2E8
 080FD40C = 4184 - Quake’s ability description (first description after Nothing/Attack/Defend)
080FD52C
080FD55C = Psynergy menu - shortcut selection
 080FD588 = 5115 - “[L][R]: Change shortcut”
 080FD598 = 4111 - “Shortcut”
 080FD65A = 4118 - “[L]:{ability name}”
 080FD60E = 4116 - “[L]: Set to [L]”
 080FD630 = 1447 - First ability name (sets {ability name} argument list)
 080FD65A = 4119 - “[R]:{ability name}”
 080FD674 = 4117 - “[R]: Set to [R]”
080FD6B0 = Populate Psy Icons in RAM (does a batch of 32 icons at once)
080FD6F0 = Clear/Fill RAM section (03002944 in tests) of/with character Psynergy list (for menus)
080FD80C
080FD8A0 = psy_menu_current_entry (?,null,): current entry selection (highlight, memory)
 080FD8F0 = 2181 - First ability description
 080FD924 = Entry highlight length (multiples of 2 only?)
080FD968 = Psynergy menu - Psynergy selection panel
 080FD9AA = 4112 - “[L][R]: Set shortcut”
 080FD9B8 = 4282 - “[L][R]: Change Char”
 080FDA00 = 4124 - “PP”
 080FDA7E = 1447 - First ability name
080FDAD4 = Psynergy menu - Set Shortcuts
 080FDDB0 = 4112 - “[L][R]: Set shortcut”
 080FDE04 = 4282 - “[L][R]: Change Char”
080FE164
080FE184 = Colosso Remnant: Choose a character menu
080FE240
080FE274 = Status menu
 080FE2C4 = Menu opening/filling delay
 080FE388 = Info panel coordinates/growth delay
 080FE3E4 = Menu closing/emptying delay
080FE49C = Button controls and/or conditions for keeping menu open?
080FE580
080FE638 = Status Djinni Collection screen
 080FE66E = 4166 - “[SE]: Return”
 080FE680 = 4167 - “Current Djinn”
 080FE784 = 1747 - “Flint” (first djinni in ability name list)
080FE894 = 
 080FE914 = Palette for elemental bullet icons when cursor is highlighting a spell in the status menus
 080FEB44 = Palette for every other elemental bullet icon in the status menus
080FEB58
 080FEBA4 = Text line 4406 - “Choose a character”
080FECFC = PC swapping in status menu(slot, 0/1=left/right)
080FEE04 = Status menu (creation?)
080FEE40 = Status menu panel stuff (has panel call)
 080FEE68 = Status panel width
080FEEC0 = Status menu selection stuff (has panel call)
 080FEF48 = Djinn row Y coordinate
 080FEF94 = B button sound effect
 080FEFEC = Text  line 4150 - “[A button press]:Psynergy”
 080FF06E = Ailment list cursor X coordinate
 080FF070 = Ailment list cursor Y coordinate
 080FF07A = Stat list entry limit, before cursor goes to eStat table
 080FF080 = Stat list cursor Y coordinate
 080FF082 = Stat list cursor X coordinate
 080FF08C = eStat table cursor Y coordinate
 080FF08E = eStat table cursor X coordinate
 080FF0D4 = Entry selection sound effect when moving cursor up
 080FF0EA = Entry selection sound effect when moving cursor down
 080FF100 = Entry selection sound effect when moving cursor right
 080FF116 = Entry selection sound effect when moving cursor left
 080FF13E = Character switching sound effect
080FF1F4 = Status menu highlights/selection
 080FF20E = Highlight X coordinate (ailments)
 080FF210 = Highlight length
 080FF24A = Highlight X coordinate (eStats)
080FF27C = Status menu (ailment descriptions)
 080FF29C = Text line 4365 - “You are down. Revive at a Sanctum”
 080FF2A2 = Description string 1 Y coordinate
 080FF2AC = Description X coordinate
 080FF2AC = Description string 2 ID grab
 080FF2B6 = Description string 2 X coordinate
 080FF2B8 = Description string 2 Y coordinate
 080FF2CA = Text line 4363 - “Your status is normal.”
080FF2E8 = Status menu (stat descriptions)
 080FF344 = Text line 4375 - “Your name and level. Experience...”
080FF370 = Status menu (other stuff)
 080FF3AC = Elemental Stat table (expanded) Y coordinate
 080FF3B6 = Elemental Stat table (collapsed) Y coordinate
 080FF3E8 = Ailment list background/clearing height
 080FF3EC = Ailment list background/clearing X coordinate (I think)
 080FF3EE = Ailment list background/clearing Y coordinate (I think)
 080FF3FA = Ailment list X coordinate
 080FF3FC = Ailment list Y coordinate
 080FF420 = Elemental Stat table size/coordinates (collapsed size by default, always this size)
 080FF42A = Font Colour (not for everything)
 080FF442 = Venus element bullet icon ID
 080FF444 = Venus element bullet icon X coordinate
* The other elemental bullets appear after this, and are coded the same way
 080FF47E = “Djinn” (label)
 080FF4A2 = “Lv” (label) - uncompressed address
 080FF4B2 = “Power” (label)
 080FF4C2 = “Resist” (label)
 080FF4C6 = Y coordinate of Resist label
 080FF530 = “/” - uncompressed address
080FF5BC = Status menu (HP, PP, etc. not recorded yet)
 080FF710 = Attack label text/line decrement
 080FF712 = Attack label X coordinate
 080FF714 = Attack label Y coordinate
 080FF71E = Defence label text/line decrement
 080FF720 = Defence label X coordinate
 080FF722 = Defence label Y coordinate
 080FF72C = Agility label text/line decrement
 080FF72E = Agility label X coordinate
 080FF730 = Agility label Y coordinate
 080FF73A = Luck label text/line decrement
 080FF73C = Luck label X coordinate
 080FF73E = Luck label Y coordinate
  [r1 & r3 are x coordinates/line spacing for the following entries]
 080FF744 = Attack stat/value
 080FF754 = Defence stat/value
 080FF764 = Agility stat/value
 080FF778 = Luck stat/value
080FF7B4 = ??? (status menu stuff)
080FF850 = Spell range graphic code?
080FF8E0
080FF94C = Status: Psynergy descriptions / Town/Battle usage text (Anything else?)
 080FFA98 = Psynergy entry highlight length
080FFB5C = Status: Psynergy names / “PP” label, class name, render icon list and define page bar parameters
 080FFBA4 = Icon List Relative Y coordinate
080FFCD4 = Status: Psynergy (Has panel call)
 080FFD68 = Load ability icons
080FFEE4 = Status: Item descriptions (Anything else?)
081000E0 = Status: Item names / “Attack”/”Defense” labels (Anything else?)
0810021C = Status: Item (Has panel call)
081004B8 = Weapon/Head/Shield/Chest panel
08100540 = List equipped items. (panel,pcItemsAddr)
081005E4
08100624
08100660
08100700 = Off screens all 32 icons() x=0xF8, y=0xA8
08100738 = (itemSlot, pcFrom, pcTo) (May remove item) (Calls below)
 081007AA = Item use type check; type 1 = “Single use”
 081007D2 = Item use type check; type 4 = “Item transforms”
 081007DA = Item ID (184 - Hermes’ Water) check; replace item if true
 081007DE = Item ID (185 - Empty Bottle)
081007F8 = Field ability formula/effect code (ability, user, target, is_item_flag)
 0810082C = When pcTo=9, Party Leader
 08100898 = Formula pointer list
  081008C4 = HP Healing formula
  0810095E = Stat-boost consumable items random chance to modify ability power (GRN picks from -1, 1, 0, 0); uses Utility formula
  08100A1E = PP Healing formula
 08100A88 = Pointer list for ability effects 1-58 (field effects, but only 1-5, 56, and 57 have unique effects by default)
08100D40 = grab_item_ability(item) Calls below with [item addr + 0x28] (item ability id)
08100D58 = assign_field_use_sound(psy) - Plays a sound based on Formula, Ability ID, and/or Effect ID)


Djinn Menu Stuff
08100E28 = 
08100E34 = 
08100E5C = Check flag x175:
Load either text string 12,295 (“To give your Djinni to[3]someone else, move it[3]like this.[2]”) or string 12,242 (says
the exact same thing); alternate text scripts based on demo flag
08100E7C = Djinn menu
 08100F7C = Instruction panel creation: x02 for instant (default), x01 for animated
 08100F80 = Instruction panel Y coordinate (r1)
 08100F82 = Instruction panel X coordinate (r2)
 08100F84 = Instruction panel height (r3)
 08100F86 = Instructional panel width (r0)
0810106C = Djinn Trading
081015B0
08101638 = (Has panel call and side-scrolling arrows)
 08101756 = Load MFT file x1FB (507): Page Arrow
08101860 = Counts character’s abilities and adds will learn/will forget flags depending on class changes
081019A4 = 
08101A04 = Determines if a djinni is set, standby, or recovering (djinni slot data)
08101A54 = Loads djinn name for a djinni in the owner’s list 
08101AC8 = Sorts djinn into lists in djinn menu (has elemental sorting on top of flag/numerical sorting elsewhere)
08101C0C
08101C18 = Djinn menu highlight control B (positioning? = used in help menu too)
08101C40 = Djinn menu highlight control A (size/spacing? = referenced in several places but unsure why)
 08101C6E = Highlight length
08101C7C = Highlight control D
08101D34 = Highlight control C
08101D5C = Djinn help menu
 08101D9A = 4456 - “Select the items”
 08101E14 = 4458 - “Djinn” (for an entry list)
08102008 = Djinn Menu
 0810219A = Hand positioning: target flag x01 check
 08102256 = Sets initial “Trade” selection highlight
 081022B6 = Text string 4321 - “Standby”
 081022BA = Text string 4320 - “Set”
 081022CA = Text string 4319 - “Give”
 081022E0 = Text string 4322 - “Trade”
 0810230E = Highlight positioning: target flag x01 check


08103064 = Count djinn of an element (???,PC ID, element (-1 for all elements)) - Returns djinn total of element to r0, but specific element tallies are bugged (only return two djinn; is this portion early or unfinished code?)
08103168
08103218 = Djinn stat change menu [not fully documented; has at least some overlap with class overview screen]
 0810337A = Current Attack stat/value
 0810338C = Current Defence stat/value
 081033A0 = Current Agility stat/value
 081033B6 = Current Luck stat/value
 08103494 = Lv label Y coordinate
 081034C2 = HP label
 081034D0 = PP label
 081034DE = Attack label
 081034EC = Defence label
 081034FA = Agility label
 08103506 = Luck label
  081035C0 = e:Level numerical labels (each is a tile)
 08103552 = Class label
 081036DC - Attack Stat Change Up Arrow X Coord
 081036EC - Atack Stat Change Down Arrow X Coord
 0810372E - Defence Stat Change Up Arrow X Coord
 0810373E - Defence Stat Change Down Arrow X Coord
 08103784 - Agility Stat Change Up Arrow X Coord
 08103794 - Agility Stat Change Down Arrow X Coord
 081037DA - Luck Stat Change Up Arrow  X Coord
 081037EA - Luck Stat Change Down Arrow X Coord
081039FC = Djinn Swapping menus (Has 4 panel calls)
 r0 = Djinn action menu (0=Trade, 1=Give, 2=Standby, 3=Set, 4+=Give)
 08104254 = Make page numbers > 9 labelled “?” instead (following code sets up tiles for page bar)
08104540 = Character Status (L button) (Has 3 panel calls)
 08104728 = Make page numbers > 9 labelled “?” instead (following code sets up tiles for page bar)
08104928
0810498C
081049C8
08104A58
 08104A9C = Stat boost arrow graphic
 08104AA0 = Stat drop arrow graphic
08104AA4
08104ACC
08104B18
08104B58
08104BA8
08104C00
08104CCC
08104D14
08104D5C
08104DA8 = Display icons in Item menu (may include other menus)?
08104E38
08104EF8
08104FE0
0810508C
081050B8
081050CC = Calls 08022318
081051A8 = Loads Djinn sprites in savefile select menu? + calls loading of 081050CD into function list
0810526C = Removes all sprites for djinn sprites in menu. + calls removal of 081050CD from function list ; No args.
081052AC = Set sprite for djinn sprites in menu. args(djinni_number, djinn_sprite, ?)
08105300 = Set sprite location for djinn sprites in menu. args(djinni_number, x, y)
0810532C = Set sprite direction for djinn sprites in menu. args(djinni_number, direction)
08105350 = Set sprite animate value for djinn sprites in menu? args(djinni_number, value)
08105370 = Status menu ailment icon display
 081053D2 = Icon count(+1)
081053A8 = Field menu status display - ailment icons
 081053BE = Icon grab address
 081053D2 = Icon count (+1)
 0810542C = Icon grab offset??? (seemed to crash)
08105468 = Field menu status icon clearing
 08105480 = # of icons (+1) entries to clear from (#020036E0) 
08105498 
081054CC
081054E0 = Field menu status display - arrangement
 081054FE = Icon X coordinate
 08105516 = Icon Y coordinate
  08105532 = Down
 08105536 = Label X coordinate
 0810553E = Flag that disables “Normal” label (stops it from appearing)
 08105540 = Label Y coordinate spacing
 08105542 = Icon Y coordinate spacing
  0810555E = Normal
08105580 = Flag setting for downed/poison/venom/curse/haunt in field, returns # of permanent status effects in play (???, ???, character_ID)
 


Data
081055F8 = 


08105838 = Graphics for Give/Drop bar. (1-30)
08105938 = “Lv”
0810593C = “HP”
08105940 = “/”
08105944 = “PP”
* There are more of these labels between here and the next entry
08105974 “Lv” = Used in field status menu
08105984 = Graphics for spell range; there are six ranges, and each value is 4-bit for palette/pixel; can be up to 16 pixels wide
081059DC = Hand cursor animation positions (8 bytes control movement; used in many field menus, but not djinn menu)
08105A38 = Menu-related?
08105A50 = Permanent status ailment icon IDs




08108000 = Shop Mechanics


Public
08108000 = 08108464 = Shop (Debug?) 200000 coins, Jenna and Mia are poisoned, Isaac is cursed, Ivan is haunted. & items.
08108008 = 081082C4 = Shop(shop,npc)
08108010 = 0810AA80 = Sanctum
08108018 = 0810B418 = Inn
08108020 = 0810B5C4 = Forge
08108028 = 0810B3EC = Gets Inn Price(inn) - Likely for dialogue rather than subtracting out of your coins. (Not sure.)
08108030 = 08108948 = (Cursor related)
08108038 = 081089E4 = 
08108040 = 08108A88 = (,,,)
08108048 = 08108AA8 = (,,)
08108050 = 0810875C = Sets up buy/sell bars(amount, color_4bit, graphic_addr)
08108058 = 081088D8 = Used in Sanctum for fade to screen blend.
08108060 = 08108928 = Probably fade from screen blend.
08108068 = 0810B7A8 = Sell
08108070 = 0810B79C = Give (Like Sell menu, but w/o prices.)
08108078 = 081084E0 = Wait for music to stop? (See Sanctum and Inn?)
08108080 = 0810B520 = Sleep (Heal PCs)
08108088 = 08108B34 = (,,) - Used for loading graphics like hand cursor and extended party arrow?
08108090 = 0810A804 = Returns (0 or 1) whether the party has a forgeable item.
08108098 = 0810A834 = Set forge item
081080A0 = 0810A84C = Get forge item


Private
081080A8 = List artifacts. - Returns number of unique artifacts to be listed.
08108130
08108148 = init ram heap, etc.
0810824C = de-init ram heap, etc.
081082C4 = Shop(shop,npc)
08108464 = Shop (Debug?) 200000 coins, Jenna and Mia are poisoned, Isaac is cursed, Ivan is haunted. & items.
081084E0 = Wait for music to stop? (See Sanctum and Inn?)
081084F4 = Text(text_index)
0810857C = Text(text_index) (Dialogue?)
08108630 = Yes/No menu for selling items, and equipping gear. (Y=5 (2 lines))
08108660 = Yes/No menu for reviving at a sanctum. (Y=7 (3 lines))
08108690 = (Keypad stuff) - Navigation of grid style menus - Buy menu and PC menu. (pntr, total items in menu, Y Increment (Up/Down))
0810875C = Sets up buy/sell bars(amount, color_4bit, graphic_addr)
08108788 = Sets up positions for each individual price number (0-9)
081087E0 = Price tag(number/price, pnlPntr? (Need to check), x, y)
081088D8 = Used in Sanctum for fade to screen blend.
08108928 = Probably fade from screen blend.


Cursor
08108948
081089E4
08108A88 = (,,,)
08108AA8 = (,,)
08108AF0 = cursor destination(,x,y)
08108B34 = (,,) - Used for loading graphics like hand cursor and extended party arrow?


Buy Menu (with other additions - e.g. some functions made primarily for this section, get reused in other menus below.)
08108B70 = Buy/Artifacts menu “Which one of you gets this?” stuff when buying. (Including interactions.)
 08108B94 = Wallet/Your Coins Panel vertical position
 08108B96 = Wallet/Your Coins Panel width
 08108B98 = Wallet/Your Coins Panel ???
 08108B9A = Wallet/Your Coins Panel height
 08108B9C = Wallet/Your Coins Panel horizontal position
 08108BAC = Price Panel horizontal position
 08108BAE = Price Panel vertical position
 08108BB0 = Price Panel width
 08108BB2 = Price Panel height
08109068 = Displays items in Buy/Artifact menu.
08109188 = Text: “Your Coins:” and coins.
081091CC = Text: Item and price. (pnlPntr,item,price,type)
type = Price+Coins / Sell: We can't buy that. / Repair: It's not broken. / Forge: ----------
 081091E2 = 4671 - “We can't buy that.”
 081091EA = 4672 - “It’s not broken.”
 081091F2 = 4664 - “Price”
 0810920C = 4661 - “Coins”
08109270 = Text: Item Description.
0810928C = (pnlPntr,slot?,item) - PC panel interaction?
 -May add Down arrow for extended party on PC panel. And set PC animations.
081093A4 = ATK/DEF/AGL panel when buying stuff.
 08109494 = (Will load/read PC Attack)
081095B0 = (pointer, pc, item)
 4669 - “You have [22]”
 4668 - “None in stock”
08109624 = (Has call to 081096F8.)
081096F8 = Buy/Sell bar (Data:0810C248) - Probably returns quantity selected.
081098C0 = Confirm Purchase?
 08109904 = Add spent coins. (For game ticket offerings)
 08109912 = 4690 - “Then here you go!”
0810993C = Equip on Purchase
 081099C0 = 4691 - “Would you like to equip it now, name?”
 08109A1C = 4692 - “You look bolder already!”


Sell Menu (with Repair/Forge additions)
08109A3C = Sell item(pc, item slot) ( Including pre/post dialogue. )
08109A98 = Return selling price(item) ; Important = 0 , Broken = 1/2 , Normal = 3/4
08109AD8 = Sell/Repair/Forge menu layout 1 - PC selection?
 08109AEC = Wallet/Your Coins Panel horizontal position
 08109AF0 = Wallet/Your Coins Panel vertical position
 08109AF2 = Wallet/Your Coins Panel width
 08109AF4 = Wallet/Your Coins Panel height
 08109B06 = Item List Panel vertical position
 08109B08 = Item List Panel width
 08109B0A = Item List Panel height
 08109B0C = Item List Panel horizontal position
 08109B14 = PC Panel vertical position
 08109B18 = PC Panel width
 08109B1A = PC Panel height
 08109B1C = PC Panel horizontal position
 08109B38 = Hand Cursor behaviour
 08109B44 = Hand Cursor origin (X coordinate, I think)
 08109B48 = PC Row horizontal position
 08109B4A = PC Row vertical position
 08109B86 = Hand Cursor relative vertical position (to PC Row)
 08109B88 = Hand Cursor relative vertical position (to PC Row)
 08109B90 = Hand Cursor movement speed
 08109BE0 = Sound effect for something???
 08109BEE = Sound effect when selecting character
 08109C48 = Sound effect for backing out of menu entirely
08109CAC = Sell/Repair/Forge menu layout 2 - Item selection?
 08109CDA = Item Name Panel horizontal position (from left)
 08109CDC = Item Name Panel vertical position (from top)
 08109CDD = Item Name Panel width
 08109CE0 = Item Name Panel 
 08109CEC = Description Panel width
 08109CEE = Description Panel height
 08109CF0 = Description Panel horizontal position (from left)
 08109CF2 = Description Panel vertical position (from top)
 08109D04 = Cursor style (generally movement, but can include scale)
 08109D0E = Cursor speed (when moving to item list)
 08109D4C = Item count limit (for scrolling)
 08109D54 = Item count limit (for recognizing vertical height)
 08109D64 = Item selection cursor height
 08109D74 = Cursor speed (when moving between items)
 08109D90 = Sell Price/item state display
 08109DA4 = Repair Price/item state display
 08109DBE = Forge item state display
 08109DD2 = 146 - “?” (first item name)
 08109E08 = Details Panel sound effect
 08109E12 = Details Panel height
 08109E14 = Details Panel vertical position (from top)
 08109E16 = Details Panel width
 08109E18 = Details Panel horizontal position (from left)
 08109E8C = Sound effect for moving cursor left
 08109EB6 = Sound effect for moving cursor right
 08109F00 = Sound effect for moving cursor up
 08109F36 = Sound effect for moving cursor down
 08109F40 = Delay before cursor moves
 08109F86 = 4699 - “Want to sell anything else?”
 08109F8E = Sound effect for backing out of list
 08109F9A = Sound effect for selecting item
 08109FC6 = Text “Which item needs my special attention.”
0810A004 = Display items(pointer, pc) - Shows “No items.” if none.
0810A03C = How many to sell?(pc,item slot) (Has call to 081096F8.)
0810A108 = Confirm sell
 0810A182 = 4701 - “Sorry, but we don’t buy those.”
 0810A1AA = 4700 - “You can’t remove your [item]. Come back once it’s off.”
 0810A1B8 = 4707 - “How about [##] coin[s] for your old [item]?”
 0810A1CC = 4706 - “Your [item] is damaged, so...maybe [##] coin[s]?”
 0810A1D4 = 4705 - “That comes to [##] coin[s]! Sound good?”
 0810A1DE = 4704 - “What rare stuff! How about [##] coin[s]?”
 0810A1E2 = 4703 - “How about [##] coin[s] for your [item]?”
 0810A210 = 4711 - “You don’t want to let go of it, do you?”
 0810A214 = 4709 - “What? Changed your mind? Well, too bad for you.”
 0810A21E = Sound effect (for selling? - have to give it a listen)
 0810A264 = 4710 - “All right, I’ll buy it! Here are your coins.”
 0810A268 = 4708 - “OK! It’s a deal!”


Repair Menu
0810A2AC = getRepairPrice(item) ; broken = 1/4 , not broken = 0
0810A2C8 = Repair menu - Call to Sell/Repair/Forge menu layout 1 - PC selection?
0810A2D0 = Call to Sell/Repair/Forge menu layout 2 - Item selection?
0810A2D8 = Purchase Repair


Item/Shop Stock? (Game ticket, Buyable Items, Artifacts)
0810A490 = Game ticket offerings…
0810A66C = Return 0x20 (Number of shops.)
0810A670 = shop_artifacts(shop) Adds shop artifacts to the artifact list.
0810A6B8 = shop_items(shop,sp?) Lists shop items, and returns total number of shop items.
0810A6F8 = get_shop_type(shop) I think.


Forge
0810A70C = get forge data address(item)
0810A748 = Returns 0 ---------- / 1 Processed / 2 Rusted , based on item forge type.
0810A760 = Return forged reward item(item)
0810A7DC = Returns (0 or 1) whether PC has a forgeable item(pc)
0810A804 = Returns (0 or 1) whether the party has a forgeable item.
0810A834 = Set forge item
0810A84C = Get forge item


Sanctum
0810A864 = Sanctum: get_sanctum_price(pc,type) 
type=
0=Revive (level*20)
1=Cure Poison (10)
2=Repel Evil (50)
3=Repel Curse (level*10)
0810A898 = Sanctum: need_healing(pc,type) ; Returns 1 if type needs healing.
0810A8EC = Sanctum: Return number of PCs needing healing by selected type()
0810A960 = Sanctum: Text(text_index) Offsets index by what menu you have selected.
0810A9AC = Sanctum: Dialogue? (And wait until continue.)
0810A9FC
0810AA80 = Sanctum
0810ABF0 = Revive menu?
0810AEA4
0810AF24
0810B04C = “Revive for [22] coins”; “This ally needs no healing.”
0810B0BC
0810B168
0810B1B4 = (Sanctum related)


Inn
0810B378 = get_inn_price(inn)
0810B3EC = Gets Inn Price(inn) - Likely for dialogue rather than subtracting out of your coins. (Not sure.)
0810B418 = Inn
0810B520 = Sleep (Heal PCs)


Forge Menu
0810B5C4 = Forge
0810B6BC = Call to Sell/Repair/Forge menu layout 1 - PC selection?
0810B6C4 = Call to Sell/Repair/Forge menu layout 2 - Item selection?
0810B6CC = Forge: NPC dialogue that pops up after you have selected an item. (Based off “----“, “Processed”, and “Rusted” items.)


Inventory Menu? (For buying items (non-equipment), sell/repair/forge menus, etc.)
0810B79C = Give (Like Sell menu, but w/o prices.)
0810B7A8 = Sell
0810B7B4
0810B9C0 = 
0810BCA0
0810BDB0
0810BDF4
0810BE3C
0810BE70 = position item icon(item slot,x,y) - Basically modifies X/Y OAM entry in RAM. - Used in Sell menu.
0810BEA8
0810BEBC = How many icons to load (items list/pointer,icons,borders/mini-icons like E/equipped value)
0810BF98 = Loads/Sets up position for all selling items.(pointer,x,y,pc)


Data
0810C008 = Graphics for price. (0-9)
0810C148 = Graphics for price tag.
0810C248 = Graphics for Buy/Sell bar. (1-30)
0810C348 = Positions of orange bars in the Buy/Sell bar from 1-30.
0810C384 = Positions for each individual price number (0-9)
0810C38E = Spent amounts to be offered Game Tickets at shops.
0810C3C8/A = Unknown/Unused?
0810C3F4 = Shop data
0810CC34 = Forge data
0810CF28 = Sanctum healing sound effects.
 52 = Revive
 54 = Cure Poison
 58 = Repel Haunt
 57 = Repel Curse
0810CF2C = Inn prices (Per PC) (See function 0810B378.)


Battle Mechanics
08118000; 243 Private functions (2 which are ARM.)


“Unused?” = Means there doesn’t seem to be any links in uncompressed code - Map code not checked. - Most of these should probably be updated / can’t remember if I scanned them all correctly or not.
 08118000= 08118958 = Battle Test - Unused?
08118008 = 08125AA0 = Mosaic effect? - Unused?
08118010 = 0811B9D4 = (1 call from Dialogue Mechanics (08046B6A, Status page?); 14 calls from Ability Animations.)
08118018 = 08126944 = Unused? - Blending related - Likely a fading effect.
08118020 = 08126978 = Unused? - Blending related - Likely a fading effect. (Inverse of above.)
08118028 = 08126804 = r3=scaling of entire screen. (%) (8 calls from Ability Animations.)
08118030 = 08126904 = (6 calls from Ability Animations.)
08118038 = 0812628C = (13 calls from Ability Animations.)
08118040 = 081263FC = Battle background swap (used in a lot of summons, etc.); r1 = general table file ID, which should be a background, r2 = darkness/brightness (higher numbers make it darker, caps out at x3C), r0 = ???
(45 calls from Ability Animations.)
08118048 = 08126218 = (2 calls from Ability Animations.)
08118050 = 08128194 = Includes 08130D0C - Enemy Properties Table ; Return Byte 4; Unused?
08118058 = 08128174 = Includes 08130D0C - Enemy Properties Table ; Return Byte 3: Bits: 01 (1 call from Ability Animations.)
08118060 = 0812814C = Includes 08130D0C - Enemy Properties Table ; Return Byte 2: Bits: E0; Unused?
08118068 = 081280FC = Includes 08130D0C - Enemy Properties Table ; Return Byte 2: Bits: 01; Unused?
08118070 = 0811C37C = (Attacking animation; sets jump arc)(25 calls from Ability Animations.)
08118078 = 0811C120 = setAnimation(,2) at end. (Attacking animation) (15 calls from Ability Animations.)
08118080 = 0811C01C = setAnimation(,5) at end. (Hit animation) - Only used by Ability Animations. Unused?
08118088 = 0811C074 = Impact/Motion Behaviour((Target_ID,impact_type_ID)); setAnimation(,5) at end. (Hit animation) - Only used by Ability Animations. (87 calls from Ability Animations.)
08118090 = 0811A31C = Copy PC (arg0,bit0), and Enemy (arg0,bit1) data slot indexes to address arg1. Return number of slots listed. (3 calls from Dialogue Mechanics.)
08118098 = 0811BE3C = General function for calculating an address based on PC/enemy. (char slot) address for sprite stuff…. (3 calls from Dialogue Mechanics , 148 calls from Ability Animations.)
081180A0 = 081197F0 = Load_enemy_group(enemy_group)
081180A8 = 0811BD50 = 
081180B0 = 0811C2B4 = 
081180B8 = 0811C314 = 
081180C0 = 0811A188 = List living PCs in front (Arg=1), or enemies (Arg=2)
081180C8 = 0811A038 = Lists PCs in front. (sp) Also sets [+0x12A]=2 in their PC data. Returns quantity.
081180D0 = 0811CD7C = (Battle Camera position at start of battle. After intro text - First breakpoint.)
081180D8 = 0811BDB0 = 
081180E0 = 08126CFC = ? (Called from Ability Type x1 ; x5,x9,xE ; , at least.)
081180E8 = 08122C4C = Activates Hit, and plays sound. ; Old: Repeated/delayed sound effects (eg. When a battle animation hits multiple enemies)
081180F0 = 08118410 = Copy arm code for color mod to stack and execute.
081180F8 = 08124BFC = Decrement djinn recovery turn durations (And recover them when they hit 0.) (For use after Summons.) (PC's HP must be > 0)
08118100 = 0811A484 = (1 call from Ability Animations.)
08118108 = 08124CAC = Decrement djinn recovery turn durations 20 times. (Calls above function.) (Linked from pub only.) (Used in transferring Party 1 to GS2. Not sure if anything else?) (1 call from Party Mechanics.) - Also listed in Battle Arena.
08118110 = 08118738 = Debug-feature: Execute party setup. (Called from 08118958) Returns 0 if succeeds. Unused? - Listed in Battle Arena.
08118118 = 0811A44C = (4 calls from Dialogue Mechanics ; 3 calls from Ability Animations.)
08118120 = 0811B724 = (2 calls from Dialogue Mechanics ; 1 call from Ability Animations.)
08118128 = 08120060 = ??? - Wait until L/R/A/B is pressed to advance text log?
(1 call from Dialogue Mechanics: 08045F2E)
08118130 = 08123574 = calculate_standby_djinn(charslot, standby_djinn_elemental_quantities_refpntr) Returns total number of standby djinn. (4 calls from Dialogue Mechanics)
08118138 = 0811A0B0 = Lists PCs in back. (sp) Also sets [+0x12A]=2 in their PC data. Returns quantity. (2 calls from Dialogue Mechanics)
08118140 = 0811A39C = (PC/Target death check?) (1 call from Dialogue Mechanics)
08118148 = 0811B75C = (1 call from Dialogue Mechanics ; 1 call from Ability Animations.)
08118150 = 08119734 = Add enemy 373/368 (Doom Dragon) and clear out enemy side (1 call from Ability Animations.)
08118158 = 08118F6C = Enable first 16 summons if you have the djinn for them. (2 calls from Dialogue Mechanics: 0804BEA8 and 0804BEE0)


ARM Functions!
Decompress_Battle_Background(source, destination)
Note: This function is moved to RAM!
08118160 = Start
08118390 = End


-- GS2 Exclusive --
?(source, destination, ?1, ?2)
Unused?
Notes: ?1 should be a number from x0 to x10000, and should be an increment of x100. This value is meant to alter color, I think? (Color is a guess.) ; ?2 is how many colors to alter.
08118394 = Start
0811840C = End


Thumb Functions!
Copy arm code for color mod to stack and execute.
08118410= Start
08118422


08118430 = Call 081197F0 with an argument of 0 repeatedly ; Unused?
0811843C = Save status effects/etc. (for Karst & Agatio battle - to seamlessly combine three battles into one.)
081185C4 = Load status effects/etc. (for Karst & Agatio battle - to seamlessly combine three battles into one.)


--End of GS2 Exclusive --


Debug-feature: Execute party setup. (Called from 08118958) Returns 0 if succeeds.
08118738 = Start
08118948 = End


Return 
Debug-related (Unknown; When Start is pressed from 08118958)
08118954 = Return


08118958 = Unused/Debug-feature: Battle Test - When called, hold down to activate feature. (The screen should be black.) L/R selects party setup. Arrow keys chooses enemy group. Press A to confirm, if you win/lose/flee the battle, you will come back to the black screen to do another selection of party setup and enemy group.
Todo: What are the flags set/cleared?
 -"03001150"
 08118AC6 = End? (Loop function?)


Called every frame? - Called via pointer.
08118ADC = Start - Calculate camera position.
08118BBC = End


Start a Battle +text 
08118BCC = Start (Number of enemies)
08118C04 = [18][1] appeared!
08118C0C = [18][1] appeared!
08118C2E = [16]'s party attacks first!
08118C42 = [16]'s party was caught by surprise!
08118C54 = End


08118C68 = Store to RAM slot numbers for PCs/Enemies (Including order)
08118D2C = Graphics-related (x06000000 section) ; Unused?
08118D60 = Start ; Unused?
08118D6C = Return
08118D70 = Clear status effects at end of battle. (And misc?)
 08118DC8 = Attack Buff Duration (r1)
 08118DCE = Attack Buff Value (r0)
 08118DD4 = Defence Buff Duration (r1)
 08118DDA = Defence Buff Value (r0)
 08118DE0 = Resistance Buff Duration (1)
 08118DE6 = Resistance Buff Value (r0)
 08118DEC = Delusion (r1)
 08118DF2 = Confusion (r0)
 08118DF8 = Charm (r1)
 08118DFE = Stun (r0)
 08118E04 = Sleep (r1)
 08118E0A = Seal (r0)
 08118E10 = Regenerate (r1)
 08118E16 = Reflect (r0)
 08118E1C = Candle Curse (r1)
 08118E22 = Unleash/Critical Rate? (r0)
 08118E28 = Reflux (r1)
 08118E2E = 1-turn Stun (r0)
 08118E34 = Agility Duration (r1)
 08118E40 = Agility Buff Value (r0)
 08118E46 = Challenge (r0)






08118E64 = Start (GS2-exclusive): Clear Damage Reduction (+0x12B), 1-Turn Stun status for PCs in the back row
08118EB0 = Start - Makes sure all Standby Djinn are in recovery list. 
 Called at 081199F8 = Main battle function.
08118F6C = Start - Enable first 16 summons if you have the djinn for them.
 Called at:
 0811815C = 
 081199FC = Main battle function.
 08119B46 = Main battle function.
08119050 = Return ; Unused?
08119054 = Unused? - Multiplayer incoming ... Prefixes enemy names with “Enemy”, so likely Battle Arena/Multiplayer - Might wait for data to be transferred from second gameboy? (Not sure?) (Just the setup - Not what directly transfers the data)
08119148 = Unused? - Multiplayer outgoing ... (Just the setup - Not what directly transfers the data)
081192A0 = Unused?
081192D0 = Start - Multiplayer related (Dialogue progression?) - EXEC
 Called at:
 0811D6A4 = 
08119374 = Start - “ - exECTUrn / exECTURN / EXECTUrn / EXECTURN
 Called at:
 08119D42 = Main battle function.
 08119E3C = Main battle function.
081195A0 = Start - “ - 
 Called at:
 081199A2 = Main battle function.
081195D4 = Start - “
 Called at:
 08119EBC = Main battle function.
 08119F4C = Main battle function.
 08119F78 = Main battle function.


081195EC = party_swap() - Replace front row pcs with back row pcs.
 Called at 08119B3E = Main battle function. -called at start of round if no living pcs in battle.
 r5 = pc unit address
 r6 = pc in back
 r7 = 
 r8 = pc count to flash/setup?
 r9 = 
 r10 = Offset from 0203004C where in-battle pcs are listed (0x58)
 r11 = Pointer to pc order list in save data.
 r12 = 
 00 = Pointer to [sp, 0x10].
 04 = Pointer to [sp, 0x1C]. (PCs)
 08 = [03000024] (0203004C)
 0C = in-battle pc count
 10 = pcs in back.
 1C = pcs in battle.
 08119602 = If no pcs exist (of the 8), exit function.
 081196AC = Put previous front PCs in back.
 081196CA = DIsplay party panel with the fronted PCs.
081196FC = Start - Init 03000030
08119734 = Add enemy 373/368 (Doom Dragon) and clear out enemy side


081197A8 = Doom Dragon Transformation? (unknown arg [r0 = group/encounter ID from global table in one function, but this doesn’t seem to hold in practice])
 Also plays the beam animation during transformations and death.
 Called with arg set as 4E/4F/50.


081197D0 = Start - Djinn tutorial related
 If Flag != 0x175 , base text id = 0x2FD2
 If Flag == 0x175 , base text id = 0x3007
 Both text lists are similar, with only two lines being different.
 “Well, you weren't very surprised[3] when you saw me. Am I right?[30]”
 “Well, you didn't look surprised[3] when you saw me. Were you?[30]”
 “Don't be a meanie, OK? Nobody[3] likes a meanie. I'm serious[3] here.[1] You don't really want to[3] leave me behind, do you?[30]”
 “Don't be a meanie, OK? Nobody[3] likes a meanie. I'm serious[3] here. Can I go with you?[30]”


081197F0 = Start ; Load_enemy_group(enemy_group)
todo: should move dynamic (multiple purpose) registers into separate sections/break this function into parts, or exclude them altogether. 
r4 = dynamic ; [+0x2EC] Pointer: Turn list
r5 = dynamic
r6 = dynamic ; 0x03000000
r7 = dynamic ; 0, 3
r8 = Current turn (from 0)
r9 = Pointer: 03000024:0203004C Battle data
r10 = dynamic ;  Pointer: 03000030:02030000 ?
r11 = 
00 = Fifth argument for function calls.
04 = [+0x2EC] Pointer: Turn list ; Only stored here when calling functions?
08 = Current turn offset (increments of 0x10 from 0.)
0C = [+0x47] Pointer: Lull’s end round effect
10 = [+0x44] Pointer: Multiplayer Flag
14 = [+0x41] Pointer: Party panel flags?
18 = [+0x45] Pointer: Battle/Round Start Priority (Attacks First/Caught By Surprise)
1C = Total turn count (at some point)
20 = Current round number (from 1)
24 = Pointer: 030000B0:02031090 Camera destination
28 = Group/Encounter ID (from global table)


 08119802 = Initialize heaps
  08119802 = 03000030:02030000 ?
  0811980C = 03000024:0203004C Battle data
  0811981C = 030000D8:020308C8 Enemy ram
  0811982A = 030000B0:02031090 Camera destination
  08119832 = 0300002C:020310B0 ?
  08119842 = Clear enemy ram
 08119850 = Call to clear sprite vram allocation list. (02003610 list)
 08119854 = Camera setup?
 0811986E = bg mode = 1
 08119870 = Set flag 0x103
 08119878 = Set flag 0x169
 0811987E = call: matrix stack init.
 081198B8 = Load battle background
 081198DE = Flag 0x16E check
 08119900 = Call to Enemy Group Initialization (Loads the enemy data and other stuff.)
 08119906 = Flag x16C check
 081199C6 = Load current song (from 0200044E)
  081199D0 = Flag x16C check
   081199DC = Assign Link Arena battle theme
  081199EA = Assign Felix’ battle theme (only if no other theme is assigned)
 081199F0 = Call to setup in-battle pc/enemy lists.
 081199F4 = Call to load/position PC and enemy sprites.
 081199F8 = Call to make sure all Standby Djinn are in recovery list. (front row PCs.)
 081199FC = Call to set the 16 accessible summon flags to 0x0200024C.
 08119AD0 = if [0200048B]=00, it's checked randomly (below); if 06, your party is caught by surprise:
  1/16 chance for your party to attack first.
  1/32 chance for your party to be caught by surprise.
 08119B16 = Call to "Enemy appearing" stuff? (Which has two function calls for the text.) (08125D74 => 08118BCC)
 08119B32 = Round Loop
 08119B32 = If no living pcs in battle, party swap.
 08119B42 = Call to nulled function. (Return)
 08119B46 = Call to set the 16 accessible summon flags to 0x0200024C.
 08119B4A = Set party panel flags. (1=, 2=element standby counts, 4=, 8=)
 08119B64 = Camera destination stuff
 08119B70 = Call to display party panel.
 08119B72 = Clear turn table.
 08119B8A = Free a sprite slot.
 08119B92 = Flag 0x16A check (Early Build Battle Test Flag)
 08119B9E = If [16A]=0: Call to ? battle menu and turn setup stuff?
 08119BA6 = Isolated section: increment battle group number (for Doom Dragon), and jump to end of round section.
 08119BB4 = If [16A]=1: Call to ? set up test turn data?
 08119BBC = Claim a sprite slot.
 08119BC6 = Call to display party panel.
 08119BCE = 
 08119BFA = Turn Loop
 08119C14 = Flag 0x16A check (Early Build Battle Test Flag)
 08119C3A = Call to executing a turn
 08119C52 = Call 0811C594. (Flee)
 08119C5E = Group/encounter #637 check (Agatio & Karst, used in Isaac fight.); if true, then the fastest enemy can get one action in before the fight ends (this will be treated as a loss, even if your party is healthy)
 08119C6C = Check if any PCs are alive, branch to lost battle if not.
 08119C7C = If front row PCs are dead, jump to end of round. (Start of next round should do party swap.)
 08119C8A = If all enemies are dead:
  08119C9A = Group/encounter #77/#78 check (Doom Dragon phase 1 & 2), jump to increment group number.
  08119CA2 = Group/encounter #79 check (Doom Dragon phase 3)
   08119CA6 = Encounter ID for transformation (? - Doesn’t seem to be in practice) - Edit: This one is the final beam for having fully defeated Doom Dragon.
08119CAC = ? (Unsure what kind of annihilation check goes on here - inside pc 0-7 condition.)
 08119CD8 = 
 08119CE0 = Check Reflux/counterattack retaliator ID (#020308A4)
  08119D08 = Store Action Type x09 (counterattack) to battle RAM
 08119D40 = Multiplayer dialogue progression? (30 frames)
  08119D84 = Store Action Type x0A (Daedalus Strike 2) to battle RAM
 08119DBC = Lull’s end round effect
 08119DC4 = Turn loop back
  08119DD8 = Comparison; Current turn count >/= Turn total
End of Round:
 08119DDE = Call 08118E64: Clear Damage Reduction, 1-Turn Stun values on back row (which are not cleared on death)
 08119DE2 = ? queue progression
 08119DF8 = Daedalus 2nd Strike queue progression
 08119E10 = 0 out Battle/Round Start Priority (Attacks First/Caught By Surprise)
 08119E14 = Call 08124CC0: (Return / Does nothing)
 08119E18 = Call to End Of Round Status Effect stuff
 08119E1C = Delete each battle unit’s object and sprite assets that are flagged for deletion. (i.e. when [0x02030D0+0x28] is non-zero.)
 08119E20 = If in first two Jupiter Lighthouse Karst/Agatio battles, and on second round, then break out of loop.
 08119E3C = Multiplayer dialogue progression? (30 frames)
 08119E4C = Djinn tutorial dialogue (post-round)
 08119E9E = Call related to button presses. x303
 08119EB0 = Increment round number & loop back
 End of Battle:
 08119EB8 = 
 08119ECA = Flag 0x16E check; skip fanfare, rewards if on
  08119EDE = Assign victory fanfare theme
 08119EEA = Multiplayer/Link Arena check
  08119EF0 = Assign victory fanfare theme (what do the unique checks do?)
 08119F1C = Read “two or more enemies killed” flag from 0203008A; add 1 to following string to change to “[18][1]’s party was downed!”
 08119F1E = 3204 - “[18][1] has been downed!”
 08119F2A = Call to End of battle rewards. (And level up.)
 08119F48 = 
 08119F78 = (battle group 0x27e (Agatio & Karst vs. Isaac fight) jumps here.)
 08119F94 = Assign battle loss theme
 08119FA8 = 3209 - “[16] goes down in defeat…”
 08119FB0 = 3203 - “[16]'s party has been defeated!”
  08119FBA = Assign “song fade” sound effect
  08119FD0 = Assign “song fade” sound effect (again, difference?) (i.e. when fleeing.)
 08119FF2 = Call to End of Battle. (Clear status effects.) (And misc?)
0811A024 = End of function.


0811A038 = Lists PCs in front. (sp) Also sets [+0x12A]=2 in their PC data. Returns quantity.
0811A0B0 = Lists PCs in back. (sp) Also sets [+0x12A]=2 in their PC data. Returns quantity.
0811A12C = List used enemy slots in address arg0. Return number of slots listed. Used for Enemies that appear list on battle start.
0811A188 = List living PCs in front (Arg=1), or enemies (Arg=2) (Front PCs, 0x80-0x82/0x85)
0811A24C = List living PCs (Arg=1), or enemies (Arg=2) (Front and Back PCs: 0-7, 0x80-0x82/0x85)
0811A31C = Copy PC (arg0,bit0), and Enemy (arg0,bit1) data slot indexes to address arg1. Return number of slots listed.
0811A39C = List living PCs in battle. (Arg=1), or enemies (Arg=2) (e.g. Front Only, but those listed directly in battle.) Return total. (PC/Target death check?)
0811A44C = Start
0811A468 = Start
0811A484 = Grab battle sprite palette (used for updating palette when damaged)
0811A490 = Checks if there is enough room to add an enemy to enemy party. Returns 1 if so, otherwise 0.
0811A4E0 = Start (Load sprites?)
 r6 = sprite id
 r7 = 
 r8 = small enemy flag
 r9 = pc ram address
 r10 = 
 r11 = 
 00 = 
 0811A51A = is_dead check
  0811A578 = palette to RAM
 0811A5AA = Check Serpent sprite ID (561)
 0811A5B4 = Check Kraken sprite ID (631)
 0811A5BE = Check Fusion Dragon sprite ID (638)
 0811A5C8 = Check Poseidon sprite ID (585)
 0811A5CE = Check Doom Dragon sprite ID (579)
 0811A5D4 = Check Doom Dragon sprite ID (581)
 0811A5DA = Check Doom Dragon sprite ID (583)
~~~ Somewhere around here (or above) starts the sprites code section.
0811A5FC = Unload sprites(pc)
0811A640 = Get weapon type(item)
 0=Long Sword series
 1=Short Sword series (Including Machete)
 2=Axe series
 3=Mace series
 4=Staff series
 5=Ankh series
 6=No weapon
0811A674 = Get weapon sprite index(pc)
 0811A69E = PC list code.


0811A720 = initialize_unit_sprite_data(?)(unit_entry_address [02030230 section], arg [0/1])
 0811A72C = Set sprite to xF000 if sprite address (from unit_entry_address + 0x00 = 0
 0811A73A = Set unit’s objRAM_Addr/npcAddr [02032848 section; address also in r6] and scale to x0000E666
 0811A74C = Clear:
        unit_entry_address: 
x04(h)
x06(h)
x08(h)
x0A(h)
x0C(w) (if arg = 0)
x10(w) (if arg = 0)
x14(w)
x1C(h)
x1E(b)
x20(w)
x24(w)
x28(h)
x2A(b)
objRAM_Addr:
        x08(w) (if arg = 0)
        x10(w) (if arg = 0)
 0811A770 = Get direction (0,0); set direction to make unit face forward depending on orientation
 0811A788 = Store x03 to objRAM_Addr +x59(b); unknown purpose
 0811A788 = Store x02 to objRAM_Addr +x55(b); unknown purpose
 0811A796 = Store x01 to unit_entry_address + x2B(b); unknown purpose
 0811A798 = Set idle script to “11” via LDR from #0812CACC
0811A7A6 = End of function.


0811A7AC = set_unit_sprite (unit_address, pc/enemy, x, y)
 Called at:
 0811979E = Doom Dragon transformation
 0811B40E = PC team setup
 0811B48A = Enemy team setup
 081208E4 = ? (in damage formula function)
 Local Variables:
 r5 = 
 r6 = 
 r7 = 
 r8 = 
 r9 =  pc id ; arg r1
 r10 = pc ram address
 r11 = palette
 00 = sprite id
 04 = arg r3 * 0x10000
 08 = arg r2 * 0x10000
 0C = arg r3
 10 = arg r2
0811A82A = list.... (sprite indexes for PCs.)
 0811A854 = Set PC sprites
 0811A88C = Set default scale (x10000)
 0811A892 = Set default shadow sprite
0811A89A = Enemy list code
 0811A8C0 = Sprite scaling list; all enemies, from Isaac to Thief (using decimal/editor IDs except for PCs)
  0811AECC = x10000 [Isaac (enemy x00)]
  0811AED2 = x10000 [Garet (enemy x01)]
  0811AED8 = x10000 [Mia (enemy x03)]
  0811AEDE = x10000 [Ivan (enemy x02)]
  0811AEE4 = x10CCC [Piers (enemy x07)]
  0811AEEC = xF333 [Jenna (enemy x05)]
  0811AEF4 = x10000 [Felix (enemy x04)]
  0811AEFA = xE600 [Sheba (enemy x06)]
  0811AF00 = xE600 [Slime (226)]
  0811AF06 = xE600 [Slime (227)]
  0811AF0C = xE600 [Ooze (228)]
  0811AF12 = xE600 [Slime Beast (229)]
  0811AF18 = x19999 [Killer Ape (283)]
  0811AF1C = x18CCC [Manticore (294)]
  0811AF24 = x13333 [Living Statue (331)]
  0811AF28 = x19999 [Hydros Statue (332)]
  0811AF2C = x18000 [Ant Lion (323)]
  0811AF32 = x1CCCC [Tret (339)]
  0811AF3A = x1CCCC [Deadbeard (250)]
  0811AF42 = x10000 [Bandit (237)]
  0811AF48 = xE600 [Thief (238)]
  0811AF4E = x10000 [Bandit (377)]
  0811AF54 = xE600 [Thief (378)]
  0811AF5A = x1B333 [Kraken (340)]
  0811AF5E = x18000 [Fusion Dragon (349)]
  0811AF64 = x18000 [Mimic (351)]
  0811AF6A = x18000 [Mimic (352)]
  0811AF70 = x18000 [Mimic (353)]
  0811AF76 = x18000 [Mimic (354)]
  0811AF7C = x18000 [Mimic (355)]
  0811AF82 = x18000 [Mimic (356)]
  0811AF88 = x18000 [Mimic (357)]
  0811AF8E = x18000 [Mimic (358)]
  0811AF94 = x18000 [Mimic (359)]
  0811AF9A = x13333 [Troll (255)]
  0811AF9E = x13333 [Cave Troll (256)]
  0811AFA2 = x10000 [Orc Captain (289)]
  0811AFA8 = x14000 [Orc Lord (290)]
  0811AFAE = xE600 [Kobold (297)]
  0811AFB4 = x18000 [Hobgoblin (299)]
  0811AFBA = x14CCC [Gryphon (303)]
  0811AFC2 = x13333 [Chimera (315)]
  0811AFC6 = x10CCC [Azart (333)]
  0811AFCE = x10CCC [Azart (334)]
  0811AFD6 = x11999 [Satrage (335)]
  0811AFDA = x11999 [Satrage (335)]
  0811AFDE = x13333 [Navampa (336)]
  0811AFE2 = x13333 [Navampa (336)]
  0811AFE6 = x18000 [Toadonpa (328)]
  0811AFEC = x13333 [Tornado Lizard (341)]
  0811AFF0 = x18000 [Storm Lizard (342)]
  0811AFF6 = x18CCC [Tempest Lizard (343)]
  0811AFFE = x14000 [Recluse (260)]
  0811B004 = x14000 [Cerberus (310)]
  0811B00A = xE600 [Siren, Succubus, Nightmare (273, 274, 275)]
  0811B010 = xF333 [Ruffian (60, 61, 62)]
  0811B018 = x14CCC [Dullahan, Sentinel (210, 211, 212, 213, 214, 215)]
  0811B020 = x17333 [Valukar (201, 202, 203)]
  0811B024 = x11999 [Serpent (83, 84, 85, 86, 87, 88, 89)]
  0811B028 = x18000 [Poseidon (93, 94, 95)]
  0811B02E = x18000 [Aqua Hydra (80)]
  0811B034 = x11999 [Hydra, Pyrodra (81, 82)]
  0811B038 = x12666 [Wild Wolf, Dino (109, 141)]
  0811B03C = x13333 [Dire Wolf, Dinox (110, 142)]
  0811B040 = x14000 [White Wolf, Dinosaurus (111, 143)]
  0811B046 = x14000 [Sea Dragon, Turtle Dragon, Ocean Dragon (168, 169, 170)]
  0811B04C = xC000 [Devil Scorpion, Sand Scorpion (70, 71)]
  0811B052 = x12666 (sets the sprite for Moapa’s shadow; 685); (Moapa [96, 97, 98])
  0811B05E = x1028F (Knight [99, 100, 101])
  0811B066 = x14000 [Briggs (72)]
  0811B06C = x11999 [Sea Fighter, Champa 2/3... (73, 74, 75, 189, 190, 191, 198, 199, 200)]
  0811B070 = x14000 [Flame Dragon (186)]
  0811B076 = x10000 [Flame Dragon (187)]
  0811B07C = xCCCC (Pixie, Faerie, Weird Nymph [150, 151, 152])
  0811B084 = xCCCC (Star Magician Balls (370, 371, 372, 373))
  0811B0A0 = x16666 [Chestbeater… (66, 67, 68, 90, 257, 323, 324, 344, 345, 346, 347, 348, 361, 365, 368)]
  0811B0A8 = Default scaling (based on sprite)
 0811B0E0 = If character ID > Garet, 
 0811B0EC = Check if Machete (item x000F, or decimal 15) is equipped
0811B166 = End of function.


0811B16C = Unused?
0811B180 = Enemy positioning? (Position modifier?) (ref enemy list, enemy count, ref x list, ref y list)
 0811B204 = Check Fusion Dragon (enemy 349)
 0811B20C = Check Kraken (enemy 340)
 0811B214 = Check Serpent (enemies 83-89)
0811B294 = Count number of enemies (for adding new ones mid-battle)?
0811B2C4 = Start - Enemy repositioning to omit slots on ends.()
 -Probably called when an enemy dies.
 Called at:
 08119772 = Doom Dragon transformation/party replacement
 0811DD84 = 
 081208B8 = 
 00 = Enemy y list
 18 = Enemy x list
 30 = Enemy list
 4C = end
0811B37C = Start (Called when battle starts) - might load all PC and enemy sprites?() (or is it just initial setup? research this.)
 Called at 081199F4 = Main battle function.
 r5 = pc count
 r10 = [03000024] (0203004C)
 00 = pointer to pc list at [sp, 0x34]
 04 = enemy x list
 1C = enemy y list
 34 = PC list / enemy list
 50 = end
0811B4AC = Determines PC/enemy slot used in RAM (for a given PC/enemy?)


0811B4D8 = Called when going to Status.
Updates bits for Status Effect animations. (Felix:[020300D0+1C])
 0811B4EC = Poison/Venom
 0811B508 = 


0811B598 = Status Effect Frame Counter and Cycle.
 0811B638 = Calculate Status Sprite (small enemies) 
 0811B640 = Calculate Status Sprite (normally sized enemies)


0811B6A4 = Animates PC/Enemy Battle sprites in battle + battle status menu
0811B724 = Clears battle sprite (slot_ID) (status and shadows; e.g. switching between characters in status menu)
0811B75C = Loads battle sprite (objRAM_address, ?, ?)
 Double-wide sprite rendering list; links animations together
 0811B80A = Check Serpent sprite ID (561)
 0811B814 = Check Kraken sprite ID (631)
 0811B81A = Check Fusion Dragon sprite ID (638)
 0811B820 = Check Poseidon sprite ID (585)
 0811B826 = Check Doom Dragon sprite ID (three heads, 579)
 0811B838 = Check Doom Dragon sprite ID (two heads, 581)
 0811B83E = Check Doom Dragon sprite ID (one head, 583)
 0811B844 = Sprite animation setup (double-wide sprites, possibly includes shadow application too?)
 0811B8C8 = Sprite animation setup (medium/small sprites)
 0811B904 = First sprite animation sync (weapon layer)
 0811B918 = Second sprite animation sync (status layer [is this done elsewhere too?])
 0811B932 = Check unscaled unit sprite width (if x20/32...)
  0811B936 = Third sprite animation sync (shadow layer)
 0811B9C8 = End


0811B9D4 = Start
0811B9E0 = Start (unused)


0811B9FC = Called via pointer.
 0811BA86 = Required Z coordinate to render shadows
 0811BB34 = Haze status check


[Starts veering into battle animation territory below]
0811BC2C = Unused?
0811BC64 = Start - Related to removing characters? (sprite)
0811BC98 = Start - Related to removing characters? (sprite(s))
 -Delete battle units and sprite assets that are flagged for deletion. (i.e. when [0x02030D0+0x28] is non-zero.)
0811BCEC = Unused?


0811BD10 = Start
0811BD50 = Start (character_ID, address)  
0811BDB0 = Start (objRAM_address [e.g. 020327C8], x00) 
  - Returns address of [objRam+0x50] (Further for [objRam+0x54]&0xF =2 type)


0811BDDC = (Battle Camera position at start of battle. Second breakpoint.)
0811BE3C = load_char_sprite_header_address(char slot) - (sprite stuff)
0811BE68 = Start - (Return char sprite to normal position?)
0811BEC8 = setAnimation(,1) at end. (Is idling animation)
0811BF18 = Unused? setAnimation(,2) at end. (Is attacking animation + sets character position)
0811BFA0 = proto_reset_char_position - Unused        [sets a character position]
0811BFD0 = move_char_on_dodge [Start - (Called from section that nimbly dodges the blow. - char movement?)]
0811C01C = setAnimation(,5) at end. (Hit animation) - Only used by Ability Animations.
0811C074 = Impact/Motion Behaviour(Target_ID,impact_type_ID); setAnimation(,5) at end. (Hit animation) - Only used by Ability Animations.
0811C120 = setAnimation(,2) at end. (Attacking animation)


0811C1F8 = proto_attack_anim_script(char_slot)
Start
1. Call 0811BE3C(char_slot)
     Return char_sprite_entry_address (e.g. #020300D0), then load objRAM_address (e.g. #020327C8)
2. Call 080235F8 = idle_sprite [Set script to 0802F200 (Command 11, end script.)] 
3. Call 080233D0 = setAnimation(objRAM_address, anim_ID:2)
End


0811C210 = Return - Called by below function, unused otherwise
0811C214 = proto_sprite_scale_manipulation(char_slot1, char_slot2)
Notes: 
  r5 and r6 are pushed, but it is unknown why they would have to be
  -x0C is added to the sp, which was used to store variables for a nulled function to use them
  This function may have involved positional scale in some way
Start
1. 
Call 0811BE3C(char_slot1)
  Return char_sprite_entry_address (e.g. #020300D0), then load objRAM_address1 (e.g. #020327C8) to r6
Call 0811BE3C(char_slot2)
  Return char_sprite_entry_address (e.g. #020300D0), then load objRAM_address2 (e.g. #020327C8) to r0
2. 
Move x80000000 to r4, then: 
Compare r4 to value at objRAM_address1 + x38 (r2) 
  If r2 = r4, then r2 = char1_sprite_field_depth
Compare r4 to value at objRAM_address1 + x40 (r5)
  If r5 = r4, then r5 = char1_sprite_field_height
Compare r4 to value at objRAM_address2 + x38 (r3) 
  If r3 = r4, then r3 = char2_sprite_field_depth
Compare r4 to value at objRAM_address2 + x40 (r1) 
  If r1 = r4, then r1 = char2_sprite_field_height
If any of these checks fail, then that check's variable will remain what was initially loaded for the comparison
3.
Add char1_sprite_field_depth + char2_sprite_field_depth (signed?), then store to sp x00
Store x00 to sp x04
Add char2_sprite_field_height + char2_sprite_field_height (signed?), then store to sp x08
4.
Call 0811C210 = Return(sp, x1000) which is clearly a nulled function
End


0811C274 = proto_apply_Force_sprite(char_slot)
Notes: 
  r5 is pushed, but it is unknown why it would have to be
  This function adds sprite #671 to a battle character's sprite data (as a layer), then plays sprite animation #1
  Media depicting this is limited, but in the one screenshot I can find this may have been for critical hits
Start
Call 0811BE3C(char_slot)
  Return char_sprite__entry_address (e.g. #020300D0), then load objRAM_address (e.g. #020327C8)
    If address = 0, end function
    Load right half of byte x54                (1 = render sprite, 0 = hide sprite)
      If value /= 1, end function 
      Load sprite_dynamics_address (e.g. 0203136C)
      Call 080229AC = add_battle_sprite_layer(sprite_dynamics_address, sprite_ID:671)
        Also returns objSprite_render_props_address; 
        If address is 0, then it skips to sleep(frames:10)
        Call 08022ACC = set_layer_sprite_animation (objSprite_render_props_address, anim_ID:1)
        Set layer priority to 03 (objSprite_render_props_address + x06) - Priority 03 is unused in the final game?
sleep(frames:10)
End


0811C2B4 = Start
0811C314 = Attack target/cursor height in battle
 0811C352 = Read Enemy ID
 0811C354 = Function call: Check last bit of properties byte #2
 … Between x18 (24) and x30 (48), depending on whether flag is used or not (flag on uses lower value)
0811C37C = grab_target_height, (User ID)
* If Casting Height (byte 4) /= 0, then PoOH = (Casting Height << x18) >>> x08
* Else if Small Enemy flag is true, then PoOH = (xC0 << x0D)
* Else PoOH = (xC0 << x0E)






0811C3BC = debug_round_generation(x, 0, y)
 Sets up PC turns with 100% agility, targeting first enemy. (0x80)
 Sets up enemy turns with 50%-100% agility, targeting a random PC.
0811C534 = End


Battle Camera Rotation with L/R buttons.
0811C538 = debug_camera_control
 03001150
 0811C58A = End




0811C594 = proto_execute_action (r0: battle_RAM/02030338)
Note: Function call still exists in used code at #08119C52, but can only be accessed by setting flag x16A (a buggy flag that is used for two things and causes game freezing)


1. If leftmost slot (i.e. acting unit) is downed, end function and return -1


2.
* Call #0811CD30 with battle_RAM address; this is meant to grab a random living character from the currently acting character’s side, but fails to (see description for that function).
* The value that would be loaded is stored to battle_RAM + 0x0A (battle slot value), and then the unit ID is loaded and used to manually assign a camera rotation
   * 0x00002000 if unit ID < 4, otherwise 0xFFFFC000 if unit ID > 4; in either case, set x3C as the timer
The implication with these value reads (and the code’s failure to properly check if the currently acting unit is downed or not) is that the unit ID and battle slot values stored within battle RAM were swapped at some point in development. Battle slot ID would have been at battle_RAM +0x00, and unit ID would have been at +0x0A.


3.
* Call #0803CCA8 = Clear text var list
* Check action type values:
      * Note: Attack = 0 and Item = 2 is assumed based on prior knowledge; the others match up with actual action types used in the final game so 0 and 2 are likely correct as well, but they call the same shared function so it is hard to say
   * 0 = Attack
      * Set camera position to “mid-round”
      * Call #0811CA54 = proto_action
   * 1 = Psynergy
      * Call #0811C710 = proto_psynergy
   * 2 = Item
      * Frame delay for 0x2D frames
      * Call #0811CA54 = proto_action
   * 3 = Defend
      * Frame delay for 0x2D frames
      * Call #0811C6CC = proto_defend
   * 63 = Flee
      * Display string 3224 - “[16] and friends run!”
      * Call #0811C66C = proto_flee
4. 
* Call #0803F624 = Warp & Flag menu’s |> arrow related. (Has a pointer to the |> graphic in Warp & Flag menus)
* Why?
5.
* Function returns 0 or 1; I think 1 for if Flee was successful, 0 otherwise
0811C646 = End




0811C650 = proto_is_unit_valid_test (charslot_ID; 0-7 or 80-85): Check if data slot number is valid? Returns 0 if valid, -1 if not.
0811C668 = End




0811C66C = proto_flee
1. Get a random value from 0-F: Flee fails if RN = 0 (1/16 chance to fail)
* Specifically, #08014878 is called
2. Set all PC animations to #01, unless there are no PCs in battle; return 1 either way
* Otherwise, if Flee fails, then display string 3225 0 “But they can’t get away!”; return 0
0811C6C4 = End




0811C6CC = proto_defend
1. Check if the acting unit’s ID is valid (call to #0811C650 = proto_is_unit_valid_test)
* Return -1 if the acting unit’s ID is not valid
2. Check if acting unit is downed (HP = 0)
* Return 0 if the acting unit is downed
3. Print string 3116 = “[18][1] is defending!”
* Return 0 still; I suspect this may be a typo (returning 1 would make more sense)
0811C708 = End




0811C710 = proto_psynergy




0811C984 = proto_attack_test(???_address)
This determines if both the Attacker and their Target actually exists, then makes the Attacker attack their target (likely with a standard attack) and animates them. Some other stuff kinda happens, but only as it relates to the carrying out of the attack action.
0.
???_address moved to r6                - Unknown address, but it held/holds various arguments and may still exist elsewhere
A value is loaded from an address that is loaded from #030000B0: Camera Destination Data (#02031090) in the final game
 - If camera_angle = 2000:
   - Then delay for 10 (x0A) frames
   - Else delay for 30 (x1E) frames
1. 
MOV r5, sp
Load attacker_ID from ???_address + 0 and store to sp x08
Call #0811C650 = proto_is_unit_valid_test (charslot_ID; 0-7 or 80-85)
 - If unit is valid:
   - Load target_ID from ???_address + 10 (x0A), store it to sp x24, then make it signed
     - Signing appears to negate enemy IDs? NOT CERTAIN (someone else can check)
     - If invalid, return -1 and end function
 - If unit is invalid, return -1 and end function
2. 
Load attacker_ID's character RAM address, and then... do nothing with it
It gets overwritten immediately by target_ID's character RAM address, which... also does nothing with it
This gets overwritten by a random 16-bit number (08014878 = rand() as Int16), which ALSO does nothing with it
 - I suspect that, if these functions did not do something else at one point in time, that some code may have been commented out prior to compilation
3. 
Load Target (Number Var 1) text argument, then print text string {3168} - "[18][1] attacks!"
Call #0811C120 = attack_anim with the following arguments: (attacker_ID, target_ID, 0x0D (13), 0)
 - This function is called directly twice by the main, final function that differentiates between attack types, as well as indirectly via 
   function table call by several battle animations
Load Attacker's Sprite/Actor RAM Address
 - Set anim_speed to x10 (16)
Load Target's Sprite/Actor RAM Address... but does nothing with it; more commented out code?
4. 
Store a value of 1 to to sp x14 and, if the Target is a PC, to sp x04 as well
 - If the Target is not a PC then a value of 0 is stored to sp x04 instead
Store a value of 4 to sp x1C, then delay for 4 frames
 - Call #08138008 (#0815E320 = Physical attack animations), with the SP loaded from r5 to use as a function variable
Return Target, then Attacker positions to defaults




0811CA54 = proto_action
General note: Like with proto_execute_action, the acting unit’s value is treated as a battle/party slot value rather than an ID, and the inverse is also true of the target value (being treated as an ID instead of a slot #).
1. This starts similarly to proto_execute_action, loading the acting unit’s ID and treating it as if it is the unit’s slot value instead.
* 0x00002000 if unit ID < 4, otherwise 0xFFFFE000 if unit ID > 4; in either case, set x28 as the timer


2. * r6 = sp +x08:
* Copy action type argument (e.g. ability ID, item slot value) from battle RAM to r6 + 0x00 (sp x08)
* Copy action range from battle RAM to r6 + 0x10 (sp x18)
* Copy user ID (originally user battle slot value) from battle RAM to r6 + 0x08 (sp x10)
* Copy target battle slot value (originally target ID) from battle RAM to r6 +0x0C (sp x14)
* Call #0811C650 = proto_is_unit_valid_test (charslot_ID; 0-7 or 80-85)
* Return -1 if the target is not valid/does not exist


3.  
* Call #0811A188: List all units for the corresponding side of battle, depending on target ID (PC or enemy)
* Use sp x2C as reserved space for the list (r1 argument; list saved in r7)
* Store number of units to r6 + 0x14 (sp x1C), for some reason; this gets replaced before it can be used
* Load byte from #0203008D, used to temporarily negate flag 1 (display PP) in function call to #0804297C when the action is being performed
4.  
* Load user’s sprite data via Call to #0811BE3C = load_char_sprite_header_address(char slot)
* Set user’s animation to 3 and animation speed to 0x10
* Check target ID:
* If target = PC:
* Store 1 to r6 + 0x04 (sp x0C)
* If target = enemy:
* Store 0 to r6 + 0x04 (sp x0C)
* In either case, store 1 to r6 + 0x14 (sp x1C) and call #0811A188 again, depending on which side is being targeted
* r7 = 0, copy r6 to r2, and enter into a loop if the value at sp x1C != 0... which is guaranteed


5.  Loop, which works in the following process for each character ID in list:
1. * OBJ_pointer from load_char_sprite_header_address(char slot) (e.g. #020300D0 + 0x00)
* From OBJ_pointer, load sprite_dynamics (e.g. 0203136C)
* From sprite_dynamics, load # of sprite layers (+ 0x1B)
* If it has exactly one layer (i.e. base sprite with no shadow, weapon, or indicator sprite), then skip to c)
2.  
* # of extra sprite layers stored to r12
* [Will double check this later but there’s an internal loop for every sprite layer]
3. * Increment and check loop counter, r7, against number of units... which is replaced with 1 earlier, meaning it doesn’t loop for every unit and it only picks the earliest one in the list
* Start back from a) until every unit ID has been checked
6. 
* Play each ePower boost animation in succession, from Venus through to Jupiter
* Execute ability animation
* Set user’s animation to 1
7. 
* Return unit list units to original positions (unless there are none), then return user to original position




0811CBE8 = proto_deal_damage_test(charslot_ID, damage, crit_landed_flag, ?)? Has a setAnimation(,5) (Is hit animation), and a setAnimation(,1) (Is idling animation) - Unused
This seems to be a remnant of earlier code that, if it exists, appears to no longer call this function. It is unknown how critical hit damage was previously calculated, but the order of things reflects how damage is executed in prerelease footage. See this video for an exact timestamp; the ability animation happens, then the targets are shown getting hit consecutively, not simultaneously like they do in the final game. The damage text also matches.
0. 
If arg 3 (?) /= 0, then store x00 to four bytes at the beginning of stack... 
 - The purpose of this is unknown. Presumably they would have been used in whatever function called this one, but it no longer exists to check.
1. 
Grab Target's Character RAM Address
 - Deal damage (Current HP - Damage = New HP)
2. 
Grab Target's Sprite/Actor RAM Address
 - Set sprite animation to 5 (hit)
3. 
Call:
 #0804297C = Giant function related to file menu/screen setup, with arg 0
 #0803CCA8 = Clear text var list
4. 
Check Target ID (changes critical hit text depending on ID), then for both:
 - Check crit_landed_flag:
   - Print corresponding critical hit string if true: Unused; these strings are set up in the final damage calculation code, but also go unused there
 - Load Damage (Number Var 5) and Target (Number Var 1) text arguments
 - Print corresponding damage string depending on ID check: Unused; the game uses other "x takes y damage" strings in the final code
 - For enemy targets only, load Target (Number Var 1) text argument again
 0811CC40 = A bitter blow!                         {3183} - PC
 0811CC56 = [18][1] takes [22] damage!                  {3187} - PC
 0811CC64 = A critical hit!                         {3182} - Enemy
 0811CC7A = [18][1] takes [22] damage!                  {3186} - Enemy
5. 
Call:
 #0811CCF0 = proto_defeat_anim (targetchar_ID)
  {If HP > 0, abort; else load target's sprite/actor RAM address, set anim to 5 with 4 frame delay, set sprite script to idle I THINK, and remove sprite}
6. 
Check Target ID (changes text depending on ID), then for both:
 - Check Current HP; skip rest of segment if > 0
 - Load Target (Number Var 1) text argument
 - Print corresponding string
 0811CCA2 = [18][1] was downed...                        {3185} - PC
 0811CCBA = The Grim Reaper calls out to [18][1]!        {3188} - Enemy
7. 
Reload Target Sprite/Actor RAM Address
 - Set sprite animation to 1 (idle)




0811CCF0 = proto_defeat_anim (targetchar_ID)
- Called by (and explained in the notes for) previous function




0811CD30 = proto_fetch_rand_living_char (battle_RAM/02030338) - Return a random living char from the checked character’s side if the current char has 0 HP... or at least, it should. It loads the current character ID from the wrong part of battle_RAM (+0x0A instead of +0x00)






0811CD7C = (Battle Camera position at start of battle. After intro text - First breakpoint.)


Executes at the start of a round. (Just before PC turns..)
Stores into stack all the data slots indexes for PCs/Enemies... + unknown code.
0811CE50 = Start
02000A50 + 12b
0811CE92 = End


0811CE94 = Calculate chance of fleeing: Pending formula:


Random(0,9999) >= 5000 + (2000*fleeFails) + (Relative Level * 500), Oddly uses the “General” RNG.
Relative Level = Get the average level of the Living/Front PCs and subtract the average level of the enemies.


0811CFA4 = Calls battle menu


Executes at the start of a round. (Just for setting up enemy turns/AI for round?) Arg r0 is relative address to turn’s RAM? ; Returns number of turns set out in turn RAM?
0811CFD0 = Start
 0811D0A2 = Write Enemy’s Slot ID to battle RAM
 0811D0A4 = Write Enemy Agility to battle RAM
 0811D0A6 = Write Enemy’s current turn (0-3)
 0811D0A8 = Check for 4 turns, branch if not equal - Turn 2: 5/6 agility ; Turn 3: 4/6 agility ; Turn 4: 1/2 agility
 0811D0D0 = Check for 3 turns, branch if not equal - Turn 2: 3/4 agility ; Turn 3: 1/2 agility
 0811D0EE = 2 Turns - Turn 2: 1/2 agility
 0811D0FE = Check for Sleep
 0811D10A = Check for Stun
0811D126 = Call Enemy AI
0811D15E = End


0811D160 = (turnTableAddr, turnsInTable) For all djinn using an ability effect of 0x48, 0x4C, 0x4F, 0x4A, 0x2E, 0x2F, 0x58, or 0x35, add + 10,000 to agility in the turn table. ; Rearrange turns in agility order.
 Called at:
 0811D6C6 = 


 0811D180 = check action type (x5 = djinni)


0811D24C = Multiplayer sending data? (Turn data, etc.)(r9=sp+#)
 Called at:
 0811D4E2 = 
 0811D51E = 
0811D2F8 = Multiplayer receiving data? (Turn data, etc.)(r9=sp+#)
 Called at:
 0811D4EE = 
 0811D504 = 
0811D414 = Multiplayer opponent turn data?(turnTableAddr, PCs?)
 Called at:
 0811D69E = 


Palette copy for rows x5 and xF to previous rows with addition of arg0 to RGB
(Arg0 was 8) ; Executes at the start of a round. (Just before PC turns..)
0811D5A0 = Start
0811D616 = End


0811D61C = Start
Initializes Round/Turn Data
0811D6D6 = Check Action Type x03
0811D6DA = Check Action Type x07
0811D6EA = Defence value 01 (used for 50% damage reduction; Defend)
0811D6F0 = Defence value 03 (used for 90% damage reduction; Total Defense)
Call 0811CE50 ; (Stores into stack all data slot indexes for PCs/Enemies + unknown.)
0811D71E = End


Get current character's dataslot(character_posslot) (character_slot= 00-0F; 80-8F for enemies) Return character (00-07;80-85) 
Returns DATA SLOT!
0811D720 = Start
0811D746 = End


Get current character's poslot(character_num) (character_num = 00-07; 08+ for enemies) Return character's slot (00-03;80-85)
Returns POSITION SLOT! Note: If arg=PC, or’d with x100; If arg=enemy, or’d with x180
0811D748 = Start
0811D79A = End


0811D79C = PC standard attack animation assignment
 0811D7A6 = List (slots 2, 3, and 6 have attack x04, the rest have attack x01)
0811D7DE = End
Attack types (x4 is the default bank, uses attack type animations; x0/x1/x2/x3 banks can be used, uses ability animation + argument)
0: No visual
1: Downward slash
2: Downward claw swipe
3: Right-left side slash
4: Left-right side slash
5: Upward Slash
6: Kick/uppercut
7+: Plain bash/impact
A: Star Magician’s attack (is red)


0811D7E4 = Return
0811D7E8 = Start = Daedalus AI/targeting (Action type x0A); also Mold/Meld
 0811D878 = Ability #403 (Daedalus strike 2)
0811D89C = Start = Used by Ability Type xC for High Impact (Megaera); (Ability 0x67, Animation 181)
0811D914 = Start = Used by Ability Type xD for HP fully restored (Iris); Aurora Field (Ability 0x12A, Animation 182)
0811D9A4 = Start - Return all chars to normal position?


Execute a turn 
Executes for each character.
0811D9CC = Start
0811DA22 = Call Enemy AI
0811DA88 = Action type x0A check (links to #0811D7E8 if r3 is x0A - Daedalus’ second hit)
0811DABA = Function call to 0812381C (Start of turn: For status effects & action types)


0811DAC4 = Ability Type Values (Sequence/Animation Type; not Damage Type)
0811DB24 = (x1)
0811DB34 = (x2)
0811DB3E = Call to "nimbly dodges the blow!" function.
0811DB44 = (xF)
0811DB4E = Call to nimbly function.
0811DB54 = (x5)
0811DB64 = (x9)
0811DB74 = (xE)
0811DB84 = (x3),(x11)
0811DB94 = (x6)
0811DB9E = (x8),(x10)
0811DBAE = (x4)
0811DBBA = The only call to Item breaking + (?)? function.
0811DBC0 = (xA)
 0811DC52 = “[18][1], stop hitting yourself!”
 0811DC5A = “[18][1] attacks an ally!”
 0811DC76 = Ability 312 (Meld) check, in r2
 0811DC7C = Call to nimbly function.
 
0811DC9A = (xB)
 0811DCB2 = “Djinn are recovering more quickly!”
0811DCEA = (xC)
0811DD1A = (xD)
0811DD3A = (x7)
0811DD42 = Call 0811DE78. (Flee)
0811DD8C = Place 00FF after a character's turn. (Remove turn data.)
0811DDAC = Sound Effect (390) (in decimal)
0811DDBE = End


0811DDD8 = Start
0811DE78 = Flee
 0811DEC0 = But there's no escape!
 0811DF50 = But there's no escape!
0811DF70 = Ability Sequence Type x5, x9, xE ; xC, xD
 r1=Party disappearance - 0=Party disappears except for caster. 1=Entire party disappears. 2/3=Same as 0/1, but may not fade.
 0811E10A = But the Psynergy was blocked!
 0811E114 = ...But doesn't have enough PP!
0811E36C = Ability Sequence Type x1
 0811E390 = Call to Damage Formula


0811E3AC = Ability Types 15-17: Morph Sprite Replacement Routine
SP/Value guide:
r7 - Free Space? (03007de4 in tests; in r1 prior to entering this function)
r8 - Address of [Slot ID]
[Slot ID] is either x80/x00 if the ability targets an ally, or the User's ID (x00-07/x80-x86) if it targets an enemy
x00 - 020300D0 OR [Slot ID] RAM Sprite Address (as of 0811E634)
x04 - 0 (targeting user's side of field) or 1 (targeting opposing side of field)
x08 - 020306C8 (in r0 prior to entering function)
x0C - 16-bit Slot IDs
x18 -
x1C -
x20 -
x24 -
x28 -
Address = first instruction of that segment


0811E3AC = Start (Initialization)
0811E3C0 = Ability Type ID checks (15-17); continue (to $0811E3D2) if true
0811E3C8 = Psy-Seal check; continue if Psynergy is not blocked (02030724 value = 0)
 0811E3CE = Return 0 if both checks fail; end routine
0811E3D2 = Determine if ability is targeting user's side of field or opponent's side; value to sp x04
0811E3EC = BL $08014DAC (find [free space], x38); address moved to r9
0811E3F0 = Store Same/Opposite Side 0/1 ([free space] + x31) and Psy-Seal 0/1 ([free space] + x32) values to free space
 Psy-Seal value likely a shorthand for storing x00 only; Psy-Seal has no bearing on rest of code
0811E402 = List; Ability Transformations/Morphs (Call/Summon spells), Abilities 600 - 631;
...
0811E52A = Enemy ID (for sprite) stored to [free space] + x34
0811E52E = Target Side check
 0811E534 = Target Same Side
  Generate [Slot ID] based on whether user is a PC (x80) or an enemy (x00); [free space + 30] moved to r8
  The purpose of this is to replace the first sprite slot of the opposing side with the Morph's assigned sprite
  0811E546 = Check if first enemy is alive; continue (to $0811E57C) if true
   0811E552 = Store x01 to ([free space] + x32)
   0811E556 = Grab Sprite Data Address of [Slot ID]
   BL $0811A720 = Set Script 11 ("Do Nothing") to selected unit's sprite data
   0811E562 = Grab Sprite Data Address of [Slot ID]
   0811E56A = Set sprite scale to x00013333                            <- Note: Only if actual target slot does not exist
 0811E570 = Target Opposite Side
  Move User ID (from first byte of sp x08) to [free space + 30]; [free space + 30] moved to r8; User ID = [Slot ID]
0811E57C = Move [Slot ID] to r7 + x08
0811E582 = Set User's animation to 3 (Casting), with speed x10
0811E59C = Colour Special Effects (I/O Register 4000050h; x3F40), then play sound effect x9A (Casting Sound) and delay for 10 frames before proceeding
0811E5B6 = Target Side check
 0811E5BC = Target Opposite Side
  Call $08126AE4 with ([Slot ID], x01)                                    <- What is this?
  0811E5C6 = Move sp +x0C to r11
LDR Bank
 0811E5D8 = Target Same Side
  Move sp +x0C to r11; [Slot ID]: Return number of slots listed
   0811E5F0 = Skip section if # of slots </= 0
  0811E5F4 = Loop; grab enemy IDs from sp x0C and call $08126AE4 with ([Slot ID], x01); end loop when every slot is checked
0811E608 = Alpha Blending (I/O Register 4000052h); for phasing User OR Opposing Side out of view
0811E62C = Move [Slot ID] Sprite Data (RAM) address to sp x00
0811E636 = Move [Sprite Properties RAM Pointer], from [Slot ID] Sprite Data, to r10
0811E63C = Target Side check
 0811E640 = Target Opposite Side
  Remove User Sprite Data from battlefield
 0811E64A = Target Same Side
  [Slot ID]: Return number of slots listed
  0811E65C = Skip section if # of slots </= 0
   0811E660 = Remove Opposing Side's Sprite Data from battlefield (loop)
0811E67A = Transfer [Slot ID] Sprite Data to [free space]; data size x2C
0811E68E = BL $0811A720 = Set Script 11 ("Do Nothing") to [Slot ID]'s sprite data
0811E69C = Set sprite scale to x00013333            <- Note: Only if actual target slot exists (i.e. not unloaded)
0811E6A8 = Target Side check
 0811E6AE = Target Opposite Side
  BL $08014DAC = get_free_space(size) for x8000 bytes, WRAM checked first; address stored to [free space] + x2C
 0811E6BC = Target Same Side
  x02018000 (address) stored to address stored to [free space] + x2C
0811E6C2 = Load Sprite and Palette from Enemy Properties/Actor Properties Table (Enemy ID from [free space] + x34)
0811E6D6 = Return decompressed sprite size (x400 for small sprites, x1000 for normal; moved to r5); branch to $0811E714 if size = 0
 0811E6E8 = Replace [Slot ID] Sprite with Enemy Sprite ID + x7000
  0811E6FA = Target Side check; skip to $0811E732 if target is on Opposite Side
   Store x00 to [free space] + x2C, then branch to $0811E732
0811E714 = Replace [Slot ID] Sprite with Enemy Sprite ID
0811E720 = Target Side check; skip if target is on User's Side
 0811E726 = Set free space using ([Free Space] address (r9) + x2C)
0811E72E = Store x00 (from r5) to [Free Space] + x2C
0811E732 = [Slot ID] moved from [free space + 30] to sp x0C, xFF to sp x0E
0811E740 = Call $0811B75C for rendering, linking double-wide enemy sprites together; args are (address, 1, 0)
0811E74A = Store x00280000 at [Sprite Properties RAM Pointer] + x0C; this appears to be a timer value under normal circumstances
0811E752 = Set [Relative Rotation] to x8000 if the target is an enemy (sprite faces opposing side) or x0000 if the target is a PC (sprite faces ally)
  Call $08126AE4 with ([Slot ID], x01)                                    <- What is this?
0811E76C = Loop (r5 = counter, r6 = Alpha Blending (I/O Register 4000052h))
  This whole loop appears to be tied to a frame counter for blending a sprite into battle gradually, and is also used to change their height
  Call $08126AE4 with ([Slot ID], x01)                                    <- What is this?
0811E7C2 = [free space] moved to r0
0811E7CC = De-initialize
0811E7D8 = End




0811E7DC = Start
0811E830 = Start (Ability types 15-17 - Return User Sprite)
0811EA0C = Ability Sequence Type x2, xA, xF
 0811EB1E = setAnimation(,2) (Attacking animation)
 0811EC60 = [18][1] nimbly dodges the blow!
 0811ED3A = Check if animation is loaded
  0811ED40 = Call attack animation (08138008)
  0811ED48 = Call ability animation (08138018)
0811EDB0 = Item breaking function = Ability Sequence Type x4
 0811EEFA = setAnimation(,1) (Idling animation)
 0811EF44 = Item use type check; type 1 = “Single use”
 0811EFB6 = Item use type check; type 2 = “Breaks when used”
 0811EFC2 = RNG check; will break at a rate of 1/8
 0811EFD8 = Your [20][1] broke!
 0811EFF4 = Item use type check; type 4 = “Item transforms” 
 0811F000 = Item ID (184 - Hermes’ Water) check; replace item if true 
 0811F004 = Item ID (185 - Empty Bottle) check
0811F030 = Sprite Palette Updating (includes status)
 0811F05A = Palette Swap (status?)
0811F088 = Ability Sequence Type x3, x11, x8, xA? (x6) ; (xC, xD - High Impact, HP restored)
 r1 = Starting animation - 0 = 3 bubbles; 1 = Djinni Use (modifies some animations); 2 = Monster Skill; Probably flags.
 0811F264 = But the Psynergy was blocked!
 0811F26E = ...But doesn't have enough PP!
 0811F2DE = setAnimation(,1) (Idling animation)
0811F330 = Start        - Deal damage and update HP/PP gauge live?
 0811F344 = setAnimation(,5) (Hit animation)
0811F3B8 = Start - Removes enemy/pc from battle (List of chars in battle.)


0811F444 = prep_enemy_death - Enemy Death/Disintegration (used only by text-induced deaths caused by post-action turn effects, i.e. curse/poison/haunt; normal deaths occur in a different segment of code)


0811F4D4 = Enemy AI: Targeting(team) - Returns a random living character. (if arg=1, 0100-0103 ; or if arg=0, 0180-0185) If none, returns 0. Also used by Mold.


0811F5A4 = Meld: Generate Ally ID, based on whoever has the highest Attack stat (or the user, if all allies are downed)
 0811F5BE = Grab user’s Attack
 0811F5F0 = Grab ally’s Attack?


0811F66C = Enemy AI-Only: Targeting(user,ability_address) - Returns a random character.
 Return -2 if no target is possible. ; Return -1 if no target is useful for the ability.


Set up after formula checks:
sp 0x8 = Valid target counter -1 (?)
sp 0xC = sp + x20


Set up before formula checks:
sp 0x14 = Living/Valid target counter (not sure which)
sp 0x18 = Total target counter
sp 0x1C = User ID (from r0 at start of function)
r7 = Ability Address


0811F68C = Load Ability Target Type
0811F68E = ??? Target (x00) check; equal (branch to #0811F76E)
0811F694 = Ally Target (x02) check; equal
0811F698 = User Target (x04) check; not equal  [Target types x02 and x04; r2 = x01; others; r2 = x00]
0811F6A0 = User ID check; branch to #0811F6AA if ID </= x07   (skipped by Target Type x00)
0811F6A4 = (Enemy User) Target type check; branch to #0811F710 if fails (if equal to x00, branch to #0811F6AE)
0811F6AA = (PC User) Target type check; branch to #0811F710 if r2 = x00
0811F6AE = PC targeting listing
 0811F6B6 = Check for xFF, which is displayed after the last PC in battle. If the first PC in the party is read as xFF, then enemies will target each other with attacks and the player’s side will be entirely removed from battle (stats also blanked out, though you can still select actions)
 0811F6CA = Read base PC target ID?
 0811F6D8 = ??? Replaces/sets party slot 1’s (left-most unit) HP value to 6382 and crashes the game.
 0811F6DE = Ability Target Type check (?): x04 (User); branch to #0811F6F0 if not equal
 0811F70A = PC party list loop check; loops back to #0811F6D4 until every PC has been found
0811F710 = Monster targeting listing
 0811F71C = Check for xFF, which is displayed after the last enemy in battle.
 0811F72E = Read base monster target ID?
 0811F73A = Target Type check (?): x04 (User); branch to #0811F750 if not equal
 0811F746 = ??? check
 0811F76A = Monster party list loop check; loops back to #0811F738 until every PC has been found
0811F76E = Target Type 0 (???) plus further code of other types
 0811F770 = Opponent headcount check (r8 = number of PCs/monsters in battle); branch to #0811F77A if /= 0
 0811F776 = Calculate -2 to return to parent function(s)
 0811F77E = Opponent team check; branch to #0811FC6C if <0 signed (monster), continue otherwise
 0811F792 = Function call to #08016CA4 (load target character data (RAM address)
0811F798 = Ability Effect List/Added Effect List (checks up to effect #88, pointer list starts at #0811F7AC)
 0811F910 = 6, 7 (Boost Attack)
 0811F936 = 8, 9 (Drop Attack)
 0811F94E = 10, 11 (Boost Defence)
 0811F96A = 12, 13 (Drop Defence)
 0811F98A = 14, 15 (Boost Resistance)
 0811F9A6 = 16, 17 (Drop Resistance)
 0811F9C6 = 3 (Cure Poison)
 0811F9DA = 4 (Restore: Stun, Sleep, Delusion, Curse)
  0811F9E2 = Delusion
 0811F9F0 = Confusion
 0811F9FE = Charm
 0811FA0C = Sleep
 0811FA1A = Psy-Seal
 0811FA28 = Curse
 0811FA32 = 61, 62, 70, 71 (Recover, 60%, 30%, 50%, 70%)
  0811FA3C = If Current HP < Max HP, execute; r6 = 1 if less, branch to #0811FBA0
 0811FA46 = 33 (Break)
 0811FACC = 64 (Remove all status ailments)
  0811FAD4 = Delusion
 0811FAE2 = Confusion
 0811FAF0 = Charm
 0811FAFE = Sleep
 0811FB0C = Psy-Seal
 0811FB1A = Curse
 0811FB28 = Haunt, also Poison/Venom
 0811FB3C = 28 (Death Curse)
 0811FB44 = 18 (Poison)
 0811FB52 = 19 (Venom)
 0811FB64 = 23, 85 (Stun)
 0811FB6C = 24 (Sleep)
 0811FB74 = 26 (Haunt)
 0811FB82 = 5, 56, 57, 73 (Revive, to 50%, to 80%, to 60%)
 0811FB90 = 47, 88 (Decrease damage by 90%, by “95” (actually 90)%)
 0811FB9C = Default Setting
 0811FB9E = 0-2 (Nothing, ?, ?)
  0811FBA2 = Current HP check (branch to #0811FBB0 if /= 0)
  0811FBA6 = Function call to #080B0740 (check to see if ability effect revives)
0811FBB4 = Ability Formula List (checks up to formula #11 not counting #0, pointer list starts at #0811FBC8)
 0811FBF4 = #3,4 (Added Damage, Multiplier)
  0811FBF6 = Load Current HP
 0811FBFA = #5,6,8 (Base Damage, Diminishing, Summon)
  0811FBF6 = Check base ability Power; branch to #0811FC3C if = 0
  0811FC02 = Load Current HP
 0811FC06 = #10 (Psynergy Damage)
  0811FC08 = Load Current PP
 0811FC0C = #1 (Healing)
  0811FC10 = Check Current HP; branch to #0811FC3C if = 0
  0811FC18 = Compare to Max HP; branch to #0811FC3C if >/= Max HP 
 0811FC1E = #11 (Psynergy Healing)
  0811FC26 = Compare Current PP to Max PP; branch to #0811FC3C if >/= Max PP
 0811FC2C = #2,9 (Effect Only, Utility)
  0811FC2E = Check base ability Power; branch to #0811FC3C if = 0
  0811FC36 = Check Current HP; branch to #0811FC3C if = 0
 0811FC3A = #7 (Effect Only - Priority)


0811FC72 = Calculate -1 to return to parent function(s)
0811FC80 = Ability target type 1 (enemy; branch to #0811FE16 if not equal)
0811FC88 = Ability target range (branch to #0811FE00 if not single target)
0811FCA6 = IQ check for value 2 (continue if not equal) - skips a lot of code (to #0811FE08)
0811FCB4 = Checks ability formula (up to #5 - Base Damage) - skips to #0811FE10 if formula ID is higher


0811FCC0 = -1 stored to r1
0811FCC2 = 0 stored to [sp, #0x18] = Total Target counter reset
-0811FCD2 = Target counter of some kind??? (branch to #0811FD7A)
0811FCFE = Grab Target 1 character RAM address (how; is it random???)
0811FD06 = Grab Target 2 character RAM address (how; is it random???)
0811FD0E = Grab user RAM address
0811FD28 = IQ check for value 0 (branch if not equal)
 0811FD2C = Current HP comparison (IQ:0 only); used to prioritize targets with most HP
 0811FD38 = Max HP comparison (IQ:1 only); used to prioritize targets with highest HP totals
0811FD42 = Actual HP comparison (branch to #0811FD60 if Target 1’s HP > Target’s 2 HP) 
 0811FD50 = 
 0811FD52 = ID of Target 2 stored to r7 (stack?)
-0811FD7A = Target counter of some kind??? (branch to #0811FCD2)
0811FD8E = Valid/Living Target count check
 0811FDAA = 2 Targets (resulting in 6/5 odds for targets, from left to right) [0, 1]
 0811FDBE = 3 Targets (resulting in 6-5-4 odds for targets, from left to right) [0, 1, 2]
 0811FDD2 = 4 Targets (resulting in 6-5-4-3 odds for targets, from left to right) [0, 1, 2, 3]
0811FE34 = End




020300A4 = PC battle listing
020300B2 = Enemy battle listing


0811FE3C = Clear status effects on death
 0811FE44 = Clear Summon buffs
 r0 = Odd-positioned values
 r4 = Even-positioned values
  0811FE66 = Clear Poison byte (r0)
  0811FE6C = Clear Attack Duration (r4)
  0811FE72 = Clear Attack Tier (r0)
  0811FE78 = Clear Defence Duration (r4)
  0811FE7E = Clear Defence Tier (r0)
  0811FE84 = Clear Resistance Duration (r4)
  0811FE8A = Clear Resistance Tier (r0)
  0811FE90 = Clear Delusion (r4)
  0811FE96 = Clear Confusion (r0)
  0811FE9C = Clear Charm (r4)
  0811FEA2 = Clear Stun (r0)
  0811FEA8 = Clear Sleep (r4)
  0811FEAE = Clear Seal (r0)
  0811FEB4 = Clear Regeneration (r4)
  0811FEBA = Clear Reflect (r0)
  0811FEC0 = Clear Haunt (r4)
  0811FEC6 = Clear Curse (r0)
  0811FECC = Clear Crit+ (r4) (this code seems to clear absolutely everything)
  0811FED2 = Clear Counterattack (r0)
  0811FED8 = Clear Kite (r4)
  0811FEDE = Clear 1-Turn (r0) 
  0811FEE4 = Clear Agility Duration (r4)
  0811FEEA = Clear Agility Tier (r0)
  0811FEEE = Clear Challenge (r4)




0811FF08 = Wait for user response. (Edit: Wait until text has been fully displayed + Red spinning crystal graphic.)
 0811FF76 = Sprite transparency
 08120008 = B button held. ; Or L/R/A/B pressed.
08120060 = Start - ??? - Wait until L/R/A/B is pressed to advance text log?
 08120124 = "03001150"
08120158 = Start - Wait until text is displayed, and show next text on same line. (Used with unleashes.)
08120178 = Start - Remove character from battle?
081201B4 = Set some flag (x16C - Link Arena)


Execute text string data 
081201C4 = Start


081201E6 = List
08120238 = D ? (Link Arena-related?)
08120246 = C Remove without killing (relevant for EXP gain)?
08120252 = 0 Display character/target name
08120260 = 1 Add numerical value to text string (argument)
0812026E = 2 ?
08120284 = 3 ?
0812029A = 6 Puts the text string on the current line
081202A8 = 4 Text String ; Wait for response.
081202BA = 7 Text/argument clear (useful for setting up certain arguments)
081202C0 = 5 Print next line with very brief delay (automatic)
081202D0 = 8 Play defined sound effect + function call that sets the target’s animation to 5
081202F2 = 9 Kill target
08120312 = A ?
08120322 = B ? (used a lot)
0812033C = F Remove character from battle (used by added effect)
08120346 = E ? - Plays a staircase sound?


0812035A = End


08120360 = Set text string data ; Used to add text-related stuff to an array for displaying. 
08120388 = Arg is ability effect for x1F/x20/x3C/x45 (31/32/60/69); used to decide if effect still works on target death
081203A8 = Returns true is enemy 102 Agatio or enemy 105 Karst (GS2-exclusive); used to decide if enemy can be killed by poison damage or haunt (if not, then its HP will stay at 1); also used by ability effect #27 to decide if enemy can be killed (happens after luck check)
081203C8 = Start (GS2-exclusive; used for Star Magician)


execute_ability (Damage Formula/Execute Hit)
r7 = 
r8 = Target RAM
r9 = Related to number of enemies 
r10 = Target ID
r11 = Ability ID


sp x00 = Multi-Target Ailment Success Chances
sp x04 = Argument pointer (02030712)
sp x08 = Appears to be some kind of broken loop counter that prevents Critical Hit text from being displayed.
    - Attempt to comment out the text without simply removing it?
sp x0C = Contains Defence stat during formula in vanilla; free in reform
sp x10 = ePower of ability's element
sp x14 = [Free Space Pointer]
sp x18 = Element Weak/Normal/Strong indicator, for changing text string (values -1, 0, or 1)
sp x1C = Formula/Damage Type ID
sp x20 =
sp x24 = Critical Landed (can be 1 or 2; still need to figure out when or how 2 is ever applied)
sp x28 = Current Target Ailment Success Chance
sp x2C = HP to 1 (x01) OR Target Can't Die (x02) (physical formulas only;
sp x30 = True Damage Dealt (limited by the target's current HP/PP; used primarily for HP/PP Drain abilities)
sp x34 = Multiply Damage by [1, 2, or 3] (induced by added effect; 1 is the default value)
sp x38 = Ignore Defence effect in play (physical formulas only; changes to Defence stat in reform)
sp x3C = Distance from Main Target (0 = Main Target, 1 = Adjacent, 2 = After That, etc.)
sp x40 = Battle Data Address = 0203004c
sp x44 = User ePow/Target eRes Difference (during formula)
sp x48 = Ability Element
sp x4C = User ID
sp x50 = User RAM
sp x54 = Ability Data
sp x58 = Arg r1 (0 = non-damaging + effect only)
sp x5C = Arg r0 (pointer to 020306c8)


sp x60 = \            (Starts here)
sp x64 =  > Enemy List (6 IDs ending with 00FF)
sp x68 =  > There is a final 0000 that is unused.
sp x6C = /


r7 = Ability Power (loaded during formula)


08120454 = Start of function
 08120486 = Meld check?
 08120490 = Mold check?
 08120502 = Poseidon check 1 (branch if enemy ID is less than 93 (x65))
 08120506 = Poseidon check 2 (branch if enemy ID is 93-95 (</= x67))
 0812050A = Sentinel check (branch if enemy ID is not 213 (xDD))
  08120514 = Action Type x01 (Psynergy) check
08120534 = [18][1] dissipated your psynergy.
 08120540 = Ability ID (Trident) check; can’t damage with anything else until first use of Trident
08120570 = [18][1] is protected by a force field.
 081205A8 = Haze status check
081205C6 = But it has no effect on [18][1]!
081205C8 = Load ability range
081205D0 = Target all check
081205EA = Element check (for non-elemental abilities); seems to determine lowest elemental resistance
 081206B6 = Djinnfest, Fugue (one in recovery)
 081206D6 = Djinn Blast, Djinn Storm (put all in recovery)
 081206E8 = Djinn Stun (one on standby)
r1 = 0 - One Djinni, 1 - All Djinn
r2 = 0 - Recovery, 1 - Standby
r2 checked first; if /= 0 then r1 won't be checked
08120716 = spx28 = Calculate_Ailment_Success (Boolean)
08120730 = Effect 86 (Clarion Cry/Mystic Call) check
08120734 = Effect 87 (Regen Dance) check
08120762 = Effect 86 (Clarion Cry/Mystic Call) check
 0812077C = Add Enemy 81 (Sea Fighter)
0812077C = Effect 81 (instantly end round) check
08120780 = Effect 87 (Regen Dance) check
0812082A = Effect 87 (Regen Dance) check
08120916 = Effect 87 (Regen Dance) check
0812091A = 3428 - “[18][1] is up and ready to fight!”
08120922 = Ability 503 (Speed Surge) check; branch if equal
08120926 = 3414 - “[18][1] appears!!”
08120934 = 3412 - “It split off into [18][1]!”
08120946 = Ability 503 (Speed Surge) check; branch if not equal
0812094A = 3413 - “It failed to divide!”
08120958 = 3415 - “But no one came!”
0812096C = Checks for effects 53 and 83; lose next turn?
081209AA = Effect 35 (ignore 50% of defence) check
081209B4 = Effect 34 (reduce HP to 1) check
081209BE = Effect 27 (inflict death) check
081209C8 = Effect 55 (User dies) check
081209E4 = Effect 32 (Psy Drain) check
081209FE = Effect 90 (Cloud Brand’s ignore defence) check
08120A08 = Effect 91 (Trident) check
 08120A0E = Store x02 to sp, #0x38
08120A12 = Effect 75 (Delusion [on all enemies]) check


ABILITY FORMULA CODE!
08120A58 = Formula List
08120A8C = Added Damage, Multiplier
 08120B0E = Meld Ability ID (312) check 1
 08120B16 = Mold Ability ID (316) check
 08120B24 = Meld Ability ID (312) check 2
08120B8C = A critical hit! (or if PC is targeted: A bitter blow!)
08120C58 = [18][1] takes [22] damage! (3200)
08120C60 = [18][1] takes [22] damage! (3197)
08120CB8 = [18][1] was downed...
08120CBC = You felled [18][1]!
08120CE2 = Psynergy Damage
08120D9C = [18][1] loses [22] PP! (3190)
08120DA0 = [18][1] loses [22] PP! (3189)
08120DCE = Healing
08120E44 = [18][1]'s HP is fully restored!
08120E56 = [18][1] recovers [22] HP!
08120E74 = Index -1 (Unknown) (PP damage - What’s special about this compared to Psynergy Damage?)
08120F1A = [18][1] takes [22] damage! (3187)
08120F1E = [18][1] takes [22] damage! (3186)
08120F70 = Base Damage, Base Damage (Diminishing), Summon
08121112 = Max HP for calculating damage (soft cap of 10,000, to limit amount of damage summons deal)
081211FE = [18][1] takes [22] damage! (3200; player damaged)
08121206 = [18][1] takes [22] damage! (3197; enemy damaged)
08121252 = [18][1] was downed...
08121256 = You felled [18][1]!
08121278 = Psynergy Recovery
081212DE = [18][1]'s PP is fully restored!
081212F0 = [18][1] recovers [22] PP!
08121304 = Effect Only
081213B2 = [18][1] takes [22] damage! (3187)
081213B6 = [18][1] takes [22] damage! (3186)
081213EA = Doom Dragon (361) check
081213F2 = Doom Dragon (365) check
08121404 = [18][1] was downed...
08121408 = You felled [18][1]!
08121422 = [sp x30] = Damage dealt, capped at target’s current HP (for Effect Only)
08121478 = But it has no effect on [18][1]!


08121496 = Ability ID (Trident) check; removed force field
 081214A2 = [18][1]'s force field was broken!
081214BA = Effect x4B (75) check


ABILITY EFFECTS CODE/ADDED EFFECTS CODE - Status effects (ability effect table/added effects table)
08121510 = Pointer Table
08121676 = [18][1] sees clearly once again!
081216A8 = [18][1] is no longer stunned!
081216BE = [18][1] wakes from slumber!
081216DE = [18][1]'s Psynergy seal is gone!
081216FE = [18][1] shakes off the Grim Reaper!
0812171E = The Spirit of Death leaves [18][1]!
0812173E = The poison is purged from [18][1]!
08121776 = [18][1] sees clearly once again!
0812179E = [18][1] is no longer stunned!
081217C6 = [18][1] wakes from slumber!
081217EE = [18][1]'s Psynergy seal is gone!
0812181A = [18][1] shakes off the Grim Reaper!
081218D4 = [18][1]'s HP is fully restored!
081218E4 = [18][1] recovers [22] HP!
0812195E = [18][1]'s PP is fully restored!
0812196E = [18][1] recovers [22] PP!
081219AA = [18][1]'s Agility rises by [22]!
081219DE = [18][1]'s Agility drops by [22]!
08121A22 = [18][1]'s Attack drops by [22]!
08121A74 = [18][1]'s Attack drops by [22]!
08121AC6 = [18][1]'s Attack rises by [22]!
08121B18 = [18][1]'s Attack rises by [22]!
08121B6A = [18][1]'s Defense drops by [22]!
08121BBC = [18][1]'s Defense drops by [22]!
08121C0E = [18][1]'s Defense rises by [22]!
08121C86 = [18][1]'s Defense rises by [22]!
08121CA6 = [18][1] has been revived!
08121CC4 = [18][1] has been revived!
08121CF0 = [18][1] has been revived!
08121D18 = [18][1] has been revived!
08121D42 = The poison is purged from [18][1]!
08121D9A = [18][1]'s Resistance drops by [22]!
08121DF6 = [18][1]'s Resistance drops by [22]!
08121E54 = [18][1]'s Resistance rises by [22]!
08121EB2 = [18][1]'s Resistance rises by [22]!
08121EC4 = [18][1] is poisoned!
08121EF2 = [18][1] is infected with deadly poison!
08121F00 = [18][1] is wrapped in delusion!
08121F12 = [18][1] is confused!
08121F24 = [18][1]'s heart has been stolen! (Charm)
08121F36 = [18][1] has been stunned!
08121F48 = [18][1] falls asleep!
08121F60 = [18][1]'s Psynergy is blocked! (Seal)
08121F6A = [18][1]'s Psynergy has been sealed!
08121F84 = [18][1]'s Psynergy is blocked!
08121F8E = [18][1]'s Psynergy has been sealed!
08121FC2 = [18][1] was downed!
08121FC8 = Ability ID 219 (Drown) check
08121FCC = [18][1] suffocated!
08121FD6 = [18][1]'s spirit has been drained!
08122030 = [18][1] recovered HP!
08122042 = [18][1] feels the effects of Reflect!
0812209A = [18][1]'s HP is fully restored!
081220AC = [18][1] recovers [22] HP!
081220EC = [18][1]'s PP is fully restored!
081220FE = [18][1] recovers [22] PP!
08122150 = [22] more PP were sucked away!
0812215A = Recovered [22] more PP!
0812219C = [22] more PP were lost! (3259)
081221A6 = [22] more PP were lost! (3258)
0812223A = [18][1]'s strength returns to normal!
0812223E = An evil spirit grips [18][1]!
0812225A = The Spirit of Death embraces[18][1]!
0812227A = The Grim Reaper calls to [18][1]! [22]...
0812227E = [18][1] readies for action!
08122290 = [18][1] rises to the challenge!
081222B8 = [18][1] has become unable to move!
081222C4 = A protective aura encircles [18][1]! (3293)
081222DA = A protective aura encircles [18][1]! (3293)
081222F2 = A protective aura encircles [18][1]! (3294)
0812230A = [18][1] vanished into thin air!
0812232E = Everybody is resting!
0812233E = [18][1] was blown far away!
081223A8 = [18][1] is ready to counterattack!
081223CC = Read counterattack value
 
 
0812243E = But no Djinn are in Recovery! [This isn’t located here]


0812241A = Sleep check; if counter is 1-6, Sleep has a 1/4 chance of being cured when damaged
 0812243E = 3299 - “[Target] wakes from slumber!”
08122472 = Daedalus Ability ID check (skips to the end if this is the ability being used)
08122482 = Haunt Check/Damage Code
081224B6 = End of function.


Return valid Psynergy (used for setting ability type/casting animation and for enemy AI checks)
Returns True (1) for Psy Drain (PP:0); and all abilities that have a PP cost. Else, returns False (0).
081224C0 = Start
081224D6 = End


Return an ability slot based off chance values list at address arg0.
*Used only for Enemy AI (Attack Patterns 1-3), I think.
081224D8 = Start: Does something with the currently selected ability ID
08122510 = End


Enemy AI 
08122514 = Start of function. (02030338 turn data,0=start of round/1=start of turn)
 r5 = 
 r6 = Item Priority flag (Taken one bit from the flags)
 r7 = 02030338 turn data (From arg0)
 r8 = Pointer to data used with Attack Pattern/etc. Enemy RAM data (Enemies with multiple movesets are often setting this to 0x020308B8 + (turn # * 4).)
 r9 = Ability to use
 r10 = ROM Enemy Stats address (Initially)
 r11 = Move id in moveset (0-7)
 sp 0x00 = 08122710 = Item Priority/Checkbox Bits at [sp, x00]
 sp 0x04 = 0812270E = Attack Pattern at [sp, x04]
 sp 0x08 = 08122712 = Beginning/Name offset x2 at at [sp, x08]: Used to grab selected ability ID from enemy data
 sp 0x0C = Initialized as 1 (Unknown) ; 1 when an action is undecided, 0 when one is?; Maybe psynergy/sealable or not?
 sp 0x10 = Counter for deciding an action (+0x10 tries: Initialized as 0, Defends as a last resort)
 sp 0x14 = Initialized as 1 (Unknown) ; Whether to allow the use of items? (Research needed)
 sp 0x18 = Attacker’s RAM address
 sp 0x1C = Start of round/turn (0/1: from arg1)
 sp 0x20 = Summons (1 byte per summon)
 sp 0x44 = standby_djinn_elemental_quantities_refpntr
 sp 0x48 = Size of stack (No more variables)
Theory: I expect at the start of a round, actions are only picked to help come up with an agility order (eg: Some abilities have “Always First” effect), then when turns come, they’re updating to find one that works at the time they go?
 ~0812253E = Checks class for NPC (If not NPC, branches to end of function & returning -1.)
 08122552 = Initializes r8 & r10
 0812256C = Enemy 93 check (Poseidon 1); expanded moveset (turn 1 uses Enemy 93, turn 2 uses Enemy 94)
  08122590 = Enemy 94 (Poseidon 2); expanded moveset
 08122594 = Enemy 361 check (Doom Dragon 1); expanded moveset (these work the same way as Enemy 93)
 081225FE = Enemy 365 check (Doom Dragon 2); expanded moveset
 0812264C = Enemy 368 check (Doom Dragon 3); expanded moveset
 08122682 = Enemy 210 check (Dullahan 1); moveset and attack pattern override (depending on current set)
   081226B0 = 08128960  (Enemy xDA’s moveset list (enemy IDs))
081226C0 = AI/pattern checks(?)
 >If during turn:
 081226C2 = Round/turn variable check
 081226CA = Action Type x04 check (enemy attack; changes to other types upon move execution if applicable)
 081226CE = Increment for Sequential Patterns, and jump to end (Well, to the Dullahan bit.)
  081226D6 = Attack Pattern check (possibly deprecated Confuse status code?) 
08122702 = Enemy attack pattern code. (Chooses an ability from the enemy's ability list.)
 0812270E = Attack Pattern at [sp, x04]
 08122710 = Item Priority/Checkbox Bits at [sp, x00]
 08122712 = Beginning/Name offset x2 at at [sp, x08] (???)
0812271A = Attack Pattern Check (if r3 > x06, unsigned) 
0812271E = Attack Pattern table
 08122744 = Attack Pattern 1
 0812274C = Attack Pattern 2
 08122754 = Attack Pattern 3
  0812275A = Call 081224D8
 08122762 = Sequential Pattern 1
 0812278C = Sequential Pattern 2
 081227B8 = Use First Ability 
081227BC = Whether to use the ability or an item.
081227C0 = Read byte for Ability Priority/Checkbox Bits
081227D2 = Load ability being used
081227D6 = Move ability being used to r9
081227DA = Store x04 (Action Type; Enemy Action) in battle/enemy turn RAM
081227DC = Item Priority flag check; branch to #08122844 if /= 0
 081227EC = Item list in enemy RAM; first item
 081227F2 = Invalidates quantity/broken/other flags to check for valid item
 08122804 = IQ Value check; branch to #08122814 if /= 0
 0812280A = Store x02 (Action Type: Item) in battle/enemy turn RAM
 08122810 = Store x1FD in battle/turn RAM at +x08 (ability ID for “Can’t Use” ability)
  08122812 = Branch to #08122BC6
 08122814 = Item check(r6 = ?); branch to #08122840 if x00
 08122818 = Grab Item address (using item in enemy RAM)
 08122822 = Use type check (single use items only)
  08122826 = Move x00 to r6, branch to #08122838
 0812282A = Grab Item Use (Ability) address (stored in r9 shortly after this)
 08122836 = Store (Action Type: Item) x02 in battle/enemy turn RAM
 08122838 = Store x00 in battle/turn RAM at +x08 (item ID for the first inventory slot)
 0812283C = ??? (r6) check; branch to #08122844 if not x00
 08122846 = ??? (r1) check; branch to #08122B9A if check failed (continue if not x00)
0812284C = ABILITY EFFECTS CODE; move r9 to r0
 08122864 = Pointer table for ability effects code (x2E-x58/46-88); Code for maybe 4 of the effects? 
  08122910 = Defend: Reduce damage by 50%; set Action Type to x03
  0812291A = Total Defence: Reduce damage by 90%; set Action Type to x07
  08122924 = Flee: Flee; set Action Type to x63
  08122934 = Guard Aura and Counterattack ability effects (74, 88): Agility + 10,000
  08122946 = Dullahan related? (r1) check; branch to #08122B6C at #0812295A
 08122952 = Action Type x03 check
 08122956 = Action Type x07 check; branch to #08122BC6 this and previous check fail
0812295E = Action Type x02 check; branch to #081229D6 if match
 0812296A = Move currently selected ability to r0
  0812296C = Call #081224C0 (True for Psy Drain & abilities with PP Cost not 0)
 08122970 = PP cost check; branch to #081229B8 the above call returns x00
 08122978 = Store x01 (Action Type: Psynergy) in battle/enemy turn RAM
 0812297A = Store Ability ID in battle turn RAM
 08122984 = Compares Ability PP cost with caster’s current PP; branch to #08122998 if Ability PP is </=
 08122992 = IQ Value check; branch to #08122BA4 if check fails (continue if x00)
 081229A2 = Bind/seal check; branch to #081229D4 if enemy is not afflicted with bind/seal
 081229B0 = IQ Value check; branch to #08122BA4 if check fails (continue if not x02)
081229B8 = Load Action Type from battle/turn RAM
081229DA = Action Type check; branch to #081229EE if not equal to x63 (Flee)
 081229E8 = “Rises to the challenge” check; branch to #08122BA4 if check fails (continue if effect is x00) NOTE: Skipped completely if Flee is chosen at the start of the round
081229EE = Dullahan related? (r1) check; branch to #08122A08 if equal to x00
081229F4 = Action Type x03 check
081229FA = Action Type x07 check; branch to #08122BA4 this and previous check fail
08122A08 = Action Type x04 check; branch to #08122A92 if not equal
08122A12 = Load Ability ID from battle/turn RAM
08122A14 = Ability ID check; set Action Type to x00 if Ability ID = x01 (Attack)
08122A20 = Ability ID 729 (Crucible) check; branch to #08122A92 if not equal
 08122A7E = Get summon ability


08122A92 = Load Ability Range from ability data
08122A94 = Store Ability Range in battle/turn RAM
08122A96 = Load Target Type from ability data
Target type 2/4: Target Ally/User: 08122AAE
08122AAE = Ability #723 check (will target a specific ally if true (ex. Star Magician), more research needed)
 Guard Aura, targeted at User (0x80) by 0x80. (I think.) (May mean 0x80 is leader in enemy party.)
08122AB8 = Ability #731 check (will target a specific ally if true (ex. Star Magician), more research needed)
 Earnest Ply is Pure Ply, but targeted at User (0x80) by 0x80…, instead of Ally by user. (I think.) (May mean 0x80 is leader in enemy party.)
08122ADE = Unit check; something about target IDs > 7 (PC x07/Piers)
Target type 1: Target Enemy: 08122AF6
08122B08 = Unit check; something about target IDs > 7 (PC x07/Piers)
Target type 3: Target ??? (Dead/Nonexistent): 08122B20
08122B2C = Target type 0, 5+ branches to here.
 These are mainly checks for conditions. Such as if space is available or whether there are any enemies defeated:
(If these moves can’t happen, then they will not be used.)
Clarion Cry = Sea Fighter ID for size check
Mystic Call = Refresh ball ID for size check
 Regen Dance = Fully heals a slain enemy.
 08122B30 = Ability effect 86 (Mystic Call) check; branch to #08122B50 if not equal
  08122B40 = Enemy 156 check (Mystic Call exception)
  08122B44 = Enemy 73 (81) (Mystic Call default summon)
 08122B58 = Ability effect 87 (Regen Dance) check; branch to #08122B8C if not equal
 08122B90 = Call to #0811D748: get target slot/battle ID
  08122B92 = Store target slot/battle ID in battle/turn RAM
 08122B9A = Checks if action is selected / tries again if not… if too many tries, picks to Defend.
08122BD0 = Enemy 210 check (Dullahan)?
 08122BC6 = Effectively makes it so Dullahan’s extended moveset works by going to the next enemy when needed.
08122C14 = End


08122C18 = Start ; Unused? Writes to I/O register DMA3SAD (040000D4) and does something(?)
08122C4C = Start ; Activates Hit, and plays sound. ; Old: Repeated/delayed sound effects (eg. When a battle animation hits multiple enemies)
08122C88 = Start ; May init ability ani common
08122CD0 = Decompress Sprite to VRAM (I think.) 
VRAM pointer to 06010000.
08122D02 = End


?
*Called by 6 POINTERS.
08122D10 = Start - Ability Animation Common Control
 02030878 = Control
 0 = Nothing
 1 = Damage
 2 = Text
 3 = 
 4 = Nothing
 5 = Red Crystal
 A = Enemy hit?
 B = Enemy defeated (Unloads sprite.)
08122D92 = Call to Damage Formula


08122DE8 = List
08122E28 = E Play sound.
08122E34 = D Djinn Kill?
08122E42 = 0 PC/Enemy name
08122E50 = 1 Number
08122E5E = 2 Item name
08122E74 = 3 Ability name
08122E8A = 6 ?
08122E98 = 4 Text String ; Wait for response. (Research*)
08122EB8 = 5 ?
08122ED2 = 7 ?
08122ED8 = C ?
08122EE4 = 8 ?
 08122F08 = setAnimation(,5) (Hit animation)
08122F26 = 9 Kill Unit
08122FA6 = A ?
08122FB6 = B ?
08122FE6 = F ?


0812316C = B button press...?
 
 0812336C = Palette swap on enemy death
081233FC = Call 08122CD0 (Decompress Sprite to VRAM)
081234A0 = End


Unknown 
Sets some data to 0, but one to 0x0086; called by Regenerate turn decrement code
081234A4 = Start
081234EC = End


Unknown
Checks some data above function may use....
081234F0 = Start - Activate Hit, loop until x4, and unload AA Common.
0812352C = End


IsCharInBattle(charslot)
Returns 1 if character slot is in the battle, otherwise 0.
08123534 = Start
08123572 = End


calculate_standby_djinn(charslot, standby_djinn_elemental_quantities_refpntr)
Returns total number of standby djinn.
08123574 = Start
08123644 = End


isEnemyAttackable(ability)
Return 0 if successful attack, -1 if not (Auto-defend.) Probably useful for when you kill an enemy and are supposed to attack it again before the round finishes; also determines actual ability target lists.
Called from damage formula. (Where the attack type is applied.)
This also sets target range and IDs
08123648 = Start
 081237CC = [18][1] is defending!
 081237F2 = Ability Effect x4D (75) check: Delusion against all targets
08123814 = End


Start of turn 
0812381C = Start
0812389E = Debug mode check; flag check for 16D ; Button check for R / R+Select ; Defeats enemy or player's party.
08123924 = Action type x09 check (skip immobility checks if counterattack phase)


08123946 = [18][1] is unable to move!
08123966 = [18][1] is asleep!
08123986 = [18][1] is paralyzed and cannot move!
08123990 = Curse check (1/4 chance of not being able to move; 16-bit RNG AND x03)
081239BE = [18][1] is bound and cannot move!


08123A04 = Action type


08123A14 = Flee (x63)
08123BBC = [16] and friends run!
08123BCC = [18][1] runs!


08123C08 = Attack (x00)
 08123C26 = Unleash check (prior function call returns unleash ability ID or else Attack)
 08123C4A = [18][1]'s [20][1][3]lets out a howl! ; [21]!


08123C68 = Counterattack/Djinn Counter (following Reflux use) (x09)
 08123C84 = Djinn Counter (299) Ability ID
 08123C86 = ID check (convoluted way of doing it); effect is that enemies with IDs of x65-x67 use…
  08123C8A = Attack (1) Ability ID




 = Psynergy (x01)
08123D0A = 3211 - [18][1] summons [21]! (Ex: Trainer’s Whip: Wild Wolf, Emu, Salamander, etc.)
08123D12 = 3212 - [18][1] draws a [21]! (Ex: Mysterious Card: Flame Card, Baffle Card, etc.)
08123D1A = 3210 - [18][1] casts [21]!


08123D96 = Item (x02)
08123DAC = [18][1]'s item has[3]already been used!
08123DF6 = [18][1] is defending!        - Only happens if item is broken or useless, making it unselectable either way
08123E72 = [18][1] uses [20][2]!
08123E76 = [18][1] raises the [20][1]!


08123E7A = Defend (x03), ? (x07)
08123E88 = [18][1] is defending!


08123E96 = Enemy Attack/Flavour Text?(x04)
08123ED4 = [18][1] unleashes [21]!
08123ED8 = [18][1] uses [21]!
08123F08 = [18][1] emits ultrasonic waves!
08123F22 = [18][1] uses [21]!
08123FB6 = [18][1] uses [21]!
08123FBA = [18][1] glowers ferociously!
08123FBE = [18][1] is intimidated and[3]cannot stop trembling!
08123FC2 = The baleful gaze of[3][18][1] turns upon you!
08123FC6 = [18][1] eats some worms!
08123FCA = [18][1] lets out a [21]!
08123FCE = [18][1] unleashes [21]!
08123FD2 = [18][1] glowers miserably at you.
08123FD6 = [18][1] exudes the smell of decay!
08123FDA = [18][1] erupts in furious rage!
08123FDE = [18][1] attempts to divide!
08123FE2 = [18][1] looks for allies!
08123FE6 = [18][1] looks for help.
08123FEA = [18][1] can't move!


08124028 = Djinni Use (x05)
 0812411C = [21] is set to [18][1]!
 08124144 = setAnimation(,3) (Casting animation)


0812417C = Incapacitated (e.g. sleep) (x08)


Djinni Use (x05) continued
0812419E = [21] is still in recovery!
081241FA = [18][1] unleashes [21]!


0812420A = Summon (x06)
081242BC = [18][1] summons [21] but[3]doesn't have enough standby Djinn!
081242DC = [18][1] summons [21]!


08124376 = Attack Ability ID (x0001 - double check this) Check (checked via many action types, including (x0A-x62))
 081243A0 = Ability Type/Modifier (02 - Physical Attack)
 081243B2 = Class ID check; grab Attack Animation ID from Actor/Enemy Properties Table if Class ID = 0
 081243F4 = [18][1] attacks!
  08124406 = User Delusion check
  08124454 = Target Sleep check; skip to flag check
  08124460 = Target Stun check; skip to flag check
  0812446C = Target 1-Turn Stun check; skip to flag check
  08124478 = Target Charm check; skip Delusion and miss chances if target is charmed
  08124484 = If event flag = x16E, then Attack WILL miss


 08124498 = Skip to near the end if the user is dead (purpose?)
 081244A2 = Critical Hit Code 
  081244AA = 1/32 chance of landing a critical hit regardless of Crit+ bonuses
  081244D2 = Crit if (Crit+ bonus << x10) / 200 > 16BIT[rand()]; result is that 200+ needed to guarantee a crit
   081244E0 = Store x01 (strong crit) value to RAM


081244E4 = Ability used. (Not attack.) ; Includes effect check chances with the multipliers x1.5, x2, and x3.
 081244FC = “May multiply damage by...” effect checks
081245C4 = Compare two values ((220 + Effect_ID) << x18) and 0x04000000; the first value is always higher than the second, which is the criteria for skipping Effects 36-40 code (meaning effects are non-functional)
 081245E4 = Effects 36-40 (different critical rates)


08124638 = Annihilation Ability ID (178) check
08124640 = Whorl Ability ID (374) check
0812464A = Effect 82 (may force target out of battle) check
08124696 = Calculate_Ailment_Success (Boolean); determines if animation change occurs, but this has to happen prior to the formula/effect stuff actually triggering


081246B4 = Meld Ability ID (312) check
 081246BC = Load Current Actor/Acting Character ID
081246CE = Mold Ability ID (316) check






0812472E = Load Ability Type Value (Not Damage Type, but Sequence/Animation Type.) from table.
08124732 = If Ability Type = x00, continue; otherwise keep current value
0812473E = Call 081224C0. (True for Psy Drain & abilities with PP Cost not 0.)
 0812474A = Ability Type x03 if ability used is Psy Drain or something with a PP Cost > 0
08124754 = Loads animation + argument from #02030720 (updates with every action); arg 4 (x4000) = Attack_related
08124764 = Class ID check
08124768 = Monster Skill Ability Type/Modifier (08)
0812476C = Psynergy Ability Type/Modifier (03)
08124770 = Ability Type/Modifier (01)


0812478E = Annihilation Ability ID (178) check
08124796 = Whorl Ability ID (374) check 
0812479E = Effect 82 (may force target out of battle) check


081247BE = 
081247F8 = End






Random chance of recovering from an ailment/debuff
(((Luck * 3) - (Turns * 5) + base_chance) * 655) >= 16BIT[rand()]
Attack = 30%
Defense = 20%
Resistance = 20%
Delusion = 30%
Confuse = 60%
Charm = 70%
Stun = 40%
Sleep = 50%
Psy-seal = 30%
08124810 = Start (user, turns, base chance)
08124850 = End


08124854 = Decrement Attack (De)Buff Turn Duration
081248B4 = Decrement Defense (De)Buff Turn Duration
08124914 = Decrement Resistance (De)Buff Turn Duration
08124974 = Decrement Delusion Turn Duration
(Sees clearly once again.)
081249B0 = Decrement Confuse Turn Duration
(Regains consciousness.)
081249EC = Decrement Charm Turn Duration
(Regains consciousness.)
08124A28 = Decrement Stun Turn Duration
08124A64 = Decrement Sleep Turn Duration
08124AA0 = Decrement Psy-seal Turn Duration 
(Psynergy seal)
08124AF8 = Decrement Regenerate Turn Duration
(Recovering HP)
 08124B56 = [18][1]'s HP is fully restored!
 08124B68 = [18][1] recovers [22] HP!
08124BA8 = Decrement Reflect Turn Duration
08124BCC = Decrement Agility Buff Turn Duration
08124BFC = Decrement djinn recovery turn durations (And recover them when they hit 0.) (For use after Summons.) (PC's HP must be > 0)
08124CAC = Decrement djinn recovery turn durations 20 times. (Calls above function.) (Linked from pub only.) (Used in transferring Party 1 to GS2. Not sure if anything else?)
08124CC0 = Return
08124CC4 = Start (GS2-exclusive)
 08124D92 = [21] is set to [18][1]!
 08124DB0 = setAnimation(,3) (Casting animation)
08124E1A = End


End of round (+ status effects) 
08124E20 = Start of function.
 08124E94 = Decrement djinn recovery turn duration
08124F0C = [21] is set to [18][1]!
 08124F30 = setAnimation(,3) (Casting animation)
0812501E = Approximate location for setting Counter-Attack (Reflux) to 0
 08125062 = Serpent checks (x5B - x61), and Dullahan check (xDA)
081250A8 = [18][1]'s HP is fully restored!
081250B0 = [18][1] recovers [22] HP!
08125104 = [18][1]'s PP is fully restored!
08125120 = [18][1] recovers [22] PP!
08125150 = [18][1]'s Agility returns to normal!
0812517A = [18][1]'s Attack returns to normal!
081251A4 = [18][1]'s Defense returns to normal!
081251CE = [18][1]'s Resistances return to normal!
081251F8 = [18][1] sees clearly once again!
08125222 = [18][1] regains consciousness! (3306)
0812524C = [18][1] regains consciousness! (3310)
0812527C = [18][1] is no longer stunned!
081252AC = [18][1] wakes from slumber!
081252D6 = [18][1]'s Psynergy seal is gone!
08125300 = [18][1] stopped recovering HP!
0812530C = Call Decrement Reflect Turn Duration
0812532A = Reflect no longer affects [18][1]!
0812535A = End of function.


Djinn Manipulation Abilities
r8 = Djinni (0-19)
r9 = PC (r0)
r10 = Element (0-3)
r11 = Djinn Set flag (Skips putting Djinn on Standby if none are set.)
r12 = -2 (Recovery Turns comparison)
sp, #00 = 0 - Set to 1 so drain dialogue only appears once.
sp, #04 = r2 [0 - Recovery, 1 - Standby]
sp, #08 = r1 [0 - One Djinni, 1 - All Djinn]
sp,0C = Djinn list
sp,18 = Element list
---
r5 = Djinn list sp
r6 = Element list sp
r7 = Djinn counter (max 10)
---
08125448 = 
r5 = -1 (Recovery Turns comparison) (081254D0)
r7 = Random Djinni (0-9)
---
081254F6 = 
r5 = Recovery List address
r6 = Recovery List size (in entries) address
r7 = PC (from Recovery List)


08125390 = Djinn Manipulation (Fugue/Djinnfest/Djinn Blast/Djinn Storm/Djinni Stun) Start
081253B2
 081253C8 = Function call [#080B0C78]: isDjinniSet(pc,element,djinni) Returns 1 if djinni is set, else 0.
  081253CC = Check for 0 (djinni not set)
 081253EC = Djinn count loop (to #081253C2 if not all djinn have been checked)
 081253F4 = Djinn element loop (to #081253B2 if not all elements have been checked)
08125400
 08125416 = Function call [#080B0BB8]: isDjinniStandby(pc,element,djinni) If there is no djinni, or if set, return 0.
  0812541A = Check for 0 (no djinni/set)
 08125436 = Djinn count loop (to #08125410 if not all djinn have been checked)
 0812543E = Djinn element loop (to #08125400 if not all elements have been checked)
0812547A = sp, #04 check; branch to #081254AE (after standby section)
0812549C = [18][1]'s [21] is on standby!


081255E0 = [18][1]'s [21] is drained!
081255F0 = All of [18][1]'s Djinn are drained!
 -[18][1]'s [21] is drained!
 -[18][1]'s [21] has been drained!
 -All of [18][1]'s Djinn are drained!
0812560C = End




End of turn (+ status effects)
0812561C = Start
08125792 - Stores initial djinni recovery duration post-summon (taking djinn already in recovery into account)
08125834 = (CD5) [18][1]'s Earth Power rises by [22]!
08125852 = setAnimation(,3) (Casting animation)
081258C4 = A curse does [22] damage to [18][1]!
0812590E = [18][1] was downed...
08125912 = [18][1]'s strength is exhausted...
08125968 = The poison does [22] damage to [18][1]!
081259CE = [18][1] was downed...
081259D2 = [18][1]'s strength is exhausted...
08125A26 = The Grim Reaper calls out to [18][1]!
[18][1] was downed...
08125A82 = End


Mostly Graphical Behaviour stuff below? (Not sure about top three functions, though.)


08125AA0 = Unused? - Mosaic effect? (0x10~0x15 frames?)
08125B78 = Fill 0x400 bytes. First 0x1E0 are 00-FF, last 0x220 are 0xFF. (addr)
08125BB8 = Fill 0x7C0 bytes. First 0x100 are 0xFF, next 0x80 are 0x3FF, next 0x3C0 are 0x200-0x3DF, last 0x280 are 0x3FF. (addr)
08125C0C = Called via pointer.
08125C5C = Unused?
08125C94 = Called via pointer. = Opening transition. Rotation & Scaling, Party Stats box Y pos. (Battle Camera position at start of battle. Third breakpoint.)
08125CFC = Called via pointer. = Opening transition. Just the black opening graphic animation.
08125D68 = Called via pointer. = Opening transition. I/O
08125D74 = Open Battle Transition Graphics / Initialize & Animate / ?
 08125F8E = Call to "Enemy appeared" function.
 081260A8 = Call to Doom Dragon Entrance animation
 0812619E = Call to "Enemy appeared" function.
08126218 = Start
0812628C = Start
 I/O, Palette and VRAM pointers.
081263C4 = Start
081263F0 = Start
081263FC = Battle background swap (used in a lot of summons, etc.); r1 = general table file ID, which should be a background, r2 = darkness/brightness (higher numbers make it darker, caps out at x3C), r0 = ???
 Palette and VRAM pointers.
08126548 = Start (background-related)
08126700 = Unused?
08126804 = Start r3=scaling of entire screen. (%)
08126904 = Start
08126944 = Unused? - Blending related - Likely a fading effect.
08126978 = Unused? - Blending related - Likely a fading effect. (Inverse of above.)
081269AC = Unused?
081269BC = Execute a RAM function: 0300021C; Unused?
081269CC = Unused?
081269EC = num>>4 (If neg then (num+F)>>4 ; Unused?
081269F8 = Unused?
 03001150; Bits: 0008 (used for the status menu in some way)
08126AE4 = Start (updates some turn-related data? called upon battle start, and in various battle flow functions)
08126B64 = Unused?
08126BA0 = Start
08126BCC = Called via pointer.
 08126CBE = General object shading/transparency; Defaults to x10, but lower values will make sprites darker and really high values will make them transparent
 Pointers: 08126E54
08126CFC = Start - (Called from Ability Type x1 ; x5,x9,xE ; , at least.) flash(in-battle pc list, COLEY (brightness))
 -pc brightness flash possibly for things like switching out front party for back party. ?
08126DFA = End


Something to do with Casting Animation
Called via pointer.
08126E00 = Start
Pointers: 0812980C, 08129828, 08129830
08127020 = End


Called via pointer.
08127038 = Start
-VRAM pointer: 06004000
08127060 = End


08127068 = Standard Casting Animation
 081271D6 = Ring graphic + Mercury Palette (other elements change the palette, but this is the base palette)
 08127210 = Venus Palette
 08127218 = Mars Palette
 0812721C = Jupiter Palette
08127288 = End


081272B0 = Start
-VRAM pointer: 06004000
08127300 = End


08127304 = Return ; Unused?


ePow Boost/Djinni Set Animation(?)
08127308 = Start
 r2=Animation ; 0=3 bubbles 1=no bubbles 2=Element boost? 3+=Djinn set
 r0, r1, r3 (???)
-VRAM pointer: 06004000
0812755A = End


Call 08126218(0,0)
0812756C = Start
08127576 = End


Call 08013438(2,0,0)
Unused?
08127578 = Start
08127584 = End


Get average level for all in-battle enemies. (I think) - "in-battle group" would be the argument
*Battle Arena only
08127588 = Start
Returns:
-1=Group contains no guaranteed enemies.
-2=Group contains an enemy not killed. (Flag 0x174 should be off.)
-3=Group contains no killed enemies (or enemies at all if flag 0x174) - Useful to skip empty groups.
-Pointers: 0812CE7C
08127644 = End
 
0812764C = *Battle Arena only
r7 = PCs in front count
r8 = PC Average Level + Level Mod (min/max 1-99)
r9 = 
r10 = wram (or iram) heap pointer (0x80 bytes)
r11 = 
sp,0x0 = PCs in front list

 Pointers: 08130C5C: Clear unneeded Enemy flags.
 r10=Allocate 0x80 space
 08127668 = r8=Average PC level of PCs in front.

0812767C = PC Average Level Loop
r5 = for (int i = PCs in front count; i!=0; i--)
r6 = Current PC slot sp
0812769C = + level modifier at flag 3F8 (read as byte) (From -1 and how many times you agree to fighting stronger monsters.) 
 081276B4 = Avg. level min/max capped 1-99.

Special Checks - GS2 only:
 081276D2 = Serpent check: if 65B, 65C, 65D, or 65E: set 65F.
 08127738 = Knight check: if 66B: set 66C.
 08127750 = Moapa check: if 668 or 669: set 66A.
 0812777E = Doom Dragon check: if 778: set 771 (cleared if otherwise)


 0812779C = Enemy Elimination Table code (All Djinn, T2+ Serpents, 2nd Poseidon, 1st/2nd Moapa, 1st Knight, 1st/3rd Agatio, 1st/3rd Karst, 2nd/3rd Dullahan, 2nd Azart, 2nd Satrage, 2nd Navampa, Mystery Man, Mystery Woman, Zombie, all Doom Dragon.)
 081277B4 = GS2 Only: Set 047 (Spritz), 0E6 (Unknown), 075 (Ether); likely intended to be Punch Ant, Giant Bat, and Wild Wolf enemy defeated flags


 081277DA = Replace slot (of 32) of lowest level value. (Empty slots have a level value of -1, so will be those if any.)
 08127818 = RNG - Pick random slot.


0812786C = *Battle Arena only (appears to be stat scaling)
 08127950 = Writes scaled Jupiter ePow to enemy RAM (There’s a bit of code that applies the calculation to each ePow; eRes isn’t here at all)
 0812797C = Writes scaled max HP to enemy RAM
 081279A4 = Writes scaled current HP to enemy RAM
 081279EC = Writes scaled level to enemy RAM
08127A0C = Hard mode? (I think) 


addenemy(charid)
This function might be used for adding enemies to battle.
08127ADC = Start
08127B9C = End


Removesubenemybit(charid)
(0203004C+x1C = A bit is removed when enemy dies. (Based off enemy groups and the enemy number following their names. Bits are only used when there are numbers. And possibly returning the suffix number?)
08127BA0 = Start
08127C2A = End


enemyname1(?)
Adds a "1" to the enemy name if the conditions are met.
08127C2C = Start
08127C7C = End


getrandomenemy(enemygroup) ; Return charid
08127C80 = Start
-Pointers: 0812CE7C
08127CCC = End


08127CD4 = Initialize Enemies?
 Pointers: 0812CE7C, 0812CE94
 08127E78 = Read “orientation” value from battle group table entry
 08127E2E = Grab sound effect on death? I thought this grabbed palette
 08128066 = Check Poseidon (enemy slots 93-95) - Initializes immunity value
081280A0 = Includes 08130D0C - Enemy Properties Table ; Return Byte 3: Bits: E0
081280BC = Includes 08130D0C - Enemy Properties Table ; Return Halfword 0 (sprite ID)
081280D8 = Includes 08130D0C - Enemy Properties Table ; Return Byte 3: Bits: 0E (palette)
081280FC = Includes 08130D0C - Enemy Properties Table ; Return Byte 2: Bits: 01 (small enemy flag)
08128124 = Includes 08130D0C - Enemy Properties Table ; Return Byte 2: Bits: 10
0812814C = Includes 08130D0C - Enemy Properties Table ; Return Byte 2: Bits: E0
08128174 = Includes 08130D0C - Enemy Properties Table ; Return Byte 3: Bits: 01  (attack sound)
08128194 = Includes 08130D0C - Enemy Properties Table ; Return Byte 4


Returns item ID with its important and rare flags. 
Returns Important*0x400 + Rare*0x200 + Item ID
081281B0 = return_item_value(item_ID) - Start
081281E8 = End


Resets some data to 0 on battle loading...
Sets 0 to 0203059C - 020305AF ; and sets 0000 to 0200049C.
0203059C = Coin reward
020305A0 = EXP reward
020305A4 = Killed enemy count; doubles as Item Drop Count
020305A8 = Item reward/item drop 1
020305AA = Item reward/item drop 2 (can’t get multiples of the same item)
020305AC = Item reward/item drop 3 (can’t get multiples of the same item)
020305AE = Item reward/item drop 4 (can’t get multiples of the same item)
020305B0 = Killed Enemy ID 2 (???) - updates with 4th, 6th kills
020305B2 = Killed Enemy ID 1 (???) - updates with 3rd, 5th kills
020305B4 = Killed Enemy Slot #2 Killed (???) - updates with 4th, 6th kills
020305B5 = Killed Enemy Slot #1 Killed (???) - updates with 3rd, 5th kills
020305B6 = ?
020305B7 = ?




081281EC = Start
08128220 = End


Get Enemy Number from name
Gets the first number from 1-9 in the name, and returns 0-8 respectively; if none are found, 9 is returned.
Only used in Enemy Killing function. (Below)
08128228 = Start
0812824A = End


0812824C = kill_unit_routine
 08128270 = PC ID check (branches to end if dead unit is a PC)
 08128282 = Living/Dead enemy check (branches to end if enemy remains alive after taking damage [if value != 0, enemy is still alive])
 0812828c - 08128320 = unknown? (killed with elemental weakness djinni routine?)
 08128322 = Set killed enemy's flag.
 0812834c = update earned coins (if elemental weakness djinni used to kill? prng called extra time here?)
  -For every 10 levels including 0 : bonusCoins += rng(1 to 6)
 -bonusCoins = max(bonusCoins, coins * 30%)
 081283a0 = exp to add stored in RAM (if PC did not participate in battle?)
  -For every 10 levels including 0 : bonusExp += rng(1 to 4)
 -bonusExp = max(bonusExp, exp * 30%)
 081283ee = update earned coins (if anything but e.w. djinni used to kill?)
 081283fa = exp to add stored in RAM (if PC participated in battle?)
 08128406 = Item drop routine


081284C0 - 0812878A = End of battle rewards (the text + level up routines/calls [where applicable])
 081284EA = “You got [x] experience point(s). [?]”
 081284FE = Call 0811A188 = (List living PCs in front (Arg=1), or enemies (Arg=2)?)
 08128508 = Call 0811A24C (List living PCs (Arg=1), or enemies (Arg=2))
 08128554 = New exp total stored to RAM (if did not participate in battle)
 08128566 = New exp total stored to RAM (if participated in battle)
 08128598 = “[Name] is now a level [#] [class]!”
 08128610 = “Mastered the [class]’s [spell name]!”
 08128630 = “Maximum HP rises by [x]!”
 0812864A = “Maximum PP rises by [x]!”
 08128664 = “Attack rises by [x]!”
 0812867E = “Defense rises by [x]!”
 08128698 = “Agility rises by [x]!”
 081286B2 = “Luck rises by [x]!”
 081286CE = Call 080AFB80 (level up check & level up(pc,sp) Return 0 if didn’t level up, otherwise sp.)
 08128700 = “You got [x] coin(s).”
 08128712 = LDR: #0200049C
 08128756 = “You got [item].”




[18][1] attacks!
0811C9EE
081243F4 = In my tests: Called with all PCs and Enemies.




0811D9CC - 0811DDBE = Ability Type Values (Animation Chain)
0812381C - 081247F8 = "Attack" function. (More research needed.)


...
081280FC = Grab “Small Enemy” flag from Actor/Enemy Properties Table
08128124 = Grab Attack Animation (0-F) from Actor/Enemy Properties Table
...










Text functions:  08120360 ; 080381C8
---
Data banks! (Listed every pointer found in code. The ones not found in code should have a "?" directly beside the address.)


081287C4? = Unknown?
081287C8 = Unknown (From 08118D28)
081287D4 = Isaac’s weapon sprites (From 0811A700)
081287E2 = Garet’s weapon sprites
081287F0 = Ivan’s weapon sprites
081287FE = Mia’s weapon sprites
0812880C = Jenna’s weapon sprites
0812881A = Felix’s weapon sprites
08128828 = Sheba’s weapon sprites
08128836 = Piers’s weapon sprites
08128844 = PC Slot Coordinates. (I think the coord grid is the ground.) (From 0811B17C, 0811B4A8)
08128858 = Enemy Slot Coordinates (unused?; the game probably does them differently now)
08128868 = ?
08128898 = Multi-target ailment chances for success (Tested with Sleep Bomb / Sleep) (Used in Damage Formula.) (0812889E = "0000" (Unused))
081288A0 = Psy Damage (Diminishing rate; 100/50/30/10/10/10)
081288B8 = Healing (Diminishing rate; 100/80/60/40/20/10)
081288D0 = Index -1 (Diminishing rate; 100/50/30/10/10/10)
081288E8 = Base Damage  (Standard diminishing rate; 100/80/60/40/20/10))
08128900 = Summon (Diminishing rate; 100/70/40/30/20/10)
08128918 = Base Damage (Diminishing ID; 100/50/30/10/10/10)
08128930 = Psynergy Recovery (Diminishing rate; 100/80/60/40/20/10)
08128948 = Effect Only (Diminishing rate; 100/50/30/10/10/10)
08128960 = Enemy xDA's "expanded moveset" enemy entries. (See Enemy AI)
0812896C = Multi-target ailment chances for success (Start a Turn function.)
08128972 = Ability Type/Sequence/Modifier Values (http://forum.goldensunhacking.net/index.php?topic=1416.0)
08128C50 = Ability Animation reference table; Selects an ability’s animation, as well as the arg/argument
081297C4 = ? (From 08125110)
081297CC? = ?
081297DC? = ? (x30 bytes)
0812980C = Unknown (Affects 3 bubbles casting animation?)
08129828 = Affects 3 bubbles casting animation. ; The particles
08129830 = Affects 3 bubbles casting animation. ; The bubbles
08129840? = ?
08129864? = ?
0812996C = Red spinning crystal graphic.
08129D6C = Upside-down red spinning crystal graphic (Unused)
0812A16C = ? (From 081184CC, 08118734)
0812A174 = Party Set-ups (Large list, debug data; x18 bytes an entry; x0=character; x1=level; x2=Djinn by element, x6=item; x12=ability); See old man In Link Lobby. Debug mode: 03001238:01, B+Start, 312:0, Hold L through walls, go south.
0812A176 = 
0812CACC = NPC Address script (used in #0811A720) = "00000011"
0812CAD0 = Item/Battle sprite reference
0812CBB0 = ?
0812CBD8 = 
0812CC00 = 
0812CC28 = ?
0812CC5C = Enemy Attack Pattern 1: Ability Chance Rates (8 bytes)
0812CC64 = Enemy Attack Pattern 2: Ability Chance Rates (8 bytes)
0812CC6C = Enemy Attack Pattern 3: Ability Chance Rates (8 bytes)
0812CC74 = ? (From 08125C8C)
0812CD74 = Opening Battle Transition Graphics (From 08125E80)
0812CE54 = Flashing selection. Each number effects each of the frame shades.
0812CE7C = Enemy group data (x18 bytes per entry) (From index 0) / [not actually enemy encounter data; search tag)
  SHORT x 5 - enemy IDs
  BYTE x 5 - minimum quantity of enemy
  BYTE x 5 - maximum quantity of enemy
  BYTE x 4 - ???
0812CE94 = Enemy group data (From index 1)
08130C5C = List of enemy flags to be cleared. (Battle Arena)


08130D0C = Enemy Properties Table/Actor Properties Table (8 bytes/entry)
 0259 Sprite value
 A8   Attack type - from x00 to x15, PCs have to be in the NPC class to use these attack types (attacks include Star Magician's magic attacks, punches, jabs, uppercuts, claw attacks, and other standard slashes and swings); attacks are coded in red, PC attacks are coded elsewhere (unless NPC class); add x20 for certain attack types to add hopping, multiply the x20 to increase jump height (x80 is standard attack jump height); the very last bit is checked for sprite size (I think)
 00   Sound effect on defeat + palette swap (have to look into exactly how it works); right-most bit toggles attack sound (lighter sound if 0, heavier sound if 1)
 00   Cast/impact height
 00   
 00 
 00


= Free space


Temp
0x0811A834 - Party Member battle sprite code pointers
0x08120A58 - Damage Type Functions
0x08120FB4 - Summon multiplier code
0x08128C50 - Ability Animation reference table
0x0812CAD0 - Item/Battle sprite reference


-----


08138000 = Ability Animations?
See this document for (most) addresses
https://docs.google.com/spreadsheets/d/1nEi1wfERx9OfIp4x5fMso83Ha14mPJqjrxRYZxXvs_Q/edit#gid=0


08138000 = 08196404 = (?,?,?,?,?)
08138008 = 0815E320 = Physical attack animations? And/or special/complex animations? - Argument 4 Assignment (base ID starting from #100 with two exceptions, and loaded from sp, #x7C throughout function)
08138010 = 0814C994 = Summon animation - Uses the base animation ID and assigns a summon animation depending, starting with Ramses as #1 (i.e. summon 12 = Thor, 13 = Zagan)
08138018 = 0814CB60 = Ability/spell animations?
08138020 = 0813E3D0 = ePower boost animation
08138028 = 0813EB70 = Doom Dragon Entrance Animation
08138030 = 0813F518 = Djinni Set Animation(?)
08138038 = 0813FA88 = 
08138040 = 0813FD40 = 
08138048 = 081963EC = (r0,r1)Stores GFX flip, rotation, and layering flags?
08138050 = 08142944 = Doom Dragon Transformation (automatically clears enemy side and replaces with Doom Dragon, but still seems to give old enemies turns?)




0813BA50 = 


0813E3D0 - ePower boost animation
0813EB70 - Doom Dragon Entrance Animation
0813F518 - Djinni Set Animation(?)


08142944 - Doom Dragon Transformation (automatically clears enemy side and replaces with Doom Dragon, but still seems to give old enemies turns?)
 08142B7E = Call to actual transformation. (but you still need to change group id in main battle function to fully change it properly.)
08143000 =
08143114 = 
08143174 =
08143264 =
08143354 =
081433B4 =
08143424 =
08143460 =
08143488 =
081434D8 =
081434F8 =
0814355C =
081435E0 = Animation Initialization (likely)
08143840 =
08143A88 = Animation Initialization (likely)
08143B20 =
08143BB8 =
08143D04 = 








0814C994 - Summon animation - Uses the base animation ID and assigns a summon animation depending, starting with Ramses as #1 (i.e. summon 12 = Thor, 13 = Zagan)


0814CB60 = execute_animation (frees up space for use, and then executes an animation based on what the current ability is meant to do)
 0814CBC8 = Animation Table (08197AA0)


0814CD48 = 
0814CE20 = 


08157CF4 = Stores an MFT file’s pixel data to RAM (used in battle animations)
- r0 = MFT file (GFX)
- r1 = RAM address to store pixel data to
- r2 = “Contains Palette” flag: [00 = does not have an attached palette; 01 = does have one] 
- r3 = “Uses Palette” flag: [00 = use previously defined palette, 01 = use/store own palette]


08158CE0 - Camera shake? (r0 = horizontal, r1 = vertical)


0815E320 - Argument 4 Assignment (base ID starting from #100 with two exceptions, and loaded from sp, #x7C throughout function)
…
- 0815E374 - Star Magician Attack (used with animations 10 or 210, apparently)
- 0815E384 - Critical Hit (if animation 200+) or standard attack (if under 200)


0815E3AC - Standard Attack animation


0815F0A0 - Palette blend(?) - Used in Purgatory animation family


0815F16C - Called from 0815E320
…
- 0815F2EA - Animation + 38; Terra Strike, uses general table file 391
- 0815F2F4 - Animation + 44; Aqua Sock, uses general table file 304
- 0815F2FE - Animation + 60; Cyclone Smash, uses general table file 402
- 0815F308 - Animation + 46; Frost Bite, uses general table file 382
- 0815F312 - Animation + 50; Broil, uses general table file 376
- 0815F31C - Animation + 90; Armor Crush, uses general table file 218
- 0815F32A - Animation + 91; Stun Jip, uses general table file 193
- 0815F338 - Animation + 84; Supernova, uses general table files 402 and 392
- 0815F3B6 - Animations + <40 (I think, with some exceptions later); use general table file 277
- 0815F3C2 - Animations + 71, 82; Sargasso and Reverse Star, uses general table file 180
- 0815F3D4 - Animations + <98 (I think); use general table files 394 and 318
- 0815F3EE - Animation + 80; Flash Force; uses general table file 314
- 0815F458 - Animation + 79; Hammersphere
- 0815F4DA - Animation + 94; Mother Earth, uses general table files 333 and 230
- 0815F4F2 - Animation + 73; Vein Tap, unknown
- 0815F504 - Animation + 70; Ice Crush, uses general table file 403
- 0815F59C - Animation + 66; Power Drive, uses general table file 297 (also skips 353)
- 0815F5B0 - Animations + 41 and 62; animation restriction, won’t use general table file 353 (explosion)
- 0815F5D8 - Palette blending table 1; with 101 pointers; corresponds to animations 100-200, and is related to the unleash argument (x04); seems to relate to elemental designation of initial “attack” portion of animation that is tacked on at the beginning of virtually all of these animations
#0815F76C; Venus (gold/yellow)
#0815F79C; Mercury (blue/cyan)
#0815F7AC; Mars (red)
#0815F7BC; Jupiter (purple)
#0815F7D6; Non-elemental (gray)
#0815F7FE; None - animation’s default palette, unless not defined(becomes greenish-yellow?); actually goes to next animation thing
- 0815F800 - something (?) for; (+) 81, 83, 91, 92, 93 - All seem to be blast-on-contact animations
- 0815F82E - Animation + 42(1); Bad Omen
- 0815F9DE - Animations >37 go to 0815FA08
- 0815F9EE - Animation + 65; Burst-like unleash
- 0815FACC - Animation + 41(1); Death Scythe (scaling)
- 0815FB0A - Animation + 85(1); Sarcophagus (scaling)
- 0815FB36 - Animation + 88(1); Apocalypse (scaling)
- 0815FB7E - Animation + 62(1); Asura (scaling)
- 0815FB82 - Animation + 86(1); Raiden’s Wrath (scaling)
- 0815FBC4 - Animation + 38(??); Terra Strike (scaling?)
- 0815FC2C - Animation + 61(1); Psyphon Seal (scaling)
- 0815FC66 - something (?) for; (+) 45, 47, 54, 56
- 0815FCBA - Animation + 45; Blizzard-like unleash
- 0815FCC2 - Animation + 54; Demon Fire-like unleash
- 0815FCD8 - Animation + 56; Slash-like unleash
- 0815FD62 - Animation + 79; Hammersphere
- 0815FE00 - Animation + 44(??); (Aqua Sock (contact/knockback particles?)
- 0815FE28 - Animation + 61(2); Psyphon Seal (graphic stuff)
- 0815FEB4 - Animation + 41(2); Death Scythe (graphic stuff)
- 0815FEE2 - Animation + 86(2); Raiden’s Wrath (graphic stuff)
- 0815FEFE - Animation + 88(2); Apocalypse (graphic stuff)
- 0815FF3A - Animation + 62(2); Asura (graphic stuff)
- 0815FF7E - Animation + 85(2); Sarcophagus (graphic stuff)
- 0815FFAA - something (?) NOT for; (+) 7, 43, 48, 73, 77, 78, 41, 62, 49, 12, 83, 84, 85, 86, 88
- 08160004 - Animation + 66; Power Drive
- 08160062 - Animation + 42(2); Bad Omen (graphic stuff)
- 081600BA - something (?) for; (+) 74, 75, 16, 97; 10
- 0816011E - Animation + 55; Acid Bath
- 081601A6 - something (?) for; (+) ??, 42, 15, 52, 72, 59, 58, 69, 89
- 081601DC - something (?) for; (+)...
...
- 0816037C - Palette blending table 2; similar to previous, except that it blends to this colour rather than from, and there more options - seems to be based on the palette of the corresponding [general table file]
#08160508; gray? [261]
#08160510; red (moderate yellow) [297]
#08160518; blue gray (light/white blue) [185]
#08160520; yellow/gold (no shine) [277]
#08160528; blue/cyan [304]
#08160530; purple [314]
#08160538; brown/cream (really light yellow) [391]
#08160540; red (white shine) [336]
#08160548; purple/pink [383]
#08160550; blue/cyan [381]
#08160558; yellow (white shine) [388]
#08160560; white (pure white) [359]
#08160568; turquoise [358]
#08160570; orange [376]
#08160578; lime [355]
#08160580; red pixel (not uniform blend) [318]
#08160588; red (high yellow) [328]
#08160590; red (low yellow) [327]
#08160598; violet [361]
#0816059E; [no blend]
…
- 08160E98 - Animation + 44; Aqua Sock
…
- 08160FD8 - Animation + 61; Psyphon Seal
…
- 08161D9E - Animation + 46; Frost Bite
…
- 081622CA - Animation + 94; Mother Earth
…
- 081635C4 - Animation + 37; ???
…
- 081636E2 - Animations…; something including Aqua Sock
…
081638B8 - End


0817D174 = Animation 08197D44 (Star Mine)
 0817D2BC = Animation Main Loop (0x90 frames)
 0817D2C0 = r10=[03000030]
 0817D2C8 = On Frame 0, graphic creation code (6 stars, and disables rest.) (Not sure what is at 02010018?)
 0817D378 = ?
 0817D41A = Stars go left individually after frames reach: 10 + (starInd * 8)
 0817D696 = Deallocation/cleanup


0x08197AA0 - Ability Animation table
081982F7 = Quake series - Animation durations based on tier?




081A0000 Credits


081A6000 = Title Mechanics


Public
081A6000 = 
081A6008 = 
081A6010 = 
081A6018 = 
081A6020 = 
081A6028 = 


Private
081A6030 = 
081A6094 = Advance frame(s) and roll RNG(frames (=1)) Exits if a button is pressed.
081A60C0 = 
081A6154 = 
081A6638 = 
081A6724 = 
081A68B4 = 
081A6AB4 = 
081A6B50 = 
081A6EA0 = 
081A71C8 = 
081A729C = 
081A7514 = Return
081A7518 = 
081A76F8 = 
081A786C = Return
081A7870 = 
081A78C0 = 
081A7A28 = 
081A814C = 
081A81C0 = 
081A81D4 = 
081A81F4 = 
081A8214 = 
081A8228 = 
081A8264 = 
081A8278 = 


Data
081A8288 = 


081AC000 = Lucky Dice (238:9/19)
 081AC012 = Song
 081AC1E8 = Read MTF ID for Lucky Dice table (file 132, width 240)
 081AC232 = Read MTF ID for Lucky Dice dice (file 134, width 32)
081B2000 = Lucky Wheels (238:10/20)
081B8000 = Super Lucky Dice (238:8/18)




081C0000 = Audio (See http://www.romhacking.net/documents/%5b462%5dsappy.txt)
081C0000 = 
081C0008 = 
081C0010 = 081C0CB0 = Play song (song)
081C0018 = 
081C0020 = 
081C0028 = 
081C0030 = 
081C0038 = 
081C0040 = 
081C0048 = 
081C0050 = 
081C0058 = 
081C0060 = 
081C0068 = 
081C0070 = 
081C0078 = 
081C0080 = 
081C0088 = 
081C0090 = Change Position in Music Menu (used in Link Battle map)
081C0098 = 
081C00A0 = 
081C00A8 = 

Public functions (pointed to from above list) will be indicated via an asterisk (*)


081C09DE = 


081C0CB0 = * Play song (song)
 0 = Music
 80 = Jingle (Pauses music to play Jingle.)
 100 = SE (Plays sound over music.)
 081C0CD2 = If song=0x4E (fade song)
 081C0CF4 = If song=0x186 (390)
 081C0D0E = If song=0x18B (395)
 081C0D24 = Check if song is a Sound Effect: (100-699)
  081C0D24 = If song>=0x2BC (700)
  081C0D2C = If song<=0x63 (99)
 If song is using Track Group 7, it may use 6, 5, or 4. Whichever is not in use first. If all are in use, will use 7.
 081C0D6E = Check if song is a Jingle: (80-99)
  081C0D6E = If song<=0x4F


 081C0D92 = If song=0x4F, exit function.
 Normal songs (Music) follow.


081C0FD0 = 
081C0FDC = 
081C1000 = 
081C1008 = swi $1B
081C100C = swi $23
081C1010 = Return
081C1014 = * Invisible music menu (Much like the GUI one, but with some differences.)
081C1158 = 


081C128C


081C16EC = B1/B6/B7/B8/C6/C7/C9/CA/CB Stop


081C1734 = 
081C1736 = 
081C1750 = Get byte from song data (Branch to address check above)
081C175C = B2 [address] Jump
081C177C = B3 [address] Jump - Saves return address.
081C1798 = B4 Return to last B3 command.
081C17AC = B5 [count?] [address] Jump
081C17DC = BA [?]
081C17E8 = BB [tempo]
081C17FC = BC [pitch offset]
081C1810 = BD [instrument]
081C1840 = BE [volume]
081C1854 = BF [panning]
081C1868 = C0 
081C187C = C1 
081C1890 = C3
081C189C = C5
081C18B4 = C8
081C18C8 = CC
081C18E0 = 
081C192C = 


081C1B94 = 
081C1BD8 = 
081C1C08 = 
081C1E08 = 
081C1E48 = 
081C1E64 = 
081C1E70 = C2
081C1E84 = C4
081C1E98 = 
081C1EFC = Return
081C1F00 = 
081C1F1C = 
081C1F3C = 
081C1FB4 = * Calls 081C128C
081C1FC0 = playSong(song) - Used by Music/Jingles, but not SE due to a condition where a different Track Group can be used.
 - Has pointers to Track Groups / Songs lists.
081C1FEC = ?(song)
081C2038 = ?(song)
081C208C = ?(song)
081C20C0 = ?(song)
081C20F4 = ?()
081C2120 = ?(?) Calls 081C1F00
081C212C = ?() Iterates through the track groups, calling 081C1F00
081C2158 = 
081C2168 = 
081C2180 = 
081C21B0 = 
081C21F8 = 
081C2310 = swi 0x2A
081C2314 = 
081C2328 = 
081C233C = 
081C2434 = 
081C24D8 = 
081C2570 = 
081C25C4 = 
081C2640 = 
081C267C = 
081C26F4 = playSong(track data ref eg:02006A10, song data ref eg:082BA798)
081C27D8 = 
081C2818 = 
081C28E0 = 
081C2994 = 
081C2A3C = 
081C2A8C = 
081C2AF4 = 
081C2F40 = 
081C2F68 = ? - Used by Jingles.
081C2FD0 = 
081C3044 = 
081C30AC = 
081C30CC = 
081C3140 = 
081C31B4 = 
081C330C = 
081C332C = 00/03
081C3340 = 01
081C3388 = 02
081C339C = 04
081C33B0 = 05
081C33C4 = 06
081C33D8 = 07
081C33EC = 08
081C33F8 = 09
081C3404 = 0A
081C3418 = 0B
081C342C = Return


081C44D0 = Track Groups (8 entries , not sure if they are for different types of music. e.g. SFX vs. BG music…. since it seems more like RAM definitions than anything.)
 02006A10 = 
 02006BA0 = 
 00000004 = Maximum # of tracks for this group.


 02006A10 02006BA0 00000004 = Jingles
 02006A90 02006CE0 0000000A = BG Music
 02006AD0 02007000 00000002 = Sound Effects 1 (Menus? / Basic sounds.)
 02006B60 020070A0 00000002 = Sound Effects 2 (Weather? - Includes rainfall, at least.)
 02006B10 02007140 00000002 = Sound Effects 3 (Speech sounds - Only used by sound effects 256-287)
 02006990 020071E0 00000002 = Sound Effects 4
 020069D0 02007280 00000002 = Sound Effects 5 (Unused? - TODO: Check GS1/Golf/Tennis)
 02006A50 02007320 00000002 = Sound Effects 6 (Includes battle cries and ???. - If there was a miscellaneous, I'd expect it to be this one)




081C4530 = Songs
 082BA798 = 
 0001 = Track Group #
 0001 = Track Group # (Not sure if used?)


The World Map Theme before Jupiter Lighthouse has no instrument set for a drum line… to enable it, do:
082C8BDE - Change to BE 7F




08300000 = Sprite Table/Data
BYTE - Sprite width
BYTE - Sprite height
SHORT - Image scale.  A value of 0x0100 is 100%, 0x0200 is 200%, and 0x0080 is 50% (In hex 0x080 is half of 0x100).
BYTE - Number of directions the sprites have (Party members have 5, NPCs have 3, battle sprites have 2, e.t.c.  Sometimes this value is different to represent that some of the directions are mirrored compared to how they usually are)
BYTE - Number of animations
BYTE - X offset
BYTE - Y offset
BYTE - Unknown
BYTE - Collision Radius
BYTE - Compression format
BYTE - Unused (Version 0.4+ of the editor uses this space to store the number of sprites)
WORD - Pointer to a collection of pointers to the graphical sprite data
WORD - Pointer to a collection of pointers to the animation data




08680000 = Master File Table


HEX;DEC;
000;000;08000000 = ROM
001;001;08680000 = Master File Table
002;002;08682000 = Build Date?
003;003;08020000 = 
004;004;08038000 =
005;005;080AD000 = Party Mechanics
006;006;080C8000 =
007;007;080F8000 =
008;008;08108000 =
009;009;08118000 = Battle Mechanics
00A;010;081A0000 =
00B;011;081A6000 =
00C;012;08138000 = Ability Animations
00D;013;081AC000 =
00E;014;081B2000 =
00F;015;081B8000 =
010;016;081C0000 = Audio Mechanics
011;017;081C0000 = Audio Mechanics
012;018;08300000 = Master Sprite Data
013;019;08682010 = Font (Uncompressed graphics)
014;020;08684010 =
015;021; = Numbers 0-9 (16 colours) - Unused? Doesn’t seem present in GS1
016;022; = Title Screen (Picture of lighthouse)
017;023; = GS1 Title Screen Background (palette seems near identical but slightly off)
018;024; 
019;025; = GS2 Title Screen Background (palette seems to match perfectly)


;032; = Nintendo screen.


;034; = Golden Sun screen.
;035; = Small World Map Image
;036; = Large World Map Image
;037; = “To be Continued” screen text (from GS1)
;038; = 
;039-128?; = Battle Background


;132-133 = Mini-Game Backgrounds


;~410-445 = World Map stuff? (Tilesets, palette, map data…)




1D6;470;0895BB58 = Character Portraits
1D7;471;0896428C = Menu Icons
472-504 = Some of these might be utility graphics
505-514 = Various arrow/cursor-like graphics - C-2
510 = Green up arrow - (Push up to see first four PCs)
511 = Green down arrow - (Push down to see next four PCs)
512 = Stat up
513 = Stat down
514 = Pen
;515-619;0896B4F0 = Sprite Packs/Enemy Sprites - Starting with 526 Blue Dragon, and ending with 641 Bandit/Thief - Only including any enemy sprites using format 2, including some double-wide ones (Dullahan, Doom Dragon, Poseidon, young Isaac, and young Garet are excluded).
;620-1608 = Map data, Palettes, and tilesets. (?, C-0/C-1, C-2)
;1609-1722 = C-0 Map Code
;1723-2047 = Empty Slots


(Bootleg stuff???)
Stuff some ROMs may have that others may not:
08F79650 = MEGAROMS Screen 1
08F8C254 = MEGAROMS Screen 2
08F9EE50 = MEGAROMS ARM code (Press L+R on boot)
08F9EFE8 = Free
Note: The value at 08000468 will be 08F9EE50 instead of the original 0801319D.


RAM Map
02000000-02002FEF is saved to Save Game.
02000000 = Used in saving.
 02000000 = Name
 0200000C - Level
 02000010 = Frame Counter/Time Played 
 02000014 = Coins
 02000018 = Djinn amounts
 0200001C = PC order (First 4 PCs.)
 02000026 = from build date, (0x1000 | 1024*year + 64*month + day).  0x8000 set if debug mode enabled
 0200002C-0200002D = 16 bit Checksum of 02000040-02000F60. (?) - Notice it does not include the last bit of Piers data. If this had been GS1, everything would be moved up 0x20, and it would, though.)
 02000030-F = Unused?
Flags (0x02000040)
02000040 = Storybook Flag List
 000 - 1FF = General Data that includes practically everything you could use anywhere in the game. Character/Djinn flags, and what not.
 000 - 007 = Player Characters
 010 - 01C = Summons (Only the tablet ones from Zagan to Iris.)
 020 = GS1:  If on: Field: Young Isaac / Young Garet
 021 = GS1:  If on: Field: Young Isaac wears cloak; Adult Isaac is transparent. (Battles require wearing the Machete.)
 022 = Toggles overworld music. 0 for default, 1 for joined party music. Also disables your ability to transfer data from GS1.
 02C = GBA Link
 02D = Password
 02E = Hard mode
 02F = Updated
 030 - = Djinn - At least one djinni is required to use the Battle Arena. (Doesn't have to be Echo.)
 080-0DF = Cleared when switching rooms. ; Djinn encountered. (They don’t show up on map when you haven’t obtained them.)
 (100-15F = Unknowns?)
 100 = 
 101 = 
 102 = 
 103 = 07F - Not sure why 07F is here, but set at start of battle.
 104 = 
 105 = 
 106 = 
 107 = Disables menus (A/Select, and Start button (A.k.a. Pause menu) screens. You can still access the debug menus, though. Also  disables Psynergy shortcuts.
 108 = 
 109 = Set when a map is being returned to without a reload, e.g. when exiting a battle and returning to the previous position. Applies tiles based on 0200294C list. Used with maps that have cyclone bushes. If flag is off during loading a map (not set in map code init), then  no tiles get applied/number of entries set to 0.
 10A = 
 10B = 
 10C = 
 10D = 
 10E = 
 10F = You have a forgeable item when talking to the Forge NPC. (Items IDs hard-coded in map code.)
 110-113 = Elemental Regeneration: Adds 4 PP in battle at the end of a round. Venus, Mercury, Mars, Jupiter, respectively. ; Cleared when you switch areas.
 11A = 
 11B = Music never changes when you switch rooms.
 11C = "This places doesn't seem to appear on the map." (Map specific)
 11D = ?
 11E = "This places doesn't seem to appear on the map." (Is this position-specific/auto-updates?)
 11F = (Unknown, but gets refreshed while transitioning rooms.)
 120-12F = Room transition
 120 = Up stairs animation after going through a door.
 121 = Down stairs animation after going through a door.
 122 = Fall from ceiling animation after going through a door.
 123 = Set if current room is town. Related to the Retreat ability, but not what disables Retreat. (Cleared on room change, but set if byte x3 is 2 for a room entry at 080F17A8. "02" disables Retreat.)
 124 = 
 125 = 
 126 = 
 127 = 
 128 = 
 129 = 
 12A = 
 12B = 
 12C = 
 12D = 
 12E = 
 12F = Show Area’s name on room entry. ; Seems to be set directly after Area flags are cleared. (x300-3FF); but is soon after unset. (Not sure when, yet.) ASM: 080C9C92
 13E = Sanctum Warped (From Start+L on file load)
 13F = Sanctum Warped (From corrupt file. (Just second portion corrupt?) When [02000244]!=[02001000] (frame counters))
 140-14F = Psynergy Use
 140 = Utility flag: 0=Not Interaction/Not-interaction; 1=Interaction/Non-interaction
 141 = Utility flag: 0=Non-interaction; 1=Interaction
 142 = 
 143 = 
 144 = Disables Retreat.
 145 = 
 146 = 
 147 = Ship Hover?
 148-14F = When a flag is on, forces screen to a specific shade of color when Psynergy is used.
 150 = Disable item menu? Always seems to turn itself on when opening a menu though, so flag is not static
 151 = 
 152 = Prevents palette blending when using a utility
 153 = 
 154 = 
 155 = 
...
 15E = GS1: If Debug mode enabled, will play sound effect 0x87 when 03001810 table is low on FFs.
 15F = Disable random battles. (May make it so that when function 080C9FD8 is called, it starts a battle without the counter check. Not sure if game ever uses it this way?)
 160 = Disable random battles. (Manual reset?)
 161 = Disable random battles. (Room-based reset)
 (160 - 17F = There are some debug mode flags in here, not sure what all is here yet.)
 160 = Disable random battles. (Does not require debug mode to be enabled.)
 161
 (162/3? - 17F = There are some debug mode flags in here, not sure what all is here yet.)
 163 = *Requires Debug mode, I think* Disables battle encounters, warps, etc. (You cannot climb up vines, move pillars, etc.) You get free-movement clear_fon the world map (Navigating over mountains and oceans.)
 166 = 
 167 = Boosts Encounters? (Set if one of the party members has an item that boosts encounters.)
 168 = 
 169 = (Battle related) Turns on for first battle / not sure if ever turns off?
 16A = Early Build Battle Test Flag - Leads to game crashes if enabled
 16B = Alternate Camera Physics (both in battle and out)
 16C = Link Arena Flag - Sets battle theme x4F and is cleared when switching rooms. (0=Battles can have up to 6 enemies? ; 1=Up to 3 enemies?)
 16D = *Requires Debug mode, I think* In battle, during the attack sequence, you can press R to destroy all the enemies. Do this with Select pressed and it'll destroy your party.
 16E = On battle encounter do djinni tutorial; also end fight without rewards sequence.
 16F = 
 170 = 
 171 = 
 172 = A line appears between Piers and the other three on the Status screen. (Battle Arena Multiplayer related?)
 173 = Battle Arena (For stepping in the circle & clearing enemy flags for enemies that don't appear in the arena)
 174 = Should be battle related. (Enemy Groups related: 0= Returns NEG 2 if any enemy in battle was never defeated; 1=Get average levels for all enemies in battle.)
 175 = Alternate music during the Echo djinn tutorial. (Set when you hold UP after leaving Daila.)
 176 = On ship during World Map. (Flag used in music table.)- Sets/clears on room change. (Note: 020004B6 is read.)
 17C = "Cannot save here" when trying to save.
 17D = "This is no place for that!" when trying to save. (Only if flag 17C is off.)
 17E = Link Lobby Flag - "The Pause Menu is not available now." / Can’t use Psynergy. (Cleared when switching rooms.)
 17F = GS1: Isaac can run faster. (Hold B.) - Requires Debug Mode ; GS2: Your ship moves faster at Sea of Time.
 180 - 1FF = Area/Entrance flags (Flags are set when you visit the entrance room of an area.) I'm guessing there are unused flags mixed up in this bunch. This is used for the World Map Screen. (R button on World Map.) Bank: 080F1140
 200 - 2FF = Room-based flag bank. These are reset back to 0 when you switch between rooms.
 300 - 3FF = Area-based flag bank. These are reset back to 0 when you switch between areas.
 400 - 41F = Shop flags. Each flag is for each shop, and they are set when you visit them the first time. The order of these flags match the Shop list in the editor.
 420 - 5FF = Probably unused?
 600 - 782? = Enemy flags. These are set on first-kill of an enemy. Each enemy has a flag. (?) I will need to look into this...
 783? - 7FF = Probably unused?




 800 - ??? = Story flags. (Cutscenes/etc.) Not sure where this ends, but I know the A80 section has story flags for Anemos Inner Sanctum.
800-81B = Isaac and co.'s djinn. (Starting at the beginning of the game. ; These are populated when you get to the screen that you name Isaac on.)
81C-81F = Unused? 81E = used
820-825 = The Six Event Flags transferred from GS1.
  825 = Vault Thieves
826 = ? (checked during the Cyclone Chip cutscene in Madra)
827-83F = Unused?
840 = 35 – DEKAN01: Dehkan Plateau (Statue moved for shortcut.)
841 = 36 – DEKAN02: Dehkan Plateau (Statue moved for shortcut.)
842 = 21 – KANDO_O: Kandorean Temple (Bush blocking doorway.)
843 = Daila: Talked to northwest NPC
844 = Idejima: Check yourself for injuries cutscene played.
845 = 
846 = 
847 = Daila: Talked to Sanctum Healer
848 = 22 – KANDO_E: Kandorean Temple (Entrance cutscene.)
849 = 22 – KANDO_E: Kandorean Temple (Lash Pebble cutscene (before))
Note: Allows you to leave through entrance door.
84A = 22 – KANDO_E: Kandorean Temple (Lash Pebble cutscene (after)) (Lash Pebble retrieved/so does not show up on msp.)
84B = Daila: Alex cutscene played. (Douse Puddles map. Must not have played Madra’s entrance cutscene; must not have Piers.)
84C = 25 – KAIJIN03: Shrine of the Sea God (Statue moved for shortcut.)
84D = 
84E = 
84F = 
850 = 82- AYERES01: Air's Rock: Whirlwind Scene (For treasure)
851 = 82- AYERES01: Air's Rock: Whirlwind Scene
852 = 82- AYERES01: Air's Rock: Whirlwind Scene (For treasure)
853 = 82- AYERES01: Air's Rock: Whirlwind Scene
854 = 82- AYERES01: Air's Rock: Whirlwind Scene (For treasure)
855 = 82- AYERES01: Air's Rock: Whirlwind Scene
856 = 82- AYERES01: Air's Rock: Whirlwind Scene
857 = 82- AYERES01: Air's Rock: Whirlwind Scene
858 = 82- AYERES01: Air's Rock: Whirlwind Stone Scene (Passage on wall.)
859 = 
85A = 
85B = 
85C = 
85D = 
85E = 
85F = 83- AYERES02: Air's Rock: Statue moved


869 (860?)= 83- AYERES02: Air's Rock: Statue moved
861 = 83- AYERES02: Air's Rock: Statue moved
862 = 83- AYERES02: Air's Rock: Statue moved
863 = Idejima: Kraden has joined your party.
864 = Idejima: Jenna joined your party.
865 = Idejima: Sheba joined your party.
866 = 
867 = Idejima: Trying to leave cutscene.
868 = 
869 = See Kibombo
86A = 
86B = 
86C = 35 – DEKAN01: Dehkan Plateau (Mars Djinni escaping cutscene 1.) Cannon
86D = 35 – DEKAN01: Dehkan Plateau (Mars Djinni escaping cutscene 2.)
86E = 36 – DEKAN02: Dehkan Plateau (Mars Djinni escaping cutscene 3.)
86F = 36 – DEKAN02: Dehkan Plateau (Mars Djinni escaping cutscene 4.)
870 = 36 – DEKAN02: Dehkan Plateau (Mars Djinni escaping cutscene 5.)
871 = 38 – DJ_DKN01: Dehkan Plateau (Mars Djinni escaping cutscene 6.)
872 = 23 – KAIJIN01: Shrine of the Sea God (Riki and Tavi 1)
873 = Set after throwing the rope for Tavi/Riki cutscene ; Daila flooded (0) ; Daila cleaned up (1)
874 = 25 – KAIJIN03: Shrine of the Sea God (Jupiter Djinni escaping cutscene 1.) Breath
875 = 25 – KAIJIN03: Shrine of the Sea God (Jupiter Djinni escaping cutscene 2.)
876 = 27 – KAIJIN05: Shrine of the Sea God (Jupiter Djinni escaping cutscene 3.) (When under bridge)
877 = 27 – KAIJIN05: Shrine of the Sea God (Jupiter Djinni escaping cutscene 4.) (When on bridge)
878 = 38 – DJ_DKN01: Dehkan Plateau (Retrieved Pound Cube.)
879 = 84- AYERES03: Air's Rock: Statue moved
87A = 84- AYERES03: Air's Rock: Whirlwind Stone Scene (Passage on wall.)
87B = 84- AYERES03: Air's Rock: Whirlwind Stone Scene (Passage in ground.)
87C = 27 – KAIJIN05: Shrine of the Sea God (Jupiter Djinni escaping cutscene 5.)
87D = 
87E = 
87F = 
880 = 
881 = 
882 = 
883 = 
884 = 
885 = 
886 = 
887 = 83- AYERES02: Air's Rock: Statue moved
889 = Yampi Desert (70:4): King Scorpion running under sand 1.
889 = Yampi Desert (71:1): King Scorpion running under sand 2.
88A = Yampi Desert (71:3): King Scorpion running under sand 3.
88B = Yampi Desert (71:3): King Scorpion ready for battle.
88C = Yampi Desert (71:3): King Scorpion defeated.
890 = 4 – V_ENT: Venus Lighthouse (Soldiers cutscene.)
891 = 4 – V_ENT: Venus Lighthouse (Birds cutscene. Entering)
892 = 4 – V_ENT: Venus Lighthouse (Birds cutscene. Exiting)
893 = 4 – V_ENT: Venus Lighthouse (Ruffian 1)
894 = 6 – SHR_M14: Suhalla Gate (Ruffian 2)
895 = 7 – SHR_M23: Suhalla Gate (Ruffian 3, 4, 5)
896 = 8 – SHR_M56: Suhalla Gate (Punch Ant)
897 = 86- AR_IN02: Air's Rock: Statue moved (east)
898 = 86- AR_IN02: Air's Rock: Statue moved (west)
899 = 86- AR_IN02: Air's Rock: Whirlwind Stone Scene
89A = 85- AR_IN01: Air's Rock: Whirlwind Stone Scene
89B = ?
89C = ?
89D = ?
89E = ?
89F = 86- AR_IN02: Air's Rock: Visited inside.


Eastern Alhafra
8A0 = East crate moved into water
8A1 = West crate moved into water
8A2 = Pound pillar
8A3 = Lash rope
8A4 = West cog moved into water
8A5 = East cog moved into water
8A6 = Log pushed into water
8A7 = Burst rock - Isaac, the Pirate King! (96:25) (Cutscene can be done.) - Guards disappear from in front of castle until Briggs escapes.
8A8 = 
8A9 = 
8AA = 
8AB = 45- MDROOM01: Madra: Piers freed from jail. (Set after defeating Briggs, also drains puddles in Alhafra)
8AC = 
8AD = 
8AE = 
8AF = 


8B5 = Alhafra - Gave the Large Bread to the hungry boy
8B6 = Alhafra - Hungry boy mentioned the cave (the guard will move out of the way)
8B9 = Alhafra - Alhafran Cave guard moved


8C0 = 
8C1 = 
8C2 = 
8C3 = 
8C4 = 
8C5 = 
8C6 = 
8C7 = Shrine of the Sea God: Obtained Right Prong. (Trident piece.)
8C8 = Madra Catacombs - Pillar moved in place (47:3)
8C9 = Madra Catacombs - Door opened (52:1)
8CA = Madra Catacombs - Pillar moved (47:5)
8CB = 
8CC = 
8CD = Gabomba Statue…
8CE = 
8CF = 
8D0 = 
8D1 = Air's Rock (Inside; Statue moved 2 units south.)
8D2 = 
8D3 = 
8D4 = 89- AR_IN05: Air's Rock: Sheba learned Reveal.


8D5 = Magma Rock Shortcut pillar moved (Entrance map, near top)
8D6 = Magma Rock Shortcut pillar moved (Near entrance)
8D7 = Magma Rock Shortcut pillar moved (224:3)
8D8 = Magma Rock Shortcut pillar moved (224:7)
8D9 = Magma Rock Shortcut pillar moved (224:9)
8DA = Magma Rock Shortcut pillar moved (224:14)
8DB = Magma Rock Shortcut pillar moved (224:14) Further down.
8DC
8DD = Poseidon cutscene
8DE = Ship acquired.
8DF = Ship has wings.


8E0 = 
8E1 = 
8E2 = 
8E3 = 
8E4 = 
8E5 = 
8E6 = 
8E7 = 
8E8 = 
8E9 = 
8EA = 
8EB = 
8EC = 
8ED = 
8EE = 
8EF = Kibombo overworld darkness?

8F0 = 68- YANPI02: Yampi Desert: NPC Group Cutscene.
8F1 = See Kibombo
8F2 = See Kibombo
8F3 = See Kibombo
8F4 = ? (Got Piers Flag #1)
8F5 = 
8F6 = Gabomba Statue: Puzzle Explanation at top. (121:1)
8F7 = 
8F8 = 
8F9 = 
8FA = 
8FB = 
8FC = 
8FD = 
8FE = 
8FF = 44- OTMP0005: Madra: Karst's appearance. (When is this set?)


900 = 
901 = 
902 = 
903 = Isaac, the Pirate King! (Alhafra) (96:25) (Cutscene done.)
904 = 
905 = Eastern Alhafra - Burst boulder destroyed
906 = 
907 = Ship at Lemuria - So you warp back here when exited from inside the ship. (If 9B4 is on, then Atteka Inlet instead.) (If both are off, East Indra Shore.)
908 = 
909 = 

Northern Reaches
90A = May represent having gotten the cannon from Loho.
90B = 
90C = Glacier spotted cutscene.
90D = About to fire at Glacier cutscene. (But can be backed out of.) 
90E = Magma ball used on glacier. (268:4)


90F = (Spoke to guards in front of Alhafra castle - Briggs escaped dialogue.)
910 = 44- OTMP0005: Madra: Entrance cutscene
911 = 45- MDROOM01: Madra: Piers in jail cutscene.
912 = ?
913 = 44- OTMP0005: Madra: After exiting jail house from jail scene. Permission to cross drawbridge into Osenia.
914 = 
915 = 
916 = 53- OSE_ST: Madra Drawbridge: Cutscene with bridge guards has been seen.
917 = 
918 = Cyclone Chip Received
919 = ? (Set in Garoh)
91A = ?
91B = Night to Daytime (After Maha Night cutscene)
91C = ?
91D = 63- POPEE5: Garoh: Werewolf child runs away cutscene
91E = 63- POPEE5: Garoh: Werewolf Maha cutscene. (Night)
91F = 63- POPEE5: Garoh: Werewolf Maha cutscene. (Day)


920 = 
921 = 
922 = 
923 = 
924 = 
925 = 
926 = 
927 = Serpent defeated (used to control Serpent room state)
928 = 
929 = 
92A = 
92B = 
92C = 
92D = 
92E = Piers in party (nighttime Kibombo)
92F = Piers waiting (nighttime Kibombo)

Lemurian Ship - Sea creatures that turn to puddles
930 = (40:3)
931 = (40:5)
932 = (under bridge) (40:25)
933 = (left most) (40:25)
934 = (bottom left) (40:25)
935 = (center/middle) (40:25)
936 = (right middle) (40:25)
937 = (bottom right) (40:25)
938 = (40:29)
939 = (40:29)
93A = ?
93B = (40:29)
93C = (40:29)
93D = ? (Not sure if used?)
93E = ?
93F = Aquahydra defeated (Lemurian Ship boss) (41:2)

Tundaria Tower
942 = Parch used on left lake (207:2)
943 = Parch used on right lake (207:2)
944 = Broke cracked ice (Center prong) (207:11)
945 = Picked up Center Prong (207:11)
946 = Moved pillar (211:2)
947 = Moved pillar (211:2)
948 = Use Burst on wall (212:2)
949 = Got Burst Brooch from Tundaria Tower
94A = 
94B = Used Burst on ice wall (211:5)

Shaman Village
94C = Shaman Village - Sheba uses Whirlwind on Whirlwind stone making sand disappear - onward to Trial Road.
94D = Shaman Village - You can enter tents now.
94E = 
94F = Trying to go in Moapa’s house causes cutscene instead.


950 = 
951 = 
952 = 
953 = 
954 = 
955 = 
956 = 
957 = 
958 = 
959 = 


Aqua Rock
95A = Pillar moved in place (160:1)
95B = Pillar moved in place (160:3)
95C = Pillar moved in place (161:4)
95D = Aquarius Stone used on Pedestal (162:4)
95E = Causes the man to comment on the Douse stone in Apojii (Gets turned off after)
95F = Douse used on the stone in Apojii


960 = 
961 = 
962 = 
963 = 
964 = Cutscene right before Lemuria castle.
965 = 
966 = 
967 = 
968 = 
969 = 
96A = 
96B = If on and leaving Lemuria, cutscene plays while ship sails out. (Flag also turned off.)
96C = 
96D = 
96E = 
96F = 


970 = 
971 = 
972 = 
973 = 
974 = Champa: Agreed with Obaba to leave
975 = Champa: 1 prong given
976 = Champa: 2 prongs given
977 = Champa: 3 prongs given
978 = Received Trident
979 = 
97A = 
97B = 
97C = 
97D = 
97E = Avimander defeated
97F = Champa: Triggers Avimander boss battle


980 = 
981 = Madra: Cutscene inside mayor’s house with family before stepping outside
982 = Lemurian Ship (Allows access to final room.)
983 = Lemurian Ship (Final room cutscene.) 
984 = 
985 = 43 – REM_SHIP01: East Indra Shore (Lemurian Ship cutscene where Piers opens the door.)
986 =
987 =
988 = 
989 = Madra: Cyclone Chip is in jar (if inventory is full); flag is set when cutscene with mayor’s family finishes, but before stepping outside
98A = 
98B = 
98C = 
98D = 
98E = Madra: Cutscene where the mayor gives the Cyclone Chip
98F = 


Ankohl Ruins
990 = Whirlwind vines removed (Reveals doorway) (189:3)
991 = Whirlwind vines removed (Reveals doorway) (189:4)
992 = Whirlwind vines removed (189:2)
993 = Whirlwind vines removed (Reveals doorway) (189:2)
994 = Whirlwind vines removed (189:2)
995 = Whirlwind vines removed (189:22)
996 = Whirlwind vines removed (Reveals doorway) (189:29)
997 = Whirlwind vines removed (189:7)
998 = Whirlwind vines removed (189:7)
999 = Whirlwind vines removed (189:9)
99A = Whirlwind vines removed (Reveals doorway/stairs) (189:33)
99B = Whirlwind vines removed (189:8)
99C = Whirlwind vines removed (189:8)
99D = Whirlwind vines removed (189:32)
99E = Whirlwind vines removed (Reveals doorway) (190:11)
99F = Whirlwind vines removed (190:11)
9A0 = Whirlwind vines removed (190:10)
9A1 = Whirlwind vines removed (192:4)
9A2 = Whirlwind vines removed (Reveals doorway) (192:5)
9A3 = Whirlwind vines removed (Reveals doorway) (192:6)
9A4 = Whirlwind vines removed (192:6)
9A5 = Whirlwind vines removed (192:11)
9A6 = Whirlwind vines removed (192:11)
9A7 = Whirlwind vines removed (Reveals doorway) (192:11)


Shaman Village Cave
9A8 = Moved shortcut pillar in place. (240:8)
9A9 = Whirlwind Vine (240:2)
9AA = 


9AB = Talked with Susa outside Gaia Rock
9AC = Susa tried to attack Serpent
9AD = 
9AE = Piers obtained Parch from Aqua Rock


9B4 = 234 – ATK_IRIE: Atteka Inlet (Flag set on room entry.) Lemurian Ship and wings. - So you warp back here when exited from inside the ship.


9BA = Felix learns Sand at Gaia Rock
9BB = Star Magician defeated

Prox
9C0 = “Parents are gone” cutscene (271:4, executed at top of stairs to the right.)
9C1 = Waiting for Agatio at north end of town.
9C2 = Plan for Felix and co. to light the lighthouse cutscene. (Further north/before exiting Prox)

(Not sure if Prox flags or not?)
9C3 = (Not sure if used?)
9C4 = ?
9C5 = ? (I know if this is on/then the ending events at bottom of Prox can be executed.)


9C6 = Ankhol Ruins - Shortcut pillar moved (for Sand) (189:30)
9C7 = Ankhol Ruins - Shortcut pillar moved (for Sand) (191:5) - Well, not shortcut, but opens to a chest.
9C8 = Ankhol Ruins - Shortcut pillar moved (climbing vine) (192:13)
9C9 = Ankhol Ruins - Shortcut pillar moved (climbing vine) (192:8)
9CA = Ankhol Ruins - Shortcut pillar moved (for Sand) (192:6)
9CB = Ankhol Ruins - Shortcut pillar moved (for Sand) (193:6)
9CC = (Not sure if used?)


9CD = 
9CE = 
9CF = 
9D0 = Reunion
9D1 = 

Ankohl Ruins - Statue piece removed from statue head
9D2 = #1
9D3 = #2
9D4 = #3
9D5 = ? (Unknown, but could be 0 since #4 is removed from head by default?)
9D6 = #5
9D7 = #6
9D8 = #7
9D9 = Left piece put in statue head (192:14)
9DA = Right piece put in statue head (192:15)
9DB = Right piece dropped from above floor (193:4 to 192:15)
9DC = Left piece put in statue head (190:17)
9DD = Right piece put in statue head (191:4)
9DE = 
9DF = 


9E0 = Trial Road tutorial cutscene played for first time.
9E1 = Gate disappears to Trial Road. (After going to Moapa’s house/showing Shaman’s Rod)
9E2 = 
9E3 = 
9E4 = (??? But should be for inside Lemurian Ship?)
9E5 = 
9E6 = 
9E7 = 
9E8 = 
9E9 = 
9EA = Statue moved flag - Used Move on a pillar in Kibombo that causes Piers to join party. (114:5)
9EB = 
9EC = 
9ED = Shaman Village: Told Moapa (who is in his house after beating him) your names. (PC4-PC7)
9EE = 
9EF = Madra Catacombs - Pillar with vine moved in place. (47:3)

Inner(?) Magma Rock
9F0 = Yellow-topped block moved in place to form path to other side - Uterus Room (227:5)
9F1 = 
9F2 = Yellow-topped block moved in place (229:11) 
9F3 = Yellow-topped block moved in place (229:11) 
9F4 = Yellow-topped block moved in place (229:11) 
9F5 = Yellow-topped block moved in place (231:5)
9F6 = Yellow-topped block moved in place (231:17)
9F7 = Yellow-topped block moved in place (232:10)
9F8 = Red rock blazing - Magma ball (232:5)
9F9 = Blue rock - Magma ball retrieved (232:5)
9FA = Jenna learns Blaze at Magma Rock
9FB = 
9FC = 
9FD = 
9FE = Shaman Village: If on, Moapa appears in his house. (Moapa defeated?)
9FF = 


A0A = Jupiter Lighthouse Left Archer Statue
A0B = Jupiter Lighthouse Right Archer Statue (toggling these alone won’t enable Isaac cutscenes)


A1F = Both Archer Statues activated (enables Isaac cutscenes)


A20 = Daila: Obtained Sea God’s Tear (12:1)
A21 = Lighthouse lit (enables reunion)
A22 = Alex Warps in (turned off when A23 is turned on)
A23 = Isaac is defeated
A24 = Garet & Mia fall cutscene (turned off when A23 is turned on) 
A25 = Related to Alex??? (turned on when Alex appears and stays on, but toggling does nothing)


Mars Lighthouse
A2E = “Scale the Heavens” cutscene (287:2, cutscene on the stairs)

A30 = Mars Lighthouse activated
A31 = “The Heavens Await” cutscene. (287:2 entrance cutscene)
A32 = NE Mars Peek (Venus) (296:1)
A33 = SW Mars Peek (Mercury) (296:2)
A34 = SE Mars Peek (Mars) (296:3)
A35 = NW Mars Peek (Jupiter) (296:4)
A36 = ?
A37 = ?
A38 = Shortcut Statue (295:6, go southeast) - Venus area
A39 = ? (Likely not Mars LH related)
A3A = ?
A3B = ?

A3D = ? (Not raining in Prox.)
A3E = Ice gone (280:3)
A3F = Giant ice gone (281:7)

A42 = Mini-dragon lights a flame on the (torch?) (292:2) - Mars area
A43 = Dragon statue blasts fireball at wall/forms a crack. (Cracked wall can be seen at 292:1) - Mars area
A44 = Burst left wall (292:1)
A45 = Burst right wall (292:1)
A46 = Burst center wall (292:1) (Flag 0xA43 required.)
A47 = Dragon statue blasts fireball in first inside room. (281:3/4)


A4B = Agatio/Karst dragons defeated


A50-A75 = ???
A76 = GS1 bandits scene outside Madra
A77 = 
A78 = Winged Ship's First Flight/Sheba Closure Scene
A79-A7F = ???


Anemos Inner Sanctum flags.
A80 = Shortcut Statue 2 (304:2, or 304:3 if moving statue.)
A81 = Shortcut Statue 1 (304:7)
A82 = Shortcut Statue 3 (305:6, go left)
A83 = Statue (Statue near 305:15, button near 305:13)
A84 = Statue Mount (East) (305:12)
A85 = Statue Mount (South) (305:12)
A86 = Statue (306:5)
A87 = All Earth Djinn (303:99)
A88 = All Mercury Djinn (303:99)
A89 = All Mars Djinn (303:99)
A8A = All Jupiter Djinn (303:99)
A8B = Djinn Door Unlocked (303:99)
A8C = Summon Tablet: Charon (Event on stairs before obtaining it.)
A8D = Unused?
A8E = ?
A8F = 32- AR_IN08: Air's Rock: Statue moved (Statue seen from 92:1)


A9F = Dullahan defeated (Anemos Inner Sanctum)


AA1 = Quest: Milk given to dog for Li’l Turtle
AA2 = Quest: Reunited penguins and received Pretty Stone
AA3 = Quest: Red Cloth given to cow for Milk
AA4 = Quest: Pretty Stone given to bird for Red Cloth. (This affects mind read dialogue.)




Treasure Table Guide (tab 1 documents flags): https://docs.google.com/spreadsheets/d/1EKXMqMQfUCYCyzJ0txRCe_hCIcjYYzmWvI54gljTNr0/edit?usp=sharing


 E00 - E06? = Chests (Probably the extended section of the original F** section.)
 E00 = Orihalcon (282:2)
 E01 = Valkyrie Mail (284:7)
 E02 = Sol Blade (285:1)
 E03 = Psy Crystal (294:14)
 E04 = 
 E05 = Dark Matter (306:2)
 E06 = 
 E41 = Unknown
 E50 - E5F = World Map Equipment Or Hidden Items?
 E5B = Rusty Axe (Captain's Axe) SE of Lemuria
 E5C = Rusty Mace (Hagbone Mace) NE of Izumo
 E5D = Rusty Sword (Pirate's Sabre) E of Tundaria Tower
 E5E = Rusty Staff (Goblin's Rod) W of Kalt Island by waterfall.
 E5F = Rusty Sword (Soul Brand) Western seas; surrounded by rocks.  Ship w/ wings required.
 E70 - E78 = Mimics
 F00 - FFF = Treasure flags.
xF00 = 5 – VT001: Venus Lighthouse (Herb)
xF07 = 34 - DEKAN00: Dehkan Plateau ; Full Metal Vest
xF08 = 34 - DEKAN00: Dehkan Plateau ; Elixer
xF09 = 37 – DJ_DKN00: Dehkan Plateau ; Mint
xF0A = 35 – DEKAN01: Dehkan Plateau ; Themis’ Axe
xF0B = 36 – DEKAN02: Dehkan Plateau ; Nut
xFC2 = 218 - HESDJ: Hesperia Settlement (2) ; Coins
xF80 = 196 – ANGKOR_T: Ankohl Ruins ; Left Prong


F13 = Apple (Madra Catacombs) (47:5, near rope coil.)
F14 = Lucky Medal (Madra Catacombs) (50:1)
F15 = Ruin Key (Requires 0x8CC/Tremor) (Madra Catacombs) (50:15)
F16 = Tremor Bit (Madra Catacombs) (52:2)


F24 = Apple (Alhafra Inn, 2nd floor, jar) (96:25)


F32 = Smoke Bomb (Air's Rock) (82:1, chest seen on screen)
F33 = Cookie (Air's Rock) (82:?)
F34 = Storm Brand (Air's Rock) (82:?)


F5D = Apple (Requires Catch) (Kalt Island) (219:1)


F75 = Apple (Gaia Rock) (176:1)


F94 = Cookie (East Indra Shore, box) (43:2)


F98 = Cookie (Taopo Swamp) (143:3)


(Treasure Isle)
FCD = 161 coins (298:3)
FCE = Lucky Medal (298:3)
FCF = Empty
FD0 = Empty
FD1 = Empty
FD2 = Empty
(299:0)
FD3 = Empty
FD4 = Empty
FD5 = Empty
FD6 = Empty
FD7 = Empty
FD8 = Empty
FD9 = 911 coins
FDA = Psy Crystal
FDB = Cookie
FDC = Sylph Feather
FDD = Rusty Axe
FDE = Star Dust
FDF = Jester's Armlet (300:1)
FE0 = Fire Brand (301:6, on screen)
FE1 = Iris Robe (301:4, on screen)


FE8 = Blue key (Jupiter Lighthouse; 261:13)


FFA = Cookie (Prox) (270:1) Jar in front of Inn.


FFD = Apple (Mars Lighthouse) (279:1)


02000240 = Same as 0x02000026
02000244 = On save, frame counter.


0200024C = Summon unlock flags.  Flags above Iris seem to do nothing
  0x00000001 = Venus
 0x00000002 = Mercury
 0x00000004 = Mars
 0x00000008 = Jupiter
 0x00000010 = Rameses
 0x00000020 = Nereid
 0x00000040 = Kirin
 0x00000080 = Atlanta
 0x00000100 = Cybele
  0x00000200 = Neptune
  0x00000400 = Tiamat
  0x00000800 = Procne
  0x00001000 = Judgment
  0x00002000 = Boreas
  0x00004000 = Meteor
  0x00008000 = Thor
  0x00010000 = Zagan
  0x00020000 = Megaera
 0x00040000 = Flora
  0x00080000 = Moloch
  0x00100000 = Ulysses
 0x00200000 = Haures
 0x00400000 = Eclipse
 0x00800000 = Coatlicue
 0x01000000 = Daedalus
 0x02000000 = Azul
 0x04000000 = Catastrophe
  0x08000000 = Charon
 0x10000000 = Iris
02000250 = Coins
02000254 = Some of this data may have to do with auto-setting djinn.


02000374 = Total number of djinn in recovery queue (user IDs x00-x07; multiplayer opponent’s djinn are relative from enemy slot x83)
02000378 = Spent coins at shops. (For game ticket offers)
0200037C = Number of Game Tickets bought, caps at 0x1C. 
(Above two addresses used to help determine how much coins you need to spend until you are offered Another Game Ticket.)
Tickets
1-5 = 300 coins
6-10 = 500 coins
11-15 = 1000 coins
16-20 = 2000 coins
21-25 = 4000 coins
26+ = 8000 coins


0200037D = Lemuria Spring - Item chances for 15 items (Relative to the other items)
0200038C = Lucky Wheels Item Group - Two bytes for two possible rewards in one go round
02000394 = Lucky Wheels Item Slot - Last item retrieved in each group (5 bytes), This makes it so you can't receive the same item twice in a row. The GS Wiki seems to say something about Moons changing a probability, but I don't see any evidence of that in the code. I think if you get all five moons, that it randomly selects a group. There's a function here that works like that, but I haven't verified to make sure the 5-in-a-row Moons use it. Most likely, though.


02000420 = Map and door number (Different in battle)
02000424 = Sanctum map and door number
02000428 = Current map and door number
0200042C = Area?
0200042E = Map and door number when you win or flee a battle. FFFF to use current map and door number instead.
02000432 = Map and door number when you lose a battle. FFFF to use sanctum map and door number instead.
02000436 = Battle Background
0200043A = Graphic Map Index. (For file index table on map/pal/tilesets; see 0802F380)
0200043C = X
02000440 = Z
02000444 = Y
02000448 = Direction

0200044C = Could be the layer you are on so it is kept after battles(wild guess)? Or something else similar… *Needs research*
0200044E = Battle song / battle theme
02000450 = Song
02000452 = Movement mode
 00 - Normal mode
 01 - Overworld mode
 02 - Climbing wall
 03 - Climbing rope
 04 - Walking rope
 05 - Sand
 06 - Ship mode (Normal)
 07 - Ship mode (Overworld)
 08 - Hover Ship mode
 09 - Sand (World Map)
 0A - Hover
 0B - Slippery Ground
 0C 


02000454 = Leader
02000458 = PC order (party member list)
02000460 = ?


02000465 = Window color
02000466 = Window brightness


0200046A = Speech


0200046C = Message speed


0200046F = Set to 01 to Lock File. This is used when you save for the last time after the final boss.
02000470 = Actions / Buttons
02000480 = Psynergy Shortcuts
02000484 = ?


0200048A = Auto-Sleep
0200048B = Battle: Flee / Battle Type
 00 = Normal
 - 1/16 chance for your party to attack first.
 - 1/32 chance for your party to be caught by surprise.
 01 = ?
 02 = No Flee option.
 03/04 = "This is no time to be running away!"
 06 = Your party is caught by surprise (Base Damage abilities guaranteed to kill; used for Agatio & Karst vs. Isaac fight @ 02009D78 in map 0x107.)
0200048C = Seconds to wait until “hit” on map.
0200048E = Make 0001 to turn on vulnerable to hits.
02000490 = Hit Damage (If higher than 10, hit sound effect changes; if 0, sounds like cure.)
02000491 = ?
02000492 = Hit counter
02000494 = Djinn-related (0x800=Skip Djinn animation for starting a battle.)


02000496 = FFFF if lost battle, 0001 if won/fleed? (What is set to argument of function 080C977C)
02000498 = Battle activator counter.
0200049C = Item to receive when you leave the room.
0200049E = 0001 on Non-towns; 0002 on Towns. (Probably taken from room data for Retreat.)
020004A0 = Map and door number (Used with Retreat)
020004A4 = Avoid's effects counter.
020004A8 = If 00, “Avoid’s effects wore off.”, else “Sacred Feather’s effects wore off.”
020004A9 = Halted related?
020004AA = NPC ID of Halted NPC
020004AC = Sand - Disables random battles.
020004AD = Cloak - Disables random battles.
020004B0 = NPC Thumb pointer (For the Halted NPC, so it can use the Halt thumb script.)
020004B4 = Kraden Mad Scene counter (>4 = Kraden can snap in Lemuria)
  Known “No” responses (6 confirmed):
Idejima:
"Is that where we're going, Felix?" [in response to Jenna]
Alhafra:
"We'll bring you in against your will if..."
"Isn't that right, Felix?"
Kibombo:
Jenna: We've got to help Piers. Right, Felix?
...
Kraden: I want to aid Piers so that he will take us to Lemuria... What do you
say, Felix?
Gabomba:
"Do you think Akafubu will really return the orb to us?" [after letting him in]
Madra:
"And your jewel..." [asking about the Black Orb]


020004B6 = On ship flag.
020004B8 = Ship X
020004BC = Ship Y
020004C0 = Direction


020004C7 = Difficulty Level (0=NORMAL, 1=EASY, 2=HARD)


020004CC = Isaac’s party coins?


020004FC = Forge item reward
020004FE = Teleport’s Map number
02000500 = Teleport’s Door number
02000502 = Teleport-related
02000503 = Set to 0 at 080CB990. (Map loading)


02000508 = Battle Arena: Record - The number that's displayed in the old man's convo.


02000510 = Battle Arena: Record - The three on-screen numbers.


02000518 = Build date related
PC Data (0x02000520)


02000520 = PC Data *8 ; Felix (04) below:
 02000A50 = Name
 02000A5F = Level
 Base Stats:
 02000A60 = Base Max HP
 02000A62 = Base Max PP
 02000A64 = HP % - appears to be out of 1024 so maybe HP% * 10 (HP permille)
 02000A66 = PP %
 02000A68 = Base Attack
 02000A6A = Base Defense
 02000A6C = Base Agility
 02000A6E = Base Luck
 02000A6F = Base Turns
 02000A70 = Base HP Recovery?
 02000A71 = Base PP Recovery?
 02000A72 = [unused]
 02000A73 = [unused]
 02000A74 = Elemental Power/Resist
 Current Stats:
 02000A84 = Max HP
 02000A86 = Max PP
 02000A88 = Current HP
 02000A8A = Current PP
 02000A8C = Attack
 02000A8E = Defense
 02000A90 = Agility
 02000A92 = Luck
 02000A93 = Turns
 02000A94 = HP Recovery
 02000A95 = PP Recovery
 02000A96 = [unused]
 02000A97 =
 02000A98 = Elemental Power/Resist
 02000AA8 = Psynergies (32 max) (8000=Class Psynergy; 4000=Item Psynergy?)
 02000B28 = Items (F800=Quantity; 0400=Broke; 0200=Equipped; 01FF=Item)
 02000B48 = Djinn (Venus, Mercury, Mars, Jupiter; Ready/Not Ready (Set/Standby; Total *2))
 02000B68 = Djinn Totals (Venus, Mercury, Mars, Jupiter; Total/Total Set)
 02000B70 = Only used by enemies? (01=Move has been picked? , 07=The move that was picked , 30=Enemy. Last is used for Dullahan, not sure if any others.) - Is accessed during djinn menus for the player
 02000B74 = Exp
 02000B78 = [unused] ID in GS1, unused in GS2?
 02000B79 = Class
 02000B7A = ??? (Seems to indicate alive/downed condition for enemies, but PCs use it differently?)
 02000B7B = “1” when Defend (cmd 3) is used. “3” when ??? (cmd 7) is used. (Defense reduction modifier, IDs are stored)
 02000B7C = Summon boosts (per byte)
 02000B80 = Curse
 02000B81 = 01 for poison; 02 for venom; every increase adds 10% damage in battle (not in field).
 02000B82 = Attack Turns & Up/Down
 02000B84 = Defense Turns & Up/Down
 02000B86 = Resistances Turns & Up/Down
 02000B88 = Delusion Turns
 02000B89 = Confusion Turns
 02000B8A = Charm Turns
 02000B8B = Stun Turns
 02000B8C = Sleep Turns
 02000B8D = Psy-seal Turns
 02000B8E = HP Regenerate Turns
 02000B8F = Reflect Turns
 02000B90 = Haunt
 02000B91 = Turns until downed/Candle Curse
 02000B92 = Unleash/critical rate
 02000B93 = Reflux
 02000B94 = Kite bonus duration; starts at x02, decrements every round
 02000B95 = 1-turn Stun (turns)
 02000B96 = Agility Turns & Up/Down
 02000B98 = “Rises to the challenge!” (flag)
 02000B99 = [unused]
 02000B9A = ID - seems to affect enemy AI somehow.  Punch Ant with id changed in battle to <09 always defends even though its only action is attack.  When party members’ ID is changed before entering battle, affects which battle sprites are used for them; when changed before or during battle, affects which portrait is used.  0-7 = Isaac-Piers in standard party member order


 020309E8 = This would be in PC/enemy data, and is used/modified in Sequential Attack Pattern 1 (and possibly 2) to decide which ability to use; it is also used by Dullahan to figure out which enemy ID to grab moves from


02000F80 = Probably Unused?
02001000 = Map State Data?
02001000 = Play Time (2nd value, but not sure how it's used)
02001004 = List of 32 Obj/NPC RAM Index slots
02001024 = 32 NPC Data
02002024 = Sprite related
02002044 = Sprite related
02002064 = Sprite related
02002084 = Unused?
0200208C = Artifacts
020021B8 = ? (Randomly generated numbers of 0 to 4.)
02002338 = ?
0200234C = Gabomba Statue puzzle room layout (4 bytes per tile, AABBCCDD: A = rotatable? (0/1), B = path ID, C = is start? (0/1), D = tile)
020026D0 = Akafubu Cutscene Timer
0200244C = Trial Road room layout (left to right, bottom to top) 
0200245C = Trial Road current room ID (Gabomba puzzle also writes to 0200245C)
02002462 = Trial Road progress:
02002462 = Felix’s current room (0-4)
02002464 = Moapa’s current room
02002466 = Felix’s highest reached room (probably used to persist door/chest states)
02002468 = Moapa’s highest reached room
0200254C = Ex: Geysers, dragon fire blasts, etc. ; Perhaps these are like event timers?
 292:3 Mars Lighthouse pipes
0200264C = Gaia Maze table
0200274C = Tile Placements (Cycloning bushes populates this list)
0200294C = Number of Tile Placement entries
02002950 = GS1 djinn / element (The ones you can collect that are not already in GS1 party.)
02002FF0 = ~None of this data is Save Game Data
02003010 = Render order? Pointers to sprites at each Y position (Which links to the next at the same Y)
02003410 = Which Sprites each block in sprite vram is taken by. (IDs to 030036E0 table) In general: FF is free to allocate.
02003610 = Functions called every frame
030036D0 = Selected file (0-2/FFFF) for Save/Continue/Battle/Update file select menus. (so the position is remembered after selecting one.) Copy/Erase menus not included.


030036D8 = If non-zero, battle icon on main menu is enabled.


030036E0 = Sprites allocated (Offsets (From 0x06010000) and sizes for sprite vram)
03003860 = If non-zero, difficulty selection can be made when starting a new file.


020038E0 = Something related to map animations/events? (map state changes?)
< DMA table
02003A90 = Sound A (DMA’d into 040000A0.)
020046F0 = Sound B (DMA’d into 040000A4.)
02005350 = If non-zero, Update icon shows on main menu.


020054D0 = OBJ Rotation/Scaling OAM data
020055D0 = ? (0 data)
02005850 = “Sound buffer” (Pointed from 03007FF0.)
02006800 = Audio
02007400 = ?


Pre-JL World Map Theme
02006A90 = 
 082C8EFC = Song pointer
 00FF = 
 0000 = 
 000A = Max tracks for group
 0002 = 
 0000005B = Frame counter
 00000000 = 
 00000000 = 
 02006B50 = 
 0078 = 
 0100 = 
 0078 = Tempo
 003C = 
 0000 = 
 0007 = 
 0030 = 
 0000 = 
 02006CE0 = Tracks pointer
 081C3714 = 
 68736D53 = Shsh
 081C09D1 = 
 02006A10 = 


Map Code (0x02008000)
02008000 = Map Code
 Initialization
 Some Entrances
 Exit Init
 NPC Init
 Event Init
 Special Entrances? (For Z-coords) (May need to double check.)
 Copy tiles/etc? (More research needed)


02010000 = Tilemap (Including graphics, event indexes, heightmap, etc.)(32-bit a tile)
 000007FF = Graphic tile
 00000800 = Unused? (MSB of graphic tile in GS1)
 00003000 = If stepped on, layer of PC (/NPC?) will change. (0=Does nothing? 1-3 are layer 0-2.) Layer being where to read heightmap/events from.
 0000C000 = Priority (Whether the graphic tile appears in front of sprite or not.)
 00FF0000 = Event Connector? (For doors as well.) (FF=Wall, FE=Gap for hopping?)
 FF000000 = GS1: Height data; GS2: Special tilescript flags.
 01000000 = On if tile cannot be scooped. (Used where bridges are.)
 02000000 = ? (Seen used in Jupiter Lighthouse near Hover pads/slopes. No idea what it could be.)
 04000000 = Determines whether to use the first or second encounters index.
 08000000 = Hit/damage inducing.
 10000000 = ? - Graphic/sound/etc. effects like when moving around in water. (Does not include footprints.) ; Might be just water?, but a map must first enable it in map code initialization.
 20000000 = Slope down.
 40000000 = Climbable (Ladder/Vine) (Use same value on tile above or below to activate.) 
 80000000 = Hop. (Can hop from this tile.)


02020000 = Tile data (Mini-tiles) (F000=Palette; 0C00=Flips; 03FF=Tile)
02024000 = GS2 Only: Heightmap tilemap.
02028000 = Animation Tileset
0202C000 = Heightmap tile table (Defines the 16x16 tiles that will be used in the heightmap)
 0000000F = Tile type (There are only 16 tile types; each having their own function to calculate height.)
 000000F0 = Unused? (Or unknown.)
 0000FF00 = Height 1 (All in increment of 8, so 01=8px.)
 00FF0000 = Height 2
 FF000000 = Height 3


Tile types:
0 = Flat ground ... height is Arg 1
1 = Left/Right stairs (Arg 1 and Arg 2 used - Basically a linear function.)
2 = Up/Down stairs  (Arg 1 and Arg 2 used - Basically a linear function.)
3
4 = \| slanted wall
5 =
6
7 = Pillar? (Based on data at 0802EDC4) (Not an index to Arg 1/Arg2/Arg3, but... (value * (Arg 2 - Arg 1))
8 = Left half of tile's height is Arg 1, right half is Arg 2.
9 = Top half of tile's height is Arg 1, bottom half is Arg 2.
A = Based on data at 0802EEC4 [X<<4 + Y] Note: Both X and Y should be 0x0 to 0xF of tile. ; And table is index to which of Arg 1, Arg 2, or Arg 3.
B = Based on data at 0802EEC4 [X<<4 - Y + 0xF]
C = Based on data at 0802EEC4 [Y<<4 + X]
D = Based on data at 0802EEC4 [Y<<4 - X + 0xF]
E = Bottom half = Arg 3 ; Top left corner = Arg 1 ; Top right corner = Arg 2
F = Top half = Arg 1 ; Bottom left corner = Arg 2 ; Bottom right corner = Arg 3
(A to D may be for slanted walls.... Basically where the slant could fit in a rectangular 8x16 box or something…)


0202D000 = Tile animation data (Stuff like water)
0202DE00 = Tile layer visual effects (Sun rays in Madra)


0202E000 = Coord Data
 Three relative addresses to Entrances data and later.
  Treasure locations
  Entrances
  Copy Tiles (Each entry is a Storybook Flag & 6 bytes for “from x/y”, “to x/y”, “w/h”)
  Map boundaries
Sprite / Battle Data (0x02030000)
02030000 = Sprite data / Battle data


Battle:
https://discord.com/channels/243488870962823200/332622755419652096/903559772522033152
0203004C - Enemy Group/Index ID (+1; example, x38 = 56, which is the Briggs boss fight)
0203004D - Group Type (can be 00 or 02)
02030050 = Enemy Slots used.
0203005C = Enemy IDs (16-bits x5)
02030068 = Enemy Flags (One for each enemy) (32-bits x5)
02030080 = Enemy Quantities (8-bits x5)
02030086/7 = ??? Not sure if used.
02030088 = =6
0203008A - Two or more enemies have been killed by the player, resulting in “[18][2]’s party was downed” string instead
  Note: Only gets checked if the fight had more than one enemy to begin with 
0203008C = Number of Enemy IDs loaded.
0203008D = Party panel flags? (1=show PP, 2=element standby counts, 4=, 8=)
0203008E = Formation
0203008F - Rises to the Challenge effect (effect #54) value; disables Flee command
02030090 - Multiplayer Flag (00 = not linked, 01 = linked)
02030091 - Battle/Round Start Priority (00 = normal, 01 = player acts first, 02 = player caught by surprise)
02030092 - Player flee attempt count 
02030093 - Stored by effect #81 (Lull’s effect); round ends if this is not 0
02030094 = Enemy slot IDs for the PC IDs in multiplayer (Not sure how used)
0203009C = 00=Player 1, 01=Player 2
020300A0 = Sprite slot (for which?)
020300A4 = Protagonist Party (those actively in battle)
020300B2 = Enemy Party (those actively in battle)


020300C0 = Target Slot IDs (0-7 for PCs, 8-D for enemies); this seems static and unable to change
02030230 - 


020306C8 - User ID
020306C9 - Ability Range (is 0 for Defend)
020306CA - User ID again?
020306CB - ID list (number of IDs recognized based on Ability Range value)






020306E7 - Multiply Damage by 0/1/2/3; defaults to 1 and missed standard attacks store 0 (dual purpose)
020306E8 - 2nd unit; this and following not used for standard attacks
020306E9 - 3rd unit
020306EA - 4th unit
020306EB - 5th unit
020306EC - 6th unit
020306ED - 7th unit? - Possible that a higher enemy/character cap was planned (see Success Roll notes)
020306EE - 8th unit? 
020306EF - 9th unit?
020306F0 - 10th unit?
020306F1 - 11th unit?
020306F2 - 12th unit?
020306F3 - 13th unit?
020306F4 - 14th unit?
—
020306F5 - Critical Hit Value (0 = no critical, 1 = standard, 2 = weaker; 2 is handled via unused & broken effects)
020306F6 - 2nd unit; this and following technically unused, but functional if edited manually
020306F7 - 3rd unit
020306F8 - 4th unit
020306F9 - 5th unit
020306FA - 6th unit
020306FB - 7th unit? - Possible that a higher enemy/character cap was planned (see Success Roll notes)
020306FC - 8th unit?
020306FD - 9th unit?
020306FE - 10th unit?
020306FF - 11th unit?
02030700 - 12th unit?
02030701 - 13th unit?
02030702 - 14th unit?
—
02030703 - Success Roll Skip; Annihilation/etc. anim property; -1 = default (FF for 14 bytes), 0 = fail, 1 = success 
02030704 - 2nd unit
02030705 - 3rd unit
02030706 - 4th unit
02030707 - 5th unit
02030708 - 6th unit
02030709 - 7th unit? - Possible that a higher enemy/character cap was planned; no need for 14 bytes otherwise
0203070A - 8th unit? 
0203070B - 9th unit?
0203070C - 10th unit?
0203070D - 11th unit?
0203070E - 12th unit?
0203070F - 13th unit?
02030710 - 14th unit?
—
02030711 - ???
02030712 - Current Action Type Performed (ID)
02030714 - Current Ability Performed (32-bit ID)
02030718 - Element (32-bit ID)
0203071C - Ability Type (32-bit ID)
02030720 - Animation (32-bit ID, plus argument flags)
02030724 - 0 or 1; “But the Psynergy was blocked!” displays (and action blocked) if = 1
02030728 - Haunt Damage (1/4 of damage dealt, floored at 1)
0203072C - ??? - Resets after every action




02030870 - 
02030874 - 
02030878 - State type x0B is the trigger for disintegration death
0203087C - 
02030880 - Timer while x0B is true; not always true (can be other things)
02030884 - 
02030888 - 
0203088C - 
02030890 - 
02030894 - Enemy/Slot ID being targeted
02030898 - [Always seems to be x85 or x86; purpose unknown]
0203089C - Djinn Kill flag (Djinn Kill if /= 0)




020308A4 - Reflux/counterattack arguments (retaliator ID, target ID)
020308AC = ?
020308AE = Moved to previous address and 0’d out. (queue)
020308B0 - Daedalus 2nd Strike: Strike Count (decrements by 1 for every use at end of round)
020308B1 - Daedalus 2nd Strike: Strike Queue (transferred to Strike Count at end of round)


020308B4 - Poseidon Barrier flag (gives damage immunity, removed by Trident)
020308B5 - 


020308C8 - Start of Enemy RAM/data (same structure and layout as PC RAM/data)








020300D0 = char_sprite_entry (PC section - 44 bytes each)
02030230 = char_sprite_entry (Enemy section - 44 bytes each)
AAAAAAAA CCCCBBBB EEEEDDDD FFFFFFFF
GGGGGGGG xxxxxxHH LLLLLLLL OONNMMMM
PPPPPPPP QQQQQQQQ TTSSRRRR


A = OBJ pointer
B = Character Sprite ID
C = Weapon Sprite ID
D = Status Effect Sprite ID
E = Shadow Sprite ID
F = Home X
G = Home Y
H = Palette
L = Scaling
M = 14 status effect flags (to enable which status effect animations to cycle through.) 
N = status effect to show.
O = timer until display of next status effect.
P = status effect pointer (sprite layer info) (unknown purpose)
Q = Shadow pointer (sprite layer info) (unknown purpose)
R = If non-zero, set for clearing.
S = 
T =




0203136C = sprite_dynamics (section - 56 bytes each, updates in real time)


x0C [word] = sprite_scale


x14 [byte] = sprite_width
x15 [byte] = sprite_height
x16 [byte] = X-offset
x17 [byte] = Y-offset


x1A [byte] = 
bit-01: render_drop_shadow (overworld sprites use them all the time)
bit-02: outline_mode (e.g. Haze, Cloak)




0203216C = objSprite_render_props (section - 24 bytes each)
x00 [half] = sprite_ID
x02 [half] = frame_counter (frames animate when this reaches 0)
x04 [byte] = 
x05 [byte] = palette_swap
x06 [byte] = layer_priority (for sprites assigned to one object)
x07 [byte] = 
x08 [word] = sprite_graphic_address (from sprite table entry)
x0C [word] = animation_data_address (from sprite table entry)
x10 [word] = animation_sequence_address (from animation_data_address)
x14 [byte] = 
x15 [byte] = anim_speed (decides how quickly to advance frame_counter)
x16 [byte] =
x17 [byte] = current_anim_frame (sprite frame ID)


020327C8 = objRAM (section) - same as NPC_data below
AAAAAAAA CCCCBBBB DDDDDDDD EEEEEEEE
FFFFFFFF GGGGGGGG HHHHHHHH IIIIIIII
LLKKJJJJ MMMMMMMM NNNNNNNN OOOOOOOO
PPPPPPPP QQQQQQQQ RRRRRRRR SSSSSSSS
TTTTTTTT ???????? ???????? ????????
???????? ???????? ???????? ????????
???????? BBBBAAAA CCCCCCCC DDDDDDDD
EEEEEEEE FFFFFFFF GGGGGGGG HHHHHHHH
  
A = Idle Script Pointer
B = Idle Script Current Position
C = Direction facing
D = X
E = Z
F = Y
G = Z (floor; gravity ends here)
H = Width scaling
I = Height scaling
J = Radius
K = Layer
L = 
M = X Speed
N = Z Speed
O = Y Speed
P = Speed
Q = 
R = X Destination
S = Z Destination
T = Y Destination










When on Field:
02030000 = PC RAM init data pointer (Should point to 020301EC)
02030004 = NPC Ram init data pointer (Should be pointing to map code.)
02030008 = Object Ram init data pointer (Unused/always 0?)
0203000C = Object Ram init data pointer (Unused/always 0?)
02030010 = Events data pointer (Should be pointing to map code.)
02030014 = NPC ram data pointers (Current states.)
 02030014 = PCs (0x0-0x7)
 02030034 = NPCs (0x8-0x3F - Only up to 0x1F gets saved in Save Game.)
 02030114 = Treasures (chests) (0x40-??? 0x4F?)

02030154 = Event ID to execute? (Event Type 1 and 2?)
02030156 = ? (Probably related to button presses or direction/ Not sure, but climbing on/off ladders affects it.)
02030158 = Exit (Takes action when not 0.)


0203015A = 0001 when in Select icon menu
0203015E = 0001 when in Pause menu
02030160 = NPC to interact with. (e.g. 4008 for the first NPC. Not sure what “4” means, but isn’t needed.)
02030162 = Event ID to interact with. (might only be for showing examine dialogues?) 0xF2-0xF7, 0x63 for ship, and anything else for event type 3.

02030184 = How long you’ve been walking into a wall. (Probably delay for pushing things.)
                (13 Frames until hop starts)
02030186 = Keypad buttons being pressed. (Returns to 0 only if not in a menu.)


0203018A = Map type (2=Normal 3=World map ; Used to calculate current location in map data, at least.)
0203018C = Room’s Battle Encounters index


0203019C = Increment value (Probably 32-bit??)
0203019E = 
020301A0 = Counter value (PP/Djinn recovery) (Probably 32-bit, but cut as 16-bit unless negative??)
020301A2 = 
020301A4 = Map data pointer (Current position) (Unknown purpose.)
020301A8 = Map data pointer (Current position) (Unknown purpose.)
020301AC = Exit fade (more research needed.)
 0000 = Normal fade (brightness fade)
 0100 = 
 02
 03
 04
020301B0 = 
020301B2 = 0=faded out / 1=faded in
020301B4 = Fade frames - Higher numbers makes exit fade take longer.
020301B8 = 0=Don’t skip frames/dialogue. ; else/-1=skip frames/dialogue
020301BC = 


020301C4 = Text ID
020301C6 = 
020301C8 = 
020301CA = 
020301CC = Camera object pointer


020301E0 = Object ID
020301E4 = Pointer (Relating to convo panel in cutscenes?)
020301E8 = Pointer (Might relating to convo panel for portrait during cutscenes?)
020301EC = PC init object data (2 entries, the second is for ending the list.)
0203021C = Pointer (Relating to convo panel? Used in cutscenes?)
02030220 = Various things?
- Could be Object ID?
 - Appears to be initial bg palette colors when Psynergy is used.(16-bit per color B G R.)
 - Counter for Room name on entry.


02030CA6 = Reveal Counter
02030CAE = Magnet Counter
02030D44 = Hover Counter


02030D50 = (Next section)


02030F00 = See below.
During room transitions, temporarily holds non-graphic tilemap data. (Up to 02038F00.)
02030F08 = Top layer mini-tiles. (BG0, where dialogue and menus are used.) 


02031408 = Panel entries (8 entries)
AAAAAAAA BBBBBBBB DDDDCCCC FFFFEEEE
-------- -------- -------- --------
--------


A = Pointer to where the oam entries start (0 if none)
B = Pointer to where the oam entries end (pointer to self if none)
C = width
D = height
E = x
F = y


020315B8 = Text crawl entries (for dialogue/convos) (3 entries)
AAAAAAAA CCCCBBBB EEEEDDDD GGGGFFFF
IIIIHHHH KKKKJJJJ MMMMLLLL OOOONNNN
QQQQPPPP SSSSRRRR


A = Panel pointer
B = X (text insertion cursor) (FP88)
C = Y (text insertion cursor) (FP88)
D = 
E = 
F = 
G = 
H = 
I = Text offset (where to receive text from text buffer.)
J = Frame delay to clear a text box when holding B. (if 1, should clear it instantly when pressing any of A/B/L/R.)
K = 
L = 
M = 
N = Frame delay 1 (countdown until text crawl.) - cannot be canceled with button press.
O = X for where to start on new line? (see 08039B76, did not check text command it falls under.)
P = 
Q = Frame delay 2 (countdown until text crawl.) - can be canceled with button press. - Frame delay 1 must be 0 to count down.
R = 
S = 




02031630 = Icon/text OAM entries (64 entries)
AAAAAAAA DDDDCCBB 0000EEEE HHGGFFFF
IIIIIIII JJJJJJJJ 0000JJJJ


A = Pointer to next entry (0 if last entry in group.)
B = type?
 00=text/red crystal
 01=icon
 02=portrait
C = Scaling/Movement type (may sometimes be set to 01 and do custom movement.)
 00=
 01=Normal (no animation)
 02=Red crystal movement (and 256 color palette?)
 03=
 04=Pendulum (Hand cursor when selecting a PC in shops.)
 05=Random shaking
 06=Big icon
 07=Rotation
 08=
 09=Scale animation - “active icon” (item and psynergy icons in party menus and shops.)
 0A=Scale animation (as tiny icon)
 0B=
 0C=
 0D=Off/hidden
 0E=Right arrow movement (To second set of PCs in Djinn menu.)
 0F=Down arrow movement (To second set of PCs.)
 10=Left arrow movement (To first set of PCs in Djinn menu.)
 11=Up arrow movement (To first set of PCs.)
 12=diagonal (/) movement (hand cursor)
D = Home X
E = Home Y
F = Frame counter (increments when animating things like scaling.)
G = VRAM allocation ID (How it knows where to store/release sprite in vram.)
H = Priority (changes order of entries in OAM.)
I = Pointer likely for what to render next of same priority? (oam order)
J = OAM Attributes (transferred to OAM section)


02031D30 = Pointer to where to allocate new entries.
02031D34 = Pointer to where to deallocate old entries. Or end of free space. Can’t remember.
02031D38 = Allocated VRAM tiles for text (0=available, 1=in-use)
 -entries correspond to:
 -0x06001000-0x06001FFF
 -0x06004000-0x06004FFF (must be enabled to use; used by Status menu.)
02031E38 = Text


020322EC = NPC Data
AAAAAAAA CCCCBBBB DDDDDDDD EEEEEEEE
FFFFFFFF GGGGGGGG HHHHHHHH IIIIIIII
LLKKJJJJ MMMMMMMM NNNNNNNN OOOOOOOO
PPPPPPPP QQQQQQQQ RRRRRRRR SSSSSSSS
TTTTTTTT ???????? ???????? ????????
AAAAAAAA ???????B ???????? ????????
???????? BBBBAAAA CCCCCCCC DDDDDDDD
EEEEEEEE FFFFFFFF GGGGGGGG HHHHHHHH
  
A = Idle Script Pointer
B = Idle Script Current Position
C = Direction facing
D = X
E = Z
F = Y
G = Z (floor)
H = Width scaling
I = Height scaling
J = Radius
K = Layer
L = 
M = X Speed
N = Z Speed
O = Y Speed
P = Speed
Q = 
R = X Destination
S = Z Destination
T = Y Destination


A = Pointer to sprite info 1
B = Sprite type
 1 = A points directly to sprite info 1. 
 2 = A points directly to 4 pointers that point to sprite info 1. (“stitched together” sprites?)


(Numbers on left list idle script commands that use these.)
A = Idle Script Arg 1 (16-bit)
 - 0C = 
 - 2F = 
 - 09 = X Home
 - 0A = X Home
 - (Unknown for PC)
 - Direction/angle destination
B = Idle Script Arg 2 (16-bit)
 - 09 = Y Home
 - 0A = Y Home
 - (Unknown for PC)
C = Idle Script Arg 3 (32-bit) / Always pointer to object linked to?
 - 06 = Pointer to object to face. (eg: See Jenna/Kraden facing Felix as he exits in prologue.)
 - 07 = 
 - 0B = 
 - 0C = 
 - 2F = 
 - ?? = Pointer to segment of rope you are on.
D = Thumb pointer (called every frame if not 0)
E = X Speed (?)
F = Z Speed (?)
G = Y Speed (?)
H = Pointer to moving platform object you are on.






02038F00 = 
02035708 = Battle text
02035B08 = ?
02035EB2 = Psynergy List populates this section (32 abilities, each a 16-bit value with no spacing)


02035EF4 = Flag: Apply AI to PCs? (16-bit; any value other than 0 kickstarts it)
  Tests: Jenna always Defends, Isaac/Garet/Ivan/Mia always Attack, and AI will go past the Fight/Flee/Status menu to accomplish this 
02035EF8 = Timer: Action is decided once this value hits 0 (16-bit value, but starts from 0x3C)
02035EFC = Current PC ID (always active even without AI being applied)


02039F3C = When messing with classes, this appears to have a decompressed graphic? Looks like a triangle pointing up.


Global Dynamic Structs (0x03000000)
Apart from the free space pointers, the first portion of this block is reserved for fixed pointers to dynamically allocated data structures. They are basically globals that are only allocated when needed.
03000000 = 02 RAM free space (02030000-02040000)
03000004 = 03 RAM free space (03001300-03006FC0)
03000008 = ?
0300000C = How sprites are loaded. (03002100)
03000010 = How sprites are displayed. (03001300)
03000014 = Player and NPC data. (020322EC)
03000018 = 
0300001C = 
03000020 = Tilemap metadata (layer tilemap pointers, etc.)
03000024 = Battle data (Including Round/Turn data) (0203004C)
03000028 = Init at 081263C4
03000030 = Battle-related (02030000)
03000034 = 
03000038 = ? (Init and Deinit at 08044F4C, 08045048, 080D690C, 080D6B90, 080D6E58, 080D6F34, 080D7240, 080FBE6C, 081087E0, 081096F8)
0300003C = Map base for Foreground/panels. ([+3]=01 will refresh screen.)
03000040 = Party Members HP dialogue?
03000044 = ? (Battle related- Seems to be temp-used for icons.. Init and Deinit at 080454DC , 08104ACC)
03000048 = ? (Unused/debug feature?)
0300004C = (Possibly unused/not referenced?)
03000050 = OAM (03002780)
03000054 = (Arm)
03000058 = Init at 080DC978
0300005C = Mini-games
03000060 = Mini-games
03000064 = Mini-games
03000068 = Mini-games
0300006C = Room data (Including pointers to Event table, NPCs, etc.) (02030000)
03000070 = (See 0802CEC0)
03000074 = Init at 080D690C , 080D6B90 , 080D6E58 , 080D6F34 , 080D7240
03000078 = Init at 080D7304 , 080D73B4 , 080D73E0 , 080D7408 , 080D7430
0300007C = Transition graphic? (Circle In/Out)
03000080 = Palette?
03000084 = 
03000088 = Init and Deinit at 080D6408
0300008C = 
03000090 = Init at 080D1A18 and 080D1CC0.
03000094 = Battle sprites related.
03000098 = 
0300009C = Rope objects (Lash) (02036CF0)
030000A0 = Rope objects (Non-lash)
030000A4 = Swinging Wind Vines (Gaia Rock) / Swinging Wind Chains (Magma Rock)
030000A8 = Opening entrance stuff (Only points to just one 32-bit.) ==>
 03001380 = Frame counter for opening entrance. Edit this to 0 during the opening, and you'll see the opening entrance happen again.
030000AC = Used during title screen.
030000B0 = Camera destination data pointer ==>
 02031090 = Left/Right rotation destination
 02031094 = Frames to rotate for.
030000B4 = Mini-games
030000B8 = 
030000BC = Mini-games (Arm)
030000C0 = 
030000C4 = 
030000C8 = text_getNextChar (copy on heap, preferring IWRAM)
030000CC = Save menu - Save data
030000D0 = Pause menu
030000D4 = 
030000D8 = Enemy data (020308C8)
030000DC = Party menu sprites?
030000E0 = 
030000E4 = Battle icon menu (02035E1C)
030000E8 = Icon menu
030000EC = Trial Roads (Is this the overlay graphics?)
030000F0 = 
030000F4 = 
030000F8 = 
030000FC = 


Arm functions
03000100 = User IRQ handler (Pointed to from 03007FFC.)
Function is called in IRQ mode. This function determines the reason for Interrupt (e.g. Gamepak/Keypad/etc.), and calls the respective function in user mode. After that, goes back to IRQ mode, and returns.
0300021C = Fixed point multiplication.  16.16?
03000230 = Multiplication where r0 is meant to be a denominator? (eg: 1/r0 * r1) Not sure where this is used, though.
03000258 = clear_data(address,size) Fills data with 0.
03000260 = fill_data(address,size,fill_val)
030002D4 = Squareroot(number)
03000314 = 
03000354 = 
030003C8 = 
030004A8 = Division stuff
03000508 = 08002064 = Division(numerator,denominator) (Signed. return remainder?)
03000514 = 0800206C = Division(numerator,denominator) (Unsigned, return remainder?)
03000528 = 08002054 = Division(numerator,denominator) (Signed?)
03000534 = 0800205C = Division(numerator,denominator) (Unsigned?)
03000694 = Decompression? (Probably for sprites, need to research but it looks like it features Constants, Distance Length, and adding to the destination address if bytes are 0xE0+?)
03000730 = Data transfer via ldmia/stmia(destination, source, size)
030007AC = swi $030000 (Unknown?)


03001100 = Counter (From boot)
03001110 = Map Base related
03001120 = BG0-BG3 Horr. and Vert. offsets. (Copied to 04000010.)
03001130 = 
03001150 = Controls
0300116C = Keypad flags turned on when buttons pressed. (Must be manually turned off?)
0300117C = Play Time
03001190-AF = Flags for sprite rendering?
030011BC = GRN - Random number (General Use?)
030011C4 = Map Base
030011FC = Number of OAM scaling/rot entries in 020054D0 table. (to transfer directly to OAM.)
03001200 = Auto-sleep enable
0300120C = Sprites are static on screen when off. (When is this off?)
03001218 = Auto-sleep counter
03001228 = This determines if the functions in 02003610 are called.
0300122C = Counter (used to determine frame animations for certain things)
03001230 = If not 0, copy OAM data to OAM section (and ???), resets to 0.
03001238 = Debug mode
03001248 = Previous number of 32-bits in OAM data. (unknown purpose)
0300124A = Number of 32-bits in OAM data. - copied to above every frame.
 Compared to new number of entries to clear out unused entries with 0x0C000C00.
03001250 = String (0123456789ABCDEF / Integer (+/-))




03001300 = Sprite info (0x38 byte entries, max 64)
OAM Sprite Info
AAAAAAAA BBBBBBBB xxxxBBBB GGGGGGGG
MMMMxxNN EEDDIIHH FFKKPPLL OOOOOOOO
JJJJJJJJ xxxxJJJJ CCCCCCCC CCCCCCCC
CCCCCCCC CCCCCCCC

A = Pointer to next sprite at same Y (pixel). (First sprite  may always be 0) Render order? (There is a pointer table for each Y position)
B = OAM Attributes (transferred to OAM section)
G = Scaling (0x00010000 is x1 scaling)
N = Sprite vram Allocation ID (ID of entry in 030036E0, this is how it knows where to put graphics in vram.)
M = Rotation, not sure how it works.
H = Width
I = Height
D = X offset
E = Y offset
L = Animation number
P = 00=Render, 01=Do not render (off screen)
K = If 1, shows shadow
F = Number of layers in OAM sprite.
O = Same as A, but for the shadow.
J = OAM Attributes for shadow
C = Layer pointers


03002100 = Sprite info 2 (0x18 byte entries, max 64) 
Layer Info /Frame Advancement/Enough info to know how to get the sprite image and when, at least.
16-bit = sprite ID
16-bit = timer to advance frame
8-bit = Direction type
8-bit = palette swap
8-bit = priority (0-3) (Not oam priority, but how to know order to draw the (up to four) sprites on the same oam sprite.)
8-bit = compression type
32-bit = pointer to subsprite pointer table
32-bit = pointer to animation pointer table
32-bit = pointer to animation data
8-bit = offset in animation data (point of execution)
8-bit = Rate to decrease timer (Default 0x10?)
8-bit = subsprite ID (after direction calc)
8-bit = base subsprite ID (before direction calc)


03006FC0 = sound-related
03007800 = Build date/time string and Stack


Default memory usage at 03007FXX (and mirrored to 03FFFFXX)
  Addr. Size Expl.
  7FFCh 4    Pointer to user IRQ handler (32bit ARM code)
  7FF8h 4    Interrupt Check Flag (for IntrWait/VBlankIntrWait functions)
  7FF4h 4    Allocated Area
  7FF0h 4    Pointer to Sound Buffer
  7FE0h 16   Allocated Area
  7FA0h 64   Default area for SP_svc Supervisor Stack (4 words/time)
  7F00h 160  Default area for SP_irq Interrupt Stack (6 words/time)
 Map Code Files


Intro/Boot


02008038 = MAJOR2 = Some Entrances = Return 0200864C
02008040 = MAJOR6 = Return 0
02008044 = MAJOR3 = Exit Init = Return 0200867C
0200804C = MAJOR4 = NPC Init = Return 02008680
02008054 = MAJOR5 = Event Init = Return 02008698
0200805C = MAJOR1 = Initialization
02008204 = MAJOR7 = = Return 0
02008208 = ? (Pointer to 020086A4) ; Palette...
02008278 = ? (Pointer to 020086A4, 020086DC, 020086F0)
0200831C = ? (Pointer to 020086DC)
02008490 = ? (Pointer to 06003000, 06006800)
02008574 = FUNCTION LIST!
0200864C = MAJOR2 = Some Entrances = All
0200867C - MAJOR3 = Exit Init
02008680 = MAJOR4 = NPC Init
02008698 = MAJOR5 = Event Init
020086A4 = ?
020086DC = ?
020086F0 = ?
02008??? = End




Intro/Menu


02008038 = MAJOR2 = Some Entrances = Return 0200A49C
02008040 = MAJOR6 = Return 0
02008044 = MAJOR3 = Exit Init = Return 0200A4CC
0200804C = MAJOR4 = NPC Init = Return 0200A4D0
02008054 = MAJOR5 = Event Init = Return 0200A4E8
0200805C = ?
0200815C = ? (Pntr to 0200A4F4)
020081F4 = ? (Pntr to 0200A410, 0200A4F6, 0200A4F8, 0200A4FA, 0200A4FC, 0200A4FE, 0200A500)
020082E0 = ?
02008328 = MAJOR1 = Initialization
02008A6C = MAJOR7 = Return 0
02008A70 = ?
02008B24 = ?
02008DB4 = ?
02008E44 = ? (Palette/VRAM-related...) Password-related
02009804 = ?
0200987C = ?
020098E0 = ? (06002000)
02009C7C = ?
0200A068 = ?
0200A17C = ?
0200A1C0 = FUNCTION LIST!


0200A438 = ? (Password-related)
0200A440 = ABCDE FGHJK LMNPQ R
0200A454 = STUVW XYZ23 45678 9
0200A468 = abcde fghij kmnpq r
0200A47C = stuvw xyz!? #&$%+ =
0200A490 = ?


0200A49C = MAJOR2 = Some Entrances
0200A4CC = MAJOR3 = Exit Init
0200A4D0 = MAJOR4 = NPC Init
0200A4E8 = MAJOR5 = Event Init
0200A4F4 = ?


0200A65E = ? pass-related


0200A6A0 = ?


0200A6B0 = ?


0200A6C0 = ?


0200A6F0 = ?


0200A700 = ?


0200A70C = ?


0200A71C = ?


0200A74A = PASSWORD BUFFER ; User-entry
0200A88A = pw-rel




5 = Venus Lighthouse Map Code


02008038 = 
02008080 = 
020080A4 = 
020080DC = 
02008118 = 
02008150 = (Includes pointer to 02009DCC)
02008314 = 
0200834C = 
0200838C = 
02008510 = 
0200856C = Return
02008570 = (Pointer from 02009DE8) Called from Script
020085A8 = (Pointer-Called from 020086AC)
02008650 = MAJOR2 = Some Entrances = Return 02009E58
02008658 = MAJOR6 = = Return 0
0200865C = MAJOR3 = Exit Init = Return 0200A0F8
02008664 = NPC-event - Called from script
02008678 = NPC-event - Called from script
02008684 = MAJOR4 = NPC Init = If door=99 Then 0200A378 Else 0200A1B0
020086AC = Laser Collision Event (Includes Script pointer to 02009DD8, and pointer to 020085A8)
0200878C = Event
02008874 = (Called from function 02008B2C)
020088D4 = Event
020088FC = Event
02008924 = Event
02008998 = Event
02008A0C = MAJOR5 = Event Init = Return 0200A408
02008A14 = Return 0
02008A18 = 
02008A54 = MAJOR1 = Initialization
02008B28 = MAJOR7 = = Return 0
02008B2C = (Includes call to 02008874)
02008D30 = 
02009AFC = FUNCTION LIST!
02009CE4 = ?
02009D1C = ?
02009D54 = ?
02009DCC = ? (Pointer list for above 3)
02009DD8 = Function Script Data (PC flashing effect + sound effect when going into lasers)
02009E58 = MAJOR2 = Some Entrances = All
0200A0F8 = MAJOR3 = Exit Init = All
0200A15C = NPC Script Data (Statues)
0200A180 = NPC Script Data
0200A1B0 = MAJOR4 = NPC Init = All
0200A378 = MAJOR4 = NPC Init = Door 99
0200A408 = MAJOR5 = Event Init = All
0200A5A4 = End


6, 7, 8 = Suhalla Gate
02008038 = Event (Map 7) Mercury Djinni Battle
02008044 = MAJOR2 = Some Entrances
02008084 = MAJOR6 = = Return 0
02008088 = MAJOR3 = Exit Init = Return 02008ED0
02008090 = MAJOR4 = NPC Init
020080D0 = MAJOR5 = Event Init
02008110 = Init Map 6: Door 99 sets 894 (Ruffian 2); does ? if on.
02008168 = Init Map 7: ?; Door 99 sets 895 (Ruffian 3, 4, 5); if on, ?; ?.
02008264 = Init Map 8: if flag x109=0 and door=99 then call 02008800. (cutscene after battle.)
0200828C = MAJOR1 = Initialization; Set 020301AC to x100; Return 0
020082E0 = ?; Set x8DE (Ship acquired.)
02008308 = Event (Map 6/All) Warp to 7:0.
02008378 = Event (Map 8) Warp to 7:0.
020083A8 = MAJOR7 = = Return 0
020083AC = Event (Map 6/All) Ruffian 2
02008494 = Event (Map 7) Ruffian 3, 4, 5
02008650 = Event (Map 8) Punch Ant comes out of hiding cutscene.
0200871C = Event (Map 8) Punch Ant comes out of hiding cutscene.
02008800 = Cutscene after battle. (Map 8) Kraden: “My! That was invigorating!…”; Set flag x896.
020088CC = Event (Map 7) Kraden: “Not that way, Jenna! The meeting spot is down…”
02008958 = Function list.
02008AA8 = ?


02008CD8 = MAJOR2 = Some Entrances (Map 6 / All)
02008D98 = MAJOR2 = Some Entrances (Map 7)
02008E40 = MAJOR2 = Some Entrances (Map 8)
02008ED0 = MAJOR3 = Exit Init (Map 6,7,8)
02008F10 = MAJOR4 = NPC Init (Map 8 / All)
02008F58 = MAJOR4 = NPC Init (Map 7)
02009048 = MAJOR4 = NPC Init (Map 6)
02009078 = MAJOR5 = Event Init (Map 6 / All)
020090E4 = MAJOR5 = Event Init (Map 7)
02009180 = MAJOR5 = Event Init (Map 8)
020091CC = End






Event identifiers:
00 = Walkable
01-32 (x1-x20) = Doors
30-? (x1E-) = (Daila's Sanctum)
35-? (x23-) = Reveal?
40-? (x28-) = Item (Daila's Sanctum/Pedestal)
50 (x32) = Lift?
99 (x63) = Cutscene? (Does not display on map.)
100-? (x64-?) = Treasure
(C8,F2,F3,F4) = Well, jar, barrel, wooden box)
255 (xFF) = Solid wall




Event Initialization:
080CCDC0 =(Function for doing event?)
080CE370 =(Function for finding a match?)


Events are listed in this order:
Doors (Sorted by Door Numbers)
Events on collision
(Type 8)
Psynergy
(Type 9)


Event Data:


Event Type (4-bit?)
0 = NPC
1 = Door
2 = Scripted event on collision
3 = Scripted event on command (A button)
4 = Used Item
5 = Used Psynergy (9085=Reveal; 8C15=Move; 8D15=Mind Read); ability seems to be left byte, based on matching ID
6 = ? (See Map 71 Yampi Desert for research.)
7 = (NPC-related?)
8 = Pushing Objects
9 = Pushing Objects


Event Type Arg (4-bit?)
For doors = Door type (Upstairs/downstairs/no stairs/etc.)


If type 0: 02 = True if holding button during collision. (Not moving.)
If type 1: 02=Up stairs 03=Down stairs
If type 3: Dialogue for checking something. (This is what’s being checked. Ex: Chest, jar, barrel, etc.)
If type 5: Ability/Psynergy
??? (0?)
Event Identifier # (NPC objects or Map objects depending on type.)
Flag
Execute (Door numbers/Text entry/Pointer if scripted/etc.)




Map 134:
Door xA = Exit xA
Door (w xCE) xB = Exit xB ; (Tent)






080C8880 = Attach cyclone to entrances. (From sky.)
080C8888 (080E37E0) = Attach cyclone to entrances. (From below.) (Called from Initialization code.)


---
Daila's Shop NPC:


If (NPC(active_PC).dir + x2000) And xC000 = North Then
 shop(3, self)
Else
 --
 dialogue(6199)
 --
End If
---
If NPC(active_PC).dir = North Then
 shop_display(3, self)
Else
[a]Allocates a global object on the heap, prioritising IWRAM over EWRAM.  A pointer to the allocated object is stored in 03000000+rel_addr, and also returned.


I assume 08014D00 works the same way too


Valid input values for rel_addr are probably any multiple of 4 between 8 and 0xFC (below 8 would trash pointers to free memory; above 0xFC would trash the interrupt handler)